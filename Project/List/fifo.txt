; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\fifo.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I.\RTE\_STM32F10x________2.0.0 -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\fifo.crf ..\BSP\BSP_FIFO\FIFO.c]
                          THUMB

                          AREA ||i.fifoFlushBuf||, CODE, READONLY, ALIGN=2

                  fifoFlushBuf PROC
;;;45       */
;;;46     void fifoFlushBuf(void)
000000  4805              LDR      r0,|L1.24|
;;;47     {
;;;48     	out_index = in_index;
000002  8800              LDRH     r0,[r0,#0]  ; in_index
000004  4905              LDR      r1,|L1.28|
000006  8008              STRH     r0,[r1,#0]
;;;49     	/* Set empty flag */
;;;50     	buf_flags |= EMPTY_FLAG;
000008  4805              LDR      r0,|L1.32|
00000a  7800              LDRB     r0,[r0,#0]  ; buf_flags
00000c  f0400002          ORR      r0,r0,#2
000010  4903              LDR      r1,|L1.32|
000012  7008              STRB     r0,[r1,#0]
;;;51     }
000014  4770              BX       lr
;;;52     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      in_index
                  |L1.28|
                          DCD      out_index
                  |L1.32|
                          DCD      buf_flags

                          AREA ||i.fifoGetBufDataCount||, CODE, READONLY, ALIGN=2

                  fifoGetBufDataCount PROC
;;;88       */
;;;89     uint16_t fifoGetBufDataCount(void)
000000  4815              LDR      r0,|L2.88|
;;;90     {
;;;91     	/* Check if buffer is overflowed or empty */
;;;92     	if (out_index == in_index) {
000002  8800              LDRH     r0,[r0,#0]  ; out_index
000004  4915              LDR      r1,|L2.92|
000006  8809              LDRH     r1,[r1,#0]  ; in_index
000008  4288              CMP      r0,r1
00000a  d10e              BNE      |L2.42|
;;;93     		if (!(buf_flags & OVREFLOW_FLAG)) {
00000c  4814              LDR      r0,|L2.96|
00000e  7800              LDRB     r0,[r0,#0]  ; buf_flags
000010  f0000001          AND      r0,r0,#1
000014  b938              CBNZ     r0,|L2.38|
;;;94     			/* Buffer is empty */
;;;95     			buf_flags |= EMPTY_FLAG;
000016  4812              LDR      r0,|L2.96|
000018  7800              LDRB     r0,[r0,#0]  ; buf_flags
00001a  f0400002          ORR      r0,r0,#2
00001e  4910              LDR      r1,|L2.96|
000020  7008              STRB     r0,[r1,#0]
;;;96     			return 0;
000022  2000              MOVS     r0,#0
                  |L2.36|
;;;97     			
;;;98     		} else {
;;;99     			return FIFO_BUF_SIZE;
;;;100    		}
;;;101    	}
;;;102    	if (in_index > out_index) {
;;;103    		return in_index - out_index;
;;;104    		
;;;105    	} else {
;;;106    		return FIFO_BUF_SIZE - out_index + in_index;
;;;107    	}
;;;108    }
000024  4770              BX       lr
                  |L2.38|
000026  2080              MOVS     r0,#0x80              ;99
000028  e7fc              B        |L2.36|
                  |L2.42|
00002a  480c              LDR      r0,|L2.92|
00002c  8800              LDRH     r0,[r0,#0]            ;102  ; in_index
00002e  490a              LDR      r1,|L2.88|
000030  8809              LDRH     r1,[r1,#0]            ;102  ; out_index
000032  4288              CMP      r0,r1                 ;102
000034  dd06              BLE      |L2.68|
000036  4809              LDR      r0,|L2.92|
000038  8800              LDRH     r0,[r0,#0]            ;103  ; in_index
00003a  4907              LDR      r1,|L2.88|
00003c  8809              LDRH     r1,[r1,#0]            ;103  ; out_index
00003e  1a40              SUBS     r0,r0,r1              ;103
000040  b280              UXTH     r0,r0                 ;103
000042  e7ef              B        |L2.36|
                  |L2.68|
000044  4804              LDR      r0,|L2.88|
000046  8800              LDRH     r0,[r0,#0]            ;106  ; out_index
000048  f1c00080          RSB      r0,r0,#0x80           ;106
00004c  4903              LDR      r1,|L2.92|
00004e  8809              LDRH     r1,[r1,#0]            ;106  ; in_index
000050  4408              ADD      r0,r0,r1              ;106
000052  b280              UXTH     r0,r0                 ;106
000054  e7e6              B        |L2.36|
;;;109    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      out_index
                  |L2.92|
                          DCD      in_index
                  |L2.96|
                          DCD      buf_flags

                          AREA ||i.fifoLookBuf||, CODE, READONLY, ALIGN=2

                  fifoLookBuf PROC
;;;115      */
;;;116    void fifoLookBuf(uint8_t *out_buf)
000000  4601              MOV      r1,r0
;;;117    {
;;;118    	uint8_t i = 0;
000002  2000              MOVS     r0,#0
;;;119    
;;;120    	while (i < FIFO_BUF_SIZE) {
000004  e004              B        |L3.16|
                  |L3.6|
;;;121    		out_buf[i] = buffer[i];
000006  4a04              LDR      r2,|L3.24|
000008  5c12              LDRB     r2,[r2,r0]
00000a  540a              STRB     r2,[r1,r0]
;;;122    		i++;
00000c  1c42              ADDS     r2,r0,#1
00000e  b2d0              UXTB     r0,r2
                  |L3.16|
000010  2880              CMP      r0,#0x80              ;120
000012  dbf8              BLT      |L3.6|
;;;123    	}
;;;124    }
000014  4770              BX       lr
;;;125    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      buffer

                          AREA ||i.fifoPopBuf||, CODE, READONLY, ALIGN=2

                  fifoPopBuf PROC
;;;58       */
;;;59     uint16_t fifoPopBuf(uint8_t *out_buf, uint16_t n)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4602              MOV      r2,r0
;;;61     	uint16_t i = 0;
000004  2400              MOVS     r4,#0
;;;62     	uint16_t data_count = 0;
000006  2300              MOVS     r3,#0
;;;63     
;;;64     	while (n--) {
000008  e02c              B        |L4.100|
                  |L4.10|
;;;65     		/* Buffer is overflowed or empty */
;;;66     		if (out_index == in_index) {
00000a  481a              LDR      r0,|L4.116|
00000c  8800              LDRH     r0,[r0,#0]  ; out_index
00000e  4d1a              LDR      r5,|L4.120|
000010  882d              LDRH     r5,[r5,#0]  ; in_index
000012  42a8              CMP      r0,r5
000014  d10c              BNE      |L4.48|
;;;67     			if (!(buf_flags & OVREFLOW_FLAG)) {
000016  4819              LDR      r0,|L4.124|
000018  7800              LDRB     r0,[r0,#0]  ; buf_flags
00001a  f0000001          AND      r0,r0,#1
00001e  b938              CBNZ     r0,|L4.48|
;;;68     				/* Buffer is empty */
;;;69     				buf_flags |= EMPTY_FLAG;
000020  4816              LDR      r0,|L4.124|
000022  7800              LDRB     r0,[r0,#0]  ; buf_flags
000024  f0400002          ORR      r0,r0,#2
000028  4d14              LDR      r5,|L4.124|
00002a  7028              STRB     r0,[r5,#0]
;;;70     				//return EMPTERR;
;;;71     				return 0;
00002c  2000              MOVS     r0,#0
                  |L4.46|
;;;72     			}
;;;73     		}
;;;74     		out_buf[i++] = buffer[out_index++];
;;;75     		out_index &= FIFO_BUF_MASK;
;;;76     		data_count++;
;;;77     		/* Clear overflow flag */
;;;78     		buf_flags &= ~OVREFLOW_FLAG;
;;;79     	}
;;;80     	return data_count;
;;;81     }
00002e  bd70              POP      {r4-r6,pc}
                  |L4.48|
000030  4810              LDR      r0,|L4.116|
000032  8805              LDRH     r5,[r0,#0]            ;74  ; out_index
000034  8800              LDRH     r0,[r0,#0]            ;74  ; out_index
000036  1c40              ADDS     r0,r0,#1              ;74
000038  4e0e              LDR      r6,|L4.116|
00003a  8030              STRH     r0,[r6,#0]            ;74
00003c  4810              LDR      r0,|L4.128|
00003e  5d46              LDRB     r6,[r0,r5]            ;74
000040  4620              MOV      r0,r4                 ;74
000042  1c65              ADDS     r5,r4,#1              ;74
000044  b2ac              UXTH     r4,r5                 ;74
000046  5416              STRB     r6,[r2,r0]            ;74
000048  480a              LDR      r0,|L4.116|
00004a  7800              LDRB     r0,[r0,#0]            ;75  ; out_index
00004c  f000007f          AND      r0,r0,#0x7f           ;75
000050  4d08              LDR      r5,|L4.116|
000052  8028              STRH     r0,[r5,#0]            ;75
000054  1c58              ADDS     r0,r3,#1              ;76
000056  b283              UXTH     r3,r0                 ;76
000058  4808              LDR      r0,|L4.124|
00005a  7800              LDRB     r0,[r0,#0]            ;78  ; buf_flags
00005c  f0200001          BIC      r0,r0,#1              ;78
000060  4d06              LDR      r5,|L4.124|
000062  7028              STRB     r0,[r5,#0]            ;78
                  |L4.100|
000064  1e08              SUBS     r0,r1,#0              ;64
000066  f1a10501          SUB      r5,r1,#1              ;64
00006a  b2a9              UXTH     r1,r5                 ;64
00006c  d1cd              BNE      |L4.10|
00006e  4618              MOV      r0,r3                 ;80
000070  e7dd              B        |L4.46|
;;;82     
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      out_index
                  |L4.120|
                          DCD      in_index
                  |L4.124|
                          DCD      buf_flags
                  |L4.128|
                          DCD      buffer

                          AREA ||i.fifoPushBuf||, CODE, READONLY, ALIGN=2

                  fifoPushBuf PROC
;;;14       */
;;;15     uint16_t fifoPushBuf(uint8_t *data, uint16_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;16     {
000002  4602              MOV      r2,r0
;;;17     	uint16_t i = 0;
000004  2400              MOVS     r4,#0
;;;18     	uint16_t data_count = 0;
000006  2300              MOVS     r3,#0
;;;19     
;;;20     	while (n--) {
000008  e02c              B        |L5.100|
                  |L5.10|
;;;21     		/* If buffer overflowed, drop new data */
;;;22     		if (buf_flags & OVREFLOW_FLAG) {
00000a  481a              LDR      r0,|L5.116|
00000c  7800              LDRB     r0,[r0,#0]  ; buf_flags
00000e  f0000001          AND      r0,r0,#1
000012  b108              CBZ      r0,|L5.24|
;;;23     			//return OVFERR;
;;;24     			return 0;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;25     		} else {
;;;26     			buffer[in_index++] = data[i++];
;;;27     			in_index &= FIFO_BUF_MASK;
;;;28     			/* Clear overflow flag */
;;;29     			buf_flags &= ~EMPTY_FLAG;
;;;30     			data_count++;
;;;31     			/* Set overflow flag */
;;;32     			if (in_index == out_index) {
;;;33     				buf_flags |= OVREFLOW_FLAG;
;;;34     			}
;;;35     		}
;;;36     	}
;;;37     	return data_count;
;;;38     }
000016  bdf0              POP      {r4-r7,pc}
                  |L5.24|
000018  4620              MOV      r0,r4                 ;26
00001a  1c65              ADDS     r5,r4,#1              ;26
00001c  b2ac              UXTH     r4,r5                 ;26
00001e  5c15              LDRB     r5,[r2,r0]            ;26
000020  4815              LDR      r0,|L5.120|
000022  8806              LDRH     r6,[r0,#0]            ;26  ; in_index
000024  8800              LDRH     r0,[r0,#0]            ;26  ; in_index
000026  1c40              ADDS     r0,r0,#1              ;26
000028  4f13              LDR      r7,|L5.120|
00002a  8038              STRH     r0,[r7,#0]            ;26
00002c  4813              LDR      r0,|L5.124|
00002e  5585              STRB     r5,[r0,r6]            ;26
000030  4638              MOV      r0,r7                 ;27
000032  7800              LDRB     r0,[r0,#0]            ;27  ; in_index
000034  f000007f          AND      r0,r0,#0x7f           ;27
000038  463d              MOV      r5,r7                 ;27
00003a  8028              STRH     r0,[r5,#0]            ;27
00003c  480d              LDR      r0,|L5.116|
00003e  7800              LDRB     r0,[r0,#0]            ;29  ; buf_flags
000040  f0200002          BIC      r0,r0,#2              ;29
000044  4d0b              LDR      r5,|L5.116|
000046  7028              STRB     r0,[r5,#0]            ;29
000048  1c58              ADDS     r0,r3,#1              ;30
00004a  b283              UXTH     r3,r0                 ;30
00004c  4638              MOV      r0,r7                 ;32
00004e  8800              LDRH     r0,[r0,#0]            ;32  ; in_index
000050  4d0b              LDR      r5,|L5.128|
000052  882d              LDRH     r5,[r5,#0]            ;32  ; out_index
000054  42a8              CMP      r0,r5                 ;32
000056  d105              BNE      |L5.100|
000058  4806              LDR      r0,|L5.116|
00005a  7800              LDRB     r0,[r0,#0]            ;33  ; buf_flags
00005c  f0400001          ORR      r0,r0,#1              ;33
000060  4d04              LDR      r5,|L5.116|
000062  7028              STRB     r0,[r5,#0]            ;33
                  |L5.100|
000064  1e08              SUBS     r0,r1,#0              ;20
000066  f1a10501          SUB      r5,r1,#1              ;20
00006a  b2a9              UXTH     r1,r5                 ;20
00006c  d1cd              BNE      |L5.10|
00006e  4618              MOV      r0,r3                 ;37
000070  e7d1              B        |L5.22|
;;;39     
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      buf_flags
                  |L5.120|
                          DCD      in_index
                  |L5.124|
                          DCD      buffer
                  |L5.128|
                          DCD      out_index

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30
                  buffer
                          %        128

                          AREA ||.data||, DATA, ALIGN=1

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  01                DCB      0x01
                  buf_flags
000003  00                DCB      0x00
                  in_index
000004  0000              DCB      0x00,0x00
                  out_index
000006  0000              DCB      0x00,0x00
