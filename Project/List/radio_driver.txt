; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\radio_driver.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\radio_driver.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\radio_driver.crf ..\BSP\E31radio_driver\radio_driver.c]
                          THUMB

                          AREA ||i.radioEnable||, CODE, READONLY, ALIGN=2

                  radioEnable PROC
;;;118      */
;;;119    void radioEnable(bool state)
000000  b510              PUSH     {r4,lr}
;;;120    {
000002  4604              MOV      r4,r0
;;;121    	if (state) {
000004  b12c              CBZ      r4,|L1.18|
;;;122    		GPIO_SetBits(RADIO_GPIO_REG_CTRL, RADIO_GPIO_PIN_CTRL);		
000006  f44f4100          MOV      r1,#0x8000
00000a  4805              LDR      r0,|L1.32|
00000c  f7fffffe          BL       GPIO_SetBits
000010  e004              B        |L1.28|
                  |L1.18|
;;;123    		
;;;124    	} else {
;;;125    		GPIO_ResetBits(RADIO_GPIO_REG_CTRL, RADIO_GPIO_PIN_CTRL);				
000012  f44f4100          MOV      r1,#0x8000
000016  4802              LDR      r0,|L1.32|
000018  f7fffffe          BL       GPIO_ResetBits
                  |L1.28|
;;;126    	}
;;;127    	
;;;128    }
00001c  bd10              POP      {r4,pc}
;;;129    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      0x40011000

                          AREA ||i.radioInit||, CODE, READONLY, ALIGN=2

                  radioInit PROC
;;;39       */
;;;40     void radioInit(void) 
000000  b508              PUSH     {r3,lr}
;;;41     {
;;;42     	GPIO_InitTypeDef GPIO_InitStructure;
;;;43     	
;;;44     	RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;45         GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);//要先开时钟，再重映射；关闭jtag，保留swd。  
00000a  2101              MOVS     r1,#1
00000c  4837              LDR      r0,|L2.236|
00000e  f7fffffe          BL       GPIO_PinRemapConfig
;;;46     	
;;;47     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;48     //						|RCC_APB2Periph_GPIOB
;;;49     //						|RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD 
;;;50     						, ENABLE);
;;;51     	
;;;52     	RCC_APB2PeriphClockCmd(RADIO_RCC_APB2Periph, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2008              MOVS     r0,#8
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;53     
;;;54     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;55     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
;;;56     	
;;;57     //	GPIO_InitStructure.GPIO_Pin	= RADIO_GPIOC_PINS;
;;;58     //	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;59     //	GPIO_ResetBits(GPIOC, RADIO_GPIOC_PINS);
;;;60     //	
;;;61     //	GPIO_InitStructure.GPIO_Pin	= RADIO_GPIOB_PINS;
;;;62     //	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;63     //	GPIO_SetBits(GPIOC, RADIO_GPIOB_PINS);
;;;64     	
;;;65     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000022  2004              MOVS     r0,#4
000024  f88d0003          STRB     r0,[sp,#3]
;;;66     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000028  2001              MOVS     r0,#1
00002a  f88d0002          STRB     r0,[sp,#2]
;;;67     	
;;;68     	GPIO_InitStructure.GPIO_Pin	= RADIO_GPIOA_PINS;
00002e  03c0              LSLS     r0,r0,#15
000030  f8ad0000          STRH     r0,[sp,#0]
;;;69     	GPIO_Init(GPIOC, &GPIO_InitStructure);
000034  4669              MOV      r1,sp
000036  482e              LDR      r0,|L2.240|
000038  f7fffffe          BL       GPIO_Init
;;;70     	
;;;71     	//****************************************************************************
;;;72     
;;;73     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00003c  2010              MOVS     r0,#0x10
00003e  f88d0003          STRB     r0,[sp,#3]
;;;74     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000042  2001              MOVS     r0,#1
000044  f88d0002          STRB     r0,[sp,#2]
;;;75     	
;;;76     	GPIO_InitStructure.GPIO_Pin = RADIO_GPIO_PIN_M0 ;
000048  0300              LSLS     r0,r0,#12
00004a  f8ad0000          STRH     r0,[sp,#0]
;;;77     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00004e  2010              MOVS     r0,#0x10
000050  f88d0003          STRB     r0,[sp,#3]
;;;78     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000054  2001              MOVS     r0,#1
000056  f88d0002          STRB     r0,[sp,#2]
;;;79     	GPIO_Init(RADIO_GPIO_REG_M0, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  4825              LDR      r0,|L2.244|
00005e  f7fffffe          BL       GPIO_Init
;;;80     	
;;;81     	GPIO_InitStructure.GPIO_Pin = RADIO_GPIO_PIN_M1 ;
000062  f44f6000          MOV      r0,#0x800
000066  f8ad0000          STRH     r0,[sp,#0]
;;;82     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00006a  2010              MOVS     r0,#0x10
00006c  f88d0003          STRB     r0,[sp,#3]
;;;83     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000070  2001              MOVS     r0,#1
000072  f88d0002          STRB     r0,[sp,#2]
;;;84     	GPIO_Init(RADIO_GPIO_REG_M1, &GPIO_InitStructure);
000076  4669              MOV      r1,sp
000078  481e              LDR      r0,|L2.244|
00007a  f7fffffe          BL       GPIO_Init
;;;85     	
;;;86     //	GPIO_SetBits(RADIO_GPIO_REG_M0,RADIO_GPIO_PIN_M0);
;;;87     //	GPIO_SetBits(RADIO_GPIO_REG_M1,RADIO_GPIO_PIN_M1);
;;;88     	//****************************************************************************
;;;89     //	radioSetMode(RADIO_MODE_SLEEP);
;;;90     GPIO_SetBits(RADIO_GPIO_REG_M0, RADIO_GPIO_PIN_M0);
00007e  f44f5180          MOV      r1,#0x1000
000082  481c              LDR      r0,|L2.244|
000084  f7fffffe          BL       GPIO_SetBits
;;;91     GPIO_SetBits(RADIO_GPIO_REG_M1, RADIO_GPIO_PIN_M1);
000088  f44f6100          MOV      r1,#0x800
00008c  4819              LDR      r0,|L2.244|
00008e  f7fffffe          BL       GPIO_SetBits
;;;92      
;;;93     	BSP_USART1_Init(9600);		 			//初始化串口
000092  f44f5016          MOV      r0,#0x2580
000096  f7fffffe          BL       BSP_USART1_Init
;;;94     	
;;;95     	vTaskDelay(500); 
00009a  f44f70fa          MOV      r0,#0x1f4
00009e  f7fffffe          BL       vTaskDelay
;;;96     	UART1_Send_char(e31_set,sizeof(e31_set));	//发送设置
0000a2  2106              MOVS     r1,#6
0000a4  4814              LDR      r0,|L2.248|
0000a6  f7fffffe          BL       UART1_Send_char
;;;97     	vTaskDelay(500); 
0000aa  f44f70fa          MOV      r0,#0x1f4
0000ae  f7fffffe          BL       vTaskDelay
;;;98     	UART1_Send_char(SendCom,sizeof(SendCom));	//发送设置
0000b2  2103              MOVS     r1,#3
0000b4  4811              LDR      r0,|L2.252|
0000b6  f7fffffe          BL       UART1_Send_char
;;;99     	vTaskDelay(500); 
0000ba  f44f70fa          MOV      r0,#0x1f4
0000be  f7fffffe          BL       vTaskDelay
;;;100    
;;;101    	GPIO_ResetBits(RADIO_GPIO_REG_M0, RADIO_GPIO_PIN_M0);
0000c2  f44f5180          MOV      r1,#0x1000
0000c6  480b              LDR      r0,|L2.244|
0000c8  f7fffffe          BL       GPIO_ResetBits
;;;102    	GPIO_ResetBits(RADIO_GPIO_REG_M1, RADIO_GPIO_PIN_M1);
0000cc  f44f6100          MOV      r1,#0x800
0000d0  4808              LDR      r0,|L2.244|
0000d2  f7fffffe          BL       GPIO_ResetBits
;;;103    
;;;104    	vTaskDelay(100);
0000d6  2064              MOVS     r0,#0x64
0000d8  f7fffffe          BL       vTaskDelay
;;;105    	BSP_USART1_Init(57600);					//初始化串口 
0000dc  f44f4061          MOV      r0,#0xe100
0000e0  f7fffffe          BL       BSP_USART1_Init
;;;106    
;;;107    	vTaskDelay(100);
0000e4  2064              MOVS     r0,#0x64
0000e6  f7fffffe          BL       vTaskDelay
;;;108    //	radioSetMode(RADIO_MODE_NORMAL);
;;;109    //	debugLogInfo("ITSC: radio initialization OK ! \n");
;;;110    }
0000ea  bd08              POP      {r3,pc}
;;;111    	
                          ENDP

                  |L2.236|
                          DCD      0x00300200
                  |L2.240|
                          DCD      0x40011000
                  |L2.244|
                          DCD      0x40010800
                  |L2.248|
                          DCD      e31_set
                  |L2.252|
                          DCD      SendCom

                          AREA ||i.radioSetM0M1||, CODE, READONLY, ALIGN=2

                  radioSetM0M1 PROC
;;;136      */
;;;137    static void radioSetM0M1(bool m0, bool m1)
000000  b570              PUSH     {r4-r6,lr}
;;;138    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;139    	if (m0) {
000006  b12d              CBZ      r5,|L3.20|
;;;140    		GPIO_SetBits(RADIO_GPIO_REG_M0, RADIO_GPIO_PIN_M0);
000008  f44f5180          MOV      r1,#0x1000
00000c  480a              LDR      r0,|L3.56|
00000e  f7fffffe          BL       GPIO_SetBits
000012  e004              B        |L3.30|
                  |L3.20|
;;;141    		
;;;142    	} else {
;;;143    		GPIO_ResetBits(RADIO_GPIO_REG_M0, RADIO_GPIO_PIN_M0);
000014  f44f5180          MOV      r1,#0x1000
000018  4807              LDR      r0,|L3.56|
00001a  f7fffffe          BL       GPIO_ResetBits
                  |L3.30|
;;;144    	}
;;;145    	
;;;146    	if (m1) {
00001e  b12c              CBZ      r4,|L3.44|
;;;147    		GPIO_SetBits(RADIO_GPIO_REG_M1, RADIO_GPIO_PIN_M1);
000020  f44f6100          MOV      r1,#0x800
000024  4804              LDR      r0,|L3.56|
000026  f7fffffe          BL       GPIO_SetBits
00002a  e004              B        |L3.54|
                  |L3.44|
;;;148    		
;;;149    	} else {
;;;150    		GPIO_ResetBits(RADIO_GPIO_REG_M1, RADIO_GPIO_PIN_M1);
00002c  f44f6100          MOV      r1,#0x800
000030  4801              LDR      r0,|L3.56|
000032  f7fffffe          BL       GPIO_ResetBits
                  |L3.54|
;;;151    	}
;;;152    }
000036  bd70              POP      {r4-r6,pc}
;;;153    
                          ENDP

                  |L3.56|
                          DCD      0x40010800

                          AREA ||i.radioSetMode||, CODE, READONLY, ALIGN=1

                  radioSetMode PROC
;;;270      */
;;;271    void radioSetMode(uint8_t mode)
000000  b510              PUSH     {r4,lr}
;;;272    {
000002  4604              MOV      r4,r0
;;;273    	switch (mode)
000004  b134              CBZ      r4,|L4.20|
000006  2c01              CMP      r4,#1
000008  d009              BEQ      |L4.30|
00000a  2c02              CMP      r4,#2
00000c  d00c              BEQ      |L4.40|
00000e  2c03              CMP      r4,#3
000010  d114              BNE      |L4.60|
000012  e00e              B        |L4.50|
                  |L4.20|
;;;274    	{
;;;275    		case RADIO_MODE_NORMAL:
;;;276    			 radioSetM0M1(false, false);
000014  2100              MOVS     r1,#0
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       radioSetM0M1
;;;277    			 break;
00001c  e013              B        |L4.70|
                  |L4.30|
;;;278    		case RADIO_MODE_WAKEUP:
;;;279    			 radioSetM0M1(true, false);
00001e  2100              MOVS     r1,#0
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       radioSetM0M1
;;;280    			 break;
000026  e00e              B        |L4.70|
                  |L4.40|
;;;281    		case RADIO_MODE_POWER_DOWN:
;;;282    			 radioSetM0M1(false, true);
000028  2101              MOVS     r1,#1
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       radioSetM0M1
;;;283    			 break;
000030  e009              B        |L4.70|
                  |L4.50|
;;;284    		case RADIO_MODE_SLEEP:
;;;285    			 radioSetM0M1(true, true);
000032  2101              MOVS     r1,#1
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       radioSetM0M1
;;;286    			 break;
00003a  e004              B        |L4.70|
                  |L4.60|
;;;287    		default:
;;;288    			 radioSetM0M1(false, false);
00003c  2100              MOVS     r1,#0
00003e  4608              MOV      r0,r1
000040  f7fffffe          BL       radioSetM0M1
;;;289    			 break;
000044  bf00              NOP      
                  |L4.70|
000046  bf00              NOP                            ;277
;;;290    	}
;;;291    }
000048  bd10              POP      {r4,pc}
;;;292    
                          ENDP


                          AREA ||i.radioSetParameter||, CODE, READONLY, ALIGN=2

                  radioSetParameter PROC
;;;218      */
;;;219    void radioSetParameter(uint16_t addr, uint32_t baud, uint32_t sped, uint8_t chan)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;220    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;221    	uint8_t cmd[6] = {0xC0, 0xFF, 0xFF, 0x1F, 0x50, 0xC4};
00000c  a141              ADR      r1,|L5.276|
00000e  c903              LDM      r1,{r0,r1}
000010  e9cd0100          STRD     r0,r1,[sp,#0]
;;;222    	uint8_t baud_t;
;;;223    	uint8_t sped_t;	
;;;224    
;;;225    	radioSetMode(RADIO_MODE_SLEEP);
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       radioSetMode
;;;226    	radioDelayMs(5);
00001a  2005              MOVS     r0,#5
00001c  f7fffffe          BL       vTaskDelay
;;;227    
;;;228    	switch (baud) 
000020  f5b74f96          CMP      r7,#0x4b00
000024  d01f              BEQ      |L5.102|
000026  dc0c              BGT      |L5.66|
000028  f5b76f96          CMP      r7,#0x4b0
00002c  d013              BEQ      |L5.86|
00002e  f5b76f16          CMP      r7,#0x960
000032  d012              BEQ      |L5.90|
000034  f5b75f96          CMP      r7,#0x12c0
000038  d011              BEQ      |L5.94|
00003a  f5b75f16          CMP      r7,#0x2580
00003e  d11a              BNE      |L5.118|
000040  e00f              B        |L5.98|
                  |L5.66|
000042  f5b74f16          CMP      r7,#0x9600
000046  d010              BEQ      |L5.106|
000048  f5b74f61          CMP      r7,#0xe100
00004c  d00f              BEQ      |L5.110|
00004e  f5b73fe1          CMP      r7,#0x1c200
000052  d110              BNE      |L5.118|
000054  e00d              B        |L5.114|
                  |L5.86|
;;;229    	{
;;;230    		case 1200:   baud_t = 0; break;
000056  2400              MOVS     r4,#0
000058  e00f              B        |L5.122|
                  |L5.90|
;;;231    		case 2400:   baud_t = 1; break;
00005a  2401              MOVS     r4,#1
00005c  e00d              B        |L5.122|
                  |L5.94|
;;;232    		case 4800:   baud_t = 2; break;
00005e  2402              MOVS     r4,#2
000060  e00b              B        |L5.122|
                  |L5.98|
;;;233    		case 9600:   baud_t = 3; break; //! default
000062  2403              MOVS     r4,#3
000064  e009              B        |L5.122|
                  |L5.102|
;;;234    		case 19200:  baud_t = 4; break;
000066  2404              MOVS     r4,#4
000068  e007              B        |L5.122|
                  |L5.106|
;;;235    		case 38400:  baud_t = 5; break;		
00006a  2405              MOVS     r4,#5
00006c  e005              B        |L5.122|
                  |L5.110|
;;;236    		case 57600:  baud_t = 6; break;
00006e  2406              MOVS     r4,#6
000070  e003              B        |L5.122|
                  |L5.114|
;;;237    		case 115200: baud_t = 7; break;
000072  2407              MOVS     r4,#7
000074  e001              B        |L5.122|
                  |L5.118|
;;;238    		default:	 baud_t = 3; break;				
000076  2403              MOVS     r4,#3
000078  bf00              NOP      
                  |L5.122|
00007a  bf00              NOP                            ;230
;;;239    	}
;;;240    
;;;241    	switch (sped) 
00007c  4640              MOV      r0,r8
00007e  f5b84f96          CMP      r8,#0x4b00
000082  d021              BEQ      |L5.200|
000084  dc0c              BGT      |L5.160|
000086  f5b06f96          CMP      r0,#0x4b0
00008a  d015              BEQ      |L5.184|
00008c  f5b06f16          CMP      r0,#0x960
000090  d014              BEQ      |L5.188|
000092  f5b05f96          CMP      r0,#0x12c0
000096  d013              BEQ      |L5.192|
000098  f5b05f16          CMP      r0,#0x2580
00009c  d11c              BNE      |L5.216|
00009e  e011              B        |L5.196|
                  |L5.160|
0000a0  f5b04f16          CMP      r0,#0x9600
0000a4  d012              BEQ      |L5.204|
0000a6  f5a04043          SUB      r0,r0,#0xc300
0000aa  3850              SUBS     r0,r0,#0x50
0000ac  b180              CBZ      r0,|L5.208|
0000ae  f5a0409c          SUB      r0,r0,#0x4e00
0000b2  3820              SUBS     r0,r0,#0x20
0000b4  b980              CBNZ     r0,|L5.216|
0000b6  e00d              B        |L5.212|
                  |L5.184|
;;;242    	{
;;;243    		case 1200:   sped_t = 0; break; //! default
0000b8  2500              MOVS     r5,#0
0000ba  e00f              B        |L5.220|
                  |L5.188|
;;;244    		case 2400:   sped_t = 1; break;
0000bc  2501              MOVS     r5,#1
0000be  e00d              B        |L5.220|
                  |L5.192|
;;;245    		case 4800:   sped_t = 2; break;
0000c0  2502              MOVS     r5,#2
0000c2  e00b              B        |L5.220|
                  |L5.196|
;;;246    		case 9600:   sped_t = 3; break; 
0000c4  2503              MOVS     r5,#3
0000c6  e009              B        |L5.220|
                  |L5.200|
;;;247    		case 19200:  sped_t = 4; break;
0000c8  2504              MOVS     r5,#4
0000ca  e007              B        |L5.220|
                  |L5.204|
;;;248    		case 38400:  sped_t = 5; break;		
0000cc  2505              MOVS     r5,#5
0000ce  e005              B        |L5.220|
                  |L5.208|
;;;249    		case 50000:  sped_t = 6; break;
0000d0  2506              MOVS     r5,#6
0000d2  e003              B        |L5.220|
                  |L5.212|
;;;250    		case 70000:  sped_t = 7; break;
0000d4  2507              MOVS     r5,#7
0000d6  e001              B        |L5.220|
                  |L5.216|
;;;251    		default:	 sped_t = 0; break;				
0000d8  2500              MOVS     r5,#0
0000da  bf00              NOP      
                  |L5.220|
0000dc  bf00              NOP                            ;243
;;;252    	}	
;;;253    	
;;;254    	cmd[0] = 0xC0; //! always save the parameters
0000de  20c0              MOVS     r0,#0xc0
0000e0  f88d0000          STRB     r0,[sp,#0]
;;;255    	cmd[1] = addr >> 8;
0000e4  1230              ASRS     r0,r6,#8
0000e6  f88d0001          STRB     r0,[sp,#1]
;;;256    	cmd[2] = addr & 0x00FF;
0000ea  b2f0              UXTB     r0,r6
0000ec  f88d0002          STRB     r0,[sp,#2]
;;;257    	cmd[3] = (baud_t << 3) | (sped_t & 0x07);
0000f0  4628              MOV      r0,r5
0000f2  f36400df          BFI      r0,r4,#3,#29
0000f6  b2c0              UXTB     r0,r0
0000f8  f88d0003          STRB     r0,[sp,#3]
;;;258    	cmd[4] = chan;
0000fc  f88d9004          STRB     r9,[sp,#4]
;;;259    	cmd[5] = 0xC4;
000100  20c4              MOVS     r0,#0xc4
000102  f88d0005          STRB     r0,[sp,#5]
;;;260    
;;;261    	UART1_Send_char(cmd, 6); 	
000106  2106              MOVS     r1,#6
000108  4668              MOV      r0,sp
00010a  f7fffffe          BL       UART1_Send_char
;;;262    }
00010e  e8bd87fc          POP      {r2-r10,pc}
;;;263    
                          ENDP

000112  0000              DCW      0x0000
                  |L5.276|
000114  c0ffff1f          DCB      192,255,255,31,"P",196,0
000118  50c400  
00011b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30
                  radioRxBuf
                          %        30

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  crc16Tab
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=1

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  01                DCB      0x01
                  e31_set
000003  c0                DCB      0xc0
000004  ffff3664          DCB      0xff,0xff,0x36,0x64
000008  44                DCB      0x44
                  radioRxBufIndex
000009  00                DCB      0x00
                  gRadioConfigEnable
00000a  00                DCB      0x00
                  ttlSend
00000b  c0                DCB      0xc0
00000c  ffffd864          DCB      0xff,0xff,0xd8,0x64
000010  22                DCB      0x22
                  SendCom
000011  c4c4c4            DCB      0xc4,0xc4,0xc4
