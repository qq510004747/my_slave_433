; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\sx1509.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\sx1509.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I.\RTE\_STM32F10x________2.0.0 -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\sx1509.crf ..\BSP\SX1278\platform\sx12xxEiger\sx1509.c]
                          THUMB

                          AREA ||i.SX1509GetDeviceAddr||, CODE, READONLY, ALIGN=2

                  SX1509GetDeviceAddr PROC
;;;45     
;;;46     uint8_t SX1509GetDeviceAddr( void )
000000  4801              LDR      r0,|L1.8|
;;;47     {
;;;48         return I2cDeviceAddr;
000002  7800              LDRB     r0,[r0,#0]  ; I2cDeviceAddr
;;;49     }
000004  4770              BX       lr
;;;50     
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      I2cDeviceAddr

                          AREA ||i.SX1509Read||, CODE, READONLY, ALIGN=1

                  SX1509Read PROC
;;;30     
;;;31     uint8_t SX1509Read( uint8_t addr, uint8_t *data )
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;33         return SX1509ReadBuffer( addr, data, 1 );
000006  2201              MOVS     r2,#1
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SX1509ReadBuffer
;;;34     }
000010  bd70              POP      {r4-r6,pc}
;;;35     
                          ENDP


                          AREA ||i.SX1509ReadBuffer||, CODE, READONLY, ALIGN=2

                  SX1509ReadBuffer PROC
;;;35     
;;;36     uint8_t SX1509ReadBuffer( uint8_t addr, uint8_t *data, uint8_t size )
000000  b5f8              PUSH     {r3-r7,lr}
;;;37     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;38         return I2cReadBuffer( I2cDeviceAddr << 1, addr, data, size, I2C_ADDR_SIZE_8 );
000008  2000              MOVS     r0,#0
00000a  4905              LDR      r1,|L3.32|
00000c  9000              STR      r0,[sp,#0]
00000e  7809              LDRB     r1,[r1,#0]  ; I2cDeviceAddr
000010  0649              LSLS     r1,r1,#25
000012  0e08              LSRS     r0,r1,#24
000014  4633              MOV      r3,r6
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       I2cReadBuffer
;;;39     }
00001e  bdf8              POP      {r3-r7,pc}
;;;40     
                          ENDP

                  |L3.32|
                          DCD      I2cDeviceAddr

                          AREA ||i.SX1509Reset||, CODE, READONLY, ALIGN=1

                  SX1509Reset PROC
;;;8      
;;;9      uint8_t SX1509Reset( )
000000  b510              PUSH     {r4,lr}
;;;10     {
;;;11         if( SX1509Write( RegReset, 0x12 ) == SX_OK )
000002  2112              MOVS     r1,#0x12
000004  207d              MOVS     r0,#0x7d
000006  f7fffffe          BL       SX1509Write
00000a  b930              CBNZ     r0,|L4.26|
;;;12         {
;;;13             if( SX1509Write( RegReset, 0x34 ) == SX_OK )
00000c  2134              MOVS     r1,#0x34
00000e  207d              MOVS     r0,#0x7d
000010  f7fffffe          BL       SX1509Write
000014  b908              CBNZ     r0,|L4.26|
;;;14             {
;;;15                 return SX_OK;
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;16             }
;;;17         }
;;;18         return SX_ERROR;
;;;19     }
000018  bd10              POP      {r4,pc}
                  |L4.26|
00001a  2001              MOVS     r0,#1                 ;18
00001c  e7fc              B        |L4.24|
;;;20     
                          ENDP


                          AREA ||i.SX1509SetDeviceAddr||, CODE, READONLY, ALIGN=2

                  SX1509SetDeviceAddr PROC
;;;40     
;;;41     void SX1509SetDeviceAddr( uint8_t addr )
000000  4901              LDR      r1,|L5.8|
;;;42     {
;;;43         I2cDeviceAddr = addr;
000002  7008              STRB     r0,[r1,#0]
;;;44     }
000004  4770              BX       lr
;;;45     
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      I2cDeviceAddr

                          AREA ||i.SX1509Write||, CODE, READONLY, ALIGN=1

                  SX1509Write PROC
;;;20     
;;;21     uint8_t SX1509Write( uint8_t addr, uint8_t data )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;22     {
000002  4604              MOV      r4,r0
;;;23         return SX1509WriteBuffer( addr, &data, 1 );
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SX1509WriteBuffer
;;;24     }
00000e  bd1c              POP      {r2-r4,pc}
;;;25     
                          ENDP


                          AREA ||i.SX1509WriteBuffer||, CODE, READONLY, ALIGN=2

                  SX1509WriteBuffer PROC
;;;25     
;;;26     uint8_t SX1509WriteBuffer( uint8_t addr, uint8_t *data, uint8_t size )
000000  b5f8              PUSH     {r3-r7,lr}
;;;27     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;28         return I2cWriteBuffer( I2cDeviceAddr << 1, addr, data, size, I2C_ADDR_SIZE_8 );
000008  2000              MOVS     r0,#0
00000a  4905              LDR      r1,|L7.32|
00000c  9000              STR      r0,[sp,#0]
00000e  7809              LDRB     r1,[r1,#0]  ; I2cDeviceAddr
000010  0649              LSLS     r1,r1,#25
000012  0e08              LSRS     r0,r1,#24
000014  4633              MOV      r3,r6
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       I2cWriteBuffer
;;;29     }
00001e  bdf8              POP      {r3-r7,pc}
;;;30     
                          ENDP

                  |L7.32|
                          DCD      I2cDeviceAddr

                          AREA ||.data||, DATA, ALIGN=0

                  I2cDeviceAddr
000000  3e                DCB      0x3e
