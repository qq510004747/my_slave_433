; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\tcp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\tcp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\tcp.crf ..\BSP\apps\TCP.c]
                          THUMB

                          AREA ||i.TCP_Client_Demo||, CODE, READONLY, ALIGN=1

                  TCP_Client_Demo PROC
;;;24     /* Private function prototypes--------------------------*/
;;;25     uint8_t TCP_Client_Demo(u8 *BUFF,u8 SendLen)
000000  4602              MOV      r2,r0
;;;26     {
;;;27         uint8_t  rt = FALSE;
000002  2000              MOVS     r0,#0
;;;28     //    uint16_t local_port2 =5010;
;;;29     //	for(u8 i=5;i>0;i--)
;;;30     //	{
;;;31     //		switch(getSn_SR(SOCK_TCPC))								       /*获取socket的状态*/
;;;32     //		{
;;;33     //			case SOCK_CLOSED:											/*socket处于关闭状态*/
;;;34     //				socket(SOCK_TCPC,Sn_MR_TCP,local_port2+i,Sn_MR_ND);
;;;35     //				break;
;;;36     //			case SOCK_INIT:												/*socket处于初始化状态*/
;;;37     //				rt = 0x10;
;;;38     //				connect(SOCK_TCPC,ConfigMsg.serip,ConfigMsg.serport);   /*socket连接服务器*/
;;;39     //				break;
;;;40     //			case SOCK_ESTABLISHED: 										 /*socket处于连接建立状态*/
;;;41     //				if(getSn_IR(SOCK_TCPC) & Sn_IR_CON)
;;;42     //				{
;;;43     //					setSn_IR(SOCK_TCPC, Sn_IR_CON); 					/*清除接收中断标志位*/
;;;44     //				}
;;;45     //				len=getSn_RX_RSR(SOCK_TCPC); 							/*定义len为已接收数据的长度*/
;;;46     //				if(len>0)
;;;47     //				{
;;;48     //					recv(SOCK_TCPC,Internet_Txbuff,len); 				/*接收来自Server的数据*/
;;;49     //					Internet_Txbuff[len]=0x00;  						/*添加字符串结束符*/
;;;50     //					send(SOCK_TCPC,BUFF,SendLen);				/*向Server发送数据*/
;;;51     //				}
;;;52     //				rt |= 0x01 ;
;;;53     //				break;
;;;54     //			case SOCK_CLOSE_WAIT: 										/*socket处于等待关闭状态*/
;;;55     //				close(SOCK_TCPC);
;;;56     //				break;
;;;57     //		}
;;;58     //		if((rt == 0x11)||(rt == 0x01)) break;									
;;;59     //	}  
;;;60         return rt ;
;;;61     }
000004  4770              BX       lr
;;;62     
                          ENDP


                          AREA ||i.TCP_Server_Demo||, CODE, READONLY, ALIGN=1

                  TCP_Server_Demo PROC
;;;62     
;;;63     uint8_t TCP_Server_Demo(uint8_t * BUFF,u8 SendLen)
000000  4602              MOV      r2,r0
;;;64     {
;;;65     	 uint8_t  rt = FALSE;
000002  2000              MOVS     r0,#0
;;;66     //	uint16_t len=0;
;;;67     //	for(u8 i=5;i>0;i--)
;;;68     //	{
;;;69     //		switch(getSn_SR(SOCK_TCPS))									   /*获取socket的状态*/
;;;70     //		{
;;;71     //		case SOCK_CLOSED:											    /*socket处于关闭状态*/
;;;72     //			socket(SOCK_TCPS ,Sn_MR_TCP,ConfigMsg.port,Sn_MR_ND);	     /*打开socket*/
;;;73     //			break;
;;;74     
;;;75     //		case SOCK_INIT:	
;;;76     //			/*socket已初始化状态*/
;;;77     //			rt = 0x10;
;;;78     //			listen(SOCK_TCPS);											/*socket建立监听*/
;;;79     //			break;
;;;80     //		case SOCK_ESTABLISHED:											/*socket处于连接建立状态*/
;;;81     //			if(getSn_IR(SOCK_TCPS) & Sn_IR_CON)
;;;82     //			{
;;;83     //				setSn_IR(SOCK_TCPS, Sn_IR_CON);							/*清除接收中断标志位*/
;;;84     //			}
;;;85     //			len=getSn_RX_RSR(SOCK_TCPS);							    /*定义len为已接收数据的长度*/
;;;86     //			if(len>0)
;;;87     //			{
;;;88     //				recv(SOCK_TCPS,Internet_Rxbuff,len);					/*接收来自Client的数据*/
;;;89     //				send(SOCK_TCPS,BUFF,8);	/*向Client发送数据*/
;;;90     
;;;91     ////				send(SOCK_TCPS,Internet_Rxbuff,len);	/*向Client发送数据*/
;;;92     ////			    close(SOCK_TCPS);	//短连接，每接受完成一次数据，断开连接
;;;93     //			}	
;;;94     //			rt |= 0x01 ;
;;;95     //			break;
;;;96     //		 case SOCK_CLOSE_WAIT:	/*socket处于等待关闭状态*/
;;;97     //			close(SOCK_TCPS);
;;;98     //			break;
;;;99     //	   }															
;;;100    //		if((rt == 0x11)||(rt == 0x01)) break;	
;;;101    //	  }
;;;102    	  return rt ;
;;;103    }
000004  4770              BX       lr
;;;104    
                          ENDP

