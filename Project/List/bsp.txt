; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\bsp.crf ..\BSP\BSP\BSP.C]
                          THUMB

                          AREA ||i.BSP_Init||, CODE, READONLY, ALIGN=2

                  BSP_Init PROC
;;;108    *******************************************************************************/
;;;109    void BSP_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;110    {
;;;111    	u8 Switch_Flag = 0;
000002  2400              MOVS     r4,#0
;;;112    	SysTick_Init();
000004  f7fffffe          BL       SysTick_Init
;;;113    	delayInit();
000008  f7fffffe          BL       delayInit
;;;114    	NVIC_Configuration();
00000c  f7fffffe          BL       NVIC_Configuration
;;;115    	EXTI_Initialization();
000010  f7fffffe          BL       EXTI_Initialization
;;;116    	TIM3_Int_Init(9,7199);//1ms
000014  f641411f          MOV      r1,#0x1c1f
000018  2009              MOVS     r0,#9
00001a  f7fffffe          BL       TIM3_Int_Init
;;;117    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);    //开启AFIO时钟
00001e  2101              MOVS     r1,#1
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;118        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE);      /*使能SWD 禁用JTAG*/
000026  2101              MOVS     r1,#1
000028  4824              LDR      r0,|L1.188|
00002a  f7fffffe          BL       GPIO_PinRemapConfig
;;;119    
;;;120    	BSP_OutPut_Init();
00002e  f7fffffe          BL       BSP_OutPut_Init
;;;121    	BSP_InPut_Init();
000032  f7fffffe          BL       BSP_InPut_Init
;;;122    	BSP_Switch_Init();
000036  f7fffffe          BL       BSP_Switch_Init
;;;123    	BSP_USART1_Init(57600);
00003a  f44f4061          MOV      r0,#0xe100
00003e  f7fffffe          BL       BSP_USART1_Init
;;;124    	USART2_Init(57600);  
000042  f44f4061          MOV      r0,#0xe100
000046  f7fffffe          BL       USART2_Init
;;;125    	BoardInit( );
00004a  f7fffffe          BL       BoardInit
;;;126    	Switch_Flag = Get_Switch_Status(); 
00004e  f7fffffe          BL       Get_Switch_Status
000052  4604              MOV      r4,r0
;;;127    	Get_Switch_Message(Switch_Flag);
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       Get_Switch_Message
;;;128    	Adc_Init();
00005a  f7fffffe          BL       Adc_Init
;;;129    	radioInit();
00005e  f7fffffe          BL       radioInit
;;;130    	RS4851_TX;
000062  2001              MOVS     r0,#1
000064  4916              LDR      r1,|L1.192|
000066  6008              STR      r0,[r1,#0]
;;;131    	PAout(15) = 1;
000068  4916              LDR      r1,|L1.196|
00006a  f8c101bc          STR      r0,[r1,#0x1bc]
;;;132    //	RS4851_RX;
;;;133    
;;;134    	while (!getCpuId(&Current_Mac1, &Current_Mac2, &Current_Mac3)) { //! if get mac failed, then continue to get till succeed!
00006e  bf00              NOP      
                  |L1.112|
000070  4a15              LDR      r2,|L1.200|
000072  4916              LDR      r1,|L1.204|
000074  4816              LDR      r0,|L1.208|
000076  f7fffffe          BL       getCpuId
00007a  2800              CMP      r0,#0
00007c  d0f8              BEQ      |L1.112|
;;;135    
;;;136    	}
;;;137    	current_node.mac[0] = Current_Mac1;
00007e  4814              LDR      r0,|L1.208|
000080  6800              LDR      r0,[r0,#0]  ; Current_Mac1
000082  4914              LDR      r1,|L1.212|
000084  f8c10016          STR      r0,[r1,#0x16]  ; current_node
;;;138    	current_node.mac[1] = Current_Mac2;
000088  4810              LDR      r0,|L1.204|
00008a  6801              LDR      r1,[r0,#0]  ; Current_Mac2
00008c  4811              LDR      r0,|L1.212|
00008e  f8c0101a          STR      r1,[r0,#0x1a]
;;;139    	current_node.mac[2] = Current_Mac3;
000092  480d              LDR      r0,|L1.200|
000094  6801              LDR      r1,[r0,#0]  ; Current_Mac3
000096  480f              LDR      r0,|L1.212|
000098  f8c0101e          STR      r1,[r0,#0x1e]
;;;140    	Get_NetMsg();
00009c  f7fffffe          BL       Get_NetMsg
;;;141    	getDevMac(&myMac[0], &myMac[1], &myMac[2], &myMac[3], &myMac[4], &myMac[5]);
0000a0  480d              LDR      r0,|L1.216|
0000a2  1e41              SUBS     r1,r0,#1
0000a4  1e83              SUBS     r3,r0,#2
0000a6  1ec2              SUBS     r2,r0,#3
0000a8  e9cd1000          STRD     r1,r0,[sp,#0]
0000ac  1f01              SUBS     r1,r0,#4
0000ae  1f40              SUBS     r0,r0,#5
0000b0  f7fffffe          BL       getDevMac
;;;142    	printf("init  ok \r\n");
0000b4  a009              ADR      r0,|L1.220|
0000b6  f7fffffe          BL       __2printf
;;;143    } 
0000ba  bd1c              POP      {r2-r4,pc}
;;;144    //普通延时
                          ENDP

                  |L1.188|
                          DCD      0x00300200
                  |L1.192|
                          DCD      0x42210184
                  |L1.196|
                          DCD      0x42210000
                  |L1.200|
                          DCD      Current_Mac3
                  |L1.204|
                          DCD      Current_Mac2
                  |L1.208|
                          DCD      Current_Mac1
                  |L1.212|
                          DCD      current_node
                  |L1.216|
                          DCD      myMac+0x5
                  |L1.220|
0000dc  696e6974          DCB      "init  ok \r\n",0
0000e0  20206f6b
0000e4  200d0a00

                          AREA ||i.NVIC_Configuration||, CODE, READONLY, ALIGN=1

                  NVIC_Configuration PROC
;;;29     u8 myMac[6] = {0};
;;;30     static void NVIC_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;31     {
;;;32     	//响应优先级
;;;33     	//USART1: NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;34     	//CAN1  : NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
;;;35     	//
;;;36     	NVIC_PriorityGroupConfig( NVIC_PriorityGroup_4 );//优先级设置  抢占优先级为0,0-15响应优先级
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;37     }
00000a  bd10              POP      {r4,pc}
;;;38     /***********************************************
                          ENDP


                          AREA ||i.SysTick_Init||, CODE, READONLY, ALIGN=2

                  SysTick_Init PROC
;;;43     ************************************************/
;;;44     static void SysTick_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;45     {
;;;46     	/* 
;;;47     		配置systic中断周期为1ms，并启动systick中断。    	
;;;48         Systick中断向量在(\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm\
;;;49         		startup_stm32f10x_hd.s 文件中定义为 SysTick_Handler。
;;;50         SysTick_Handler函数的实现在stm32f10x_it.c 文件。
;;;51         SysTick_Handler函数调用了SysTick_ISR()函数，在本文件末尾。
;;;52        */	
;;;53     //	SysTick_Config(SystemCoreClock / 1000);
;;;54     	 if( SysTick_Config( SystemCoreClock / 1000 ) )    //1ms
000002  4816              LDR      r0,|L3.92|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  f44f727a          MOV      r2,#0x3e8
00000a  fbb0f1f2          UDIV     r1,r0,r2
00000e  f1b17f80          CMP      r1,#0x1000000
000012  d301              BCC      |L3.24|
000014  2001              MOVS     r0,#1
000016  e01d              B        |L3.84|
                  |L3.24|
000018  f021407f          BIC      r0,r1,#0xff000000
00001c  1e40              SUBS     r0,r0,#1
00001e  f04f22e0          MOV      r2,#0xe000e000
000022  6150              STR      r0,[r2,#0x14]
000024  1750              ASRS     r0,r2,#29
000026  220f              MOVS     r2,#0xf
000028  2800              CMP      r0,#0
00002a  da07              BGE      |L3.60|
00002c  0713              LSLS     r3,r2,#28
00002e  0e1d              LSRS     r5,r3,#24
000030  4b0b              LDR      r3,|L3.96|
000032  f000040f          AND      r4,r0,#0xf
000036  1f24              SUBS     r4,r4,#4
000038  551d              STRB     r5,[r3,r4]
00003a  e003              B        |L3.68|
                  |L3.60|
00003c  0713              LSLS     r3,r2,#28
00003e  0e1c              LSRS     r4,r3,#24
000040  4b08              LDR      r3,|L3.100|
000042  541c              STRB     r4,[r3,r0]
                  |L3.68|
000044  bf00              NOP      
000046  2000              MOVS     r0,#0
000048  f04f22e0          MOV      r2,#0xe000e000
00004c  6190              STR      r0,[r2,#0x18]
00004e  2007              MOVS     r0,#7
000050  6110              STR      r0,[r2,#0x10]
000052  2000              MOVS     r0,#0
                  |L3.84|
000054  b108              CBZ      r0,|L3.90|
;;;55         { 
;;;56             /* Capture error */ 
;;;57             while (1);
000056  bf00              NOP      
                  |L3.88|
000058  e7fe              B        |L3.88|
                  |L3.90|
;;;58         }
;;;59     }
00005a  bd30              POP      {r4,r5,pc}
;;;60     
                          ENDP

                  |L3.92|
                          DCD      SystemCoreClock
                  |L3.96|
                          DCD      0xe000ed18
                  |L3.100|
                          DCD      0xe000e400

                          AREA ||i.delayInit||, CODE, READONLY, ALIGN=2

                  delayInit PROC
;;;77     
;;;78     void delayInit(void)
000000  b510              PUSH     {r4,lr}
;;;79     {        
;;;80     
;;;81     	u32 reload;
;;;82     	SysTick->CTRL &= 0xFFFFFFFB;	 //! bit2清空,选择外部时钟  HCLK/8
000002  f04f20e0          MOV      r0,#0xe000e000
000006  6900              LDR      r0,[r0,#0x10]
000008  f0200004          BIC      r0,r0,#4
00000c  f04f21e0          MOV      r1,#0xe000e000
000010  6108              STR      r0,[r1,#0x10]
;;;83     	fac_ms = fac_ms;
000012  481b              LDR      r0,|L4.128|
000014  8800              LDRH     r0,[r0,#0]  ; fac_ms
000016  491a              LDR      r1,|L4.128|
000018  8008              STRH     r0,[r1,#0]
;;;84     	fac_us = (72000000/1000000)/8;	 //! 1us需计算的脉冲个数,其中(SystemFrequency/1000000)代表1US的脉冲个数,8是需要8分频		 
00001a  2009              MOVS     r0,#9
00001c  4919              LDR      r1,|L4.132|
00001e  7008              STRB     r0,[r1,#0]
;;;85     	fac_ms = (uint16_t)fac_us*1000;  //! 1ms需计算的脉冲个数
000020  4608              MOV      r0,r1
000022  7800              LDRB     r0,[r0,#0]  ; fac_us
000024  eb000140          ADD      r1,r0,r0,LSL #1
000028  ebc110c0          RSB      r0,r1,r0,LSL #7
00002c  f64f71ff          MOV      r1,#0xffff
000030  ea0100c0          AND      r0,r1,r0,LSL #3
000034  4912              LDR      r1,|L4.128|
000036  8008              STRH     r0,[r1,#0]
;;;86     	
;;;87     	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);//选择外部时钟  HCLK
000038  2004              MOVS     r0,#4
00003a  f7fffffe          BL       SysTick_CLKSourceConfig
;;;88     	fac_us=SystemCoreClock/1000000;				//不论是否使用OS,fac_us都需要使用
00003e  4812              LDR      r0,|L4.136|
000040  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000042  4912              LDR      r1,|L4.140|
000044  fbb0f0f1          UDIV     r0,r0,r1
000048  490e              LDR      r1,|L4.132|
00004a  7008              STRB     r0,[r1,#0]
;;;89     	reload=SystemCoreClock/1000000;				//每秒钟的计数次数 单位为M  
00004c  480e              LDR      r0,|L4.136|
00004e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000050  490e              LDR      r1,|L4.140|
000052  fbb0f4f1          UDIV     r4,r0,r1
;;;90     	reload*=1000000/configTICK_RATE_HZ;			//根据configTICK_RATE_HZ设定溢出时间
000056  f44f707a          MOV      r0,#0x3e8
00005a  4344              MULS     r4,r0,r4
;;;91     												//reload为24位寄存器,最大值:16777216,在72M下,约合0.233s左右	
;;;92     	fac_ms=1000/configTICK_RATE_HZ;				//代表OS可以延时的最少单位	   
00005c  2001              MOVS     r0,#1
00005e  4908              LDR      r1,|L4.128|
000060  8008              STRH     r0,[r1,#0]
;;;93     
;;;94     	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
000062  f04f20e0          MOV      r0,#0xe000e000
000066  6900              LDR      r0,[r0,#0x10]
000068  f0400002          ORR      r0,r0,#2
00006c  f04f21e0          MOV      r1,#0xe000e000
000070  6108              STR      r0,[r1,#0x10]
;;;95     	SysTick->LOAD=reload; 						//每1/configTICK_RATE_HZ秒中断一次	
000072  4608              MOV      r0,r1
000074  6144              STR      r4,[r0,#0x14]
;;;96     	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	//开启SYSTICK    
000076  6900              LDR      r0,[r0,#0x10]
000078  f0400001          ORR      r0,r0,#1
00007c  6108              STR      r0,[r1,#0x10]
;;;97     	
;;;98     }
00007e  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L4.128|
                          DCD      fac_ms
                  |L4.132|
                          DCD      fac_us
                  |L4.136|
                          DCD      SystemCoreClock
                  |L4.140|
                          DCD      0x000f4240

                          AREA ||i.systemReboot||, CODE, READONLY, ALIGN=2

                  systemReboot PROC
;;;154    */
;;;155    void systemReboot(void)
000000  a00a              ADR      r0,|L5.44|
;;;156    {
;;;157    	printf("systemReboot\r\n");
000002  f7fffffe          BL       __2printf
;;;158    	__set_FAULTMASK(1);  //关总中断
000006  2001              MOVS     r0,#1
000008  f3808813          MSR      FAULTMASK,r0
00000c  bf00              NOP      
;;;159    	NVIC_SystemReset();//执行复位
00000e  bf00              NOP      
000010  480a              LDR      r0,|L5.60|
000012  6800              LDR      r0,[r0,#0]
000014  f40060e0          AND      r0,r0,#0x700
000018  4909              LDR      r1,|L5.64|
00001a  4308              ORRS     r0,r0,r1
00001c  1d00              ADDS     r0,r0,#4
00001e  4907              LDR      r1,|L5.60|
000020  6008              STR      r0,[r1,#0]
000022  f3bf8f4f          DSB      
000026  bf00              NOP      
000028  bf00              NOP      
                  |L5.42|
00002a  e7fe              B        |L5.42|
;;;160    }
;;;161    
                          ENDP

                  |L5.44|
00002c  73797374          DCB      "systemReboot\r\n",0
000030  656d5265
000034  626f6f74
000038  0d0a00  
00003b  00                DCB      0
                  |L5.60|
                          DCD      0xe000ed0c
                  |L5.64|
                          DCD      0x05fa0000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  crc16Tab
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=2

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  0100              DCB      0x01,0x00
                  Current_Mac1
                          DCD      0x00000000
                  Current_Mac2
                          DCD      0x00000000
                  Current_Mac3
                          DCD      0x00000000
                  fac_us
000010  0000              DCB      0x00,0x00
                  fac_ms
000012  0000              DCW      0x0000
                  myMac
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  0000              DCB      0x00,0x00
