; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\segger_rtt_printf.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\segger_rtt_printf.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -IC:\Users\Administrator\Desktop\FreeRTOS¹¤³ÌÃþ°åV2.0.0\Project\RTE -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0 -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\segger_rtt_printf.crf ..\Libraries\J_LINK_RTT\RTT\SEGGER_RTT_Printf.c]
                          THUMB

                          AREA ||i.SEGGER_RTT_printf||, CODE, READONLY, ALIGN=1

                  SEGGER_RTT_printf PROC
;;;435    */
;;;436    int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
000000  b40f              PUSH     {r0-r3}
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;437      va_list ParamList;
;;;438    
;;;439      va_start(ParamList, sFormat);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;440      return SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
00000a  466a              MOV      r2,sp
00000c  4620              MOV      r0,r4
00000e  9905              LDR      r1,[sp,#0x14]
000010  f7fffffe          BL       SEGGER_RTT_vprintf
;;;441    }
000014  bc38              POP      {r3-r5}
000016  f85dfb14          LDR      pc,[sp],#0x14
;;;442    /*************************** End of file ****************************/
                          ENDP


                          AREA ||i.SEGGER_RTT_vprintf||, CODE, READONLY, ALIGN=1

                  SEGGER_RTT_vprintf PROC
;;;265    */
;;;266    int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b099              SUB      sp,sp,#0x64
000006  4681              MOV      r9,r0
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
;;;267      char c;
;;;268      SEGGER_RTT_PRINTF_DESC BufferDesc;
;;;269      int v;
;;;270      unsigned NumDigits;
;;;271      unsigned FormatFlags;
;;;272      unsigned FieldWidth;
;;;273      char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];
;;;274    
;;;275      BufferDesc.pBuffer        = acBuffer;
00000c  a803              ADD      r0,sp,#0xc
00000e  9014              STR      r0,[sp,#0x50]
;;;276      BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
000010  2040              MOVS     r0,#0x40
000012  9015              STR      r0,[sp,#0x54]
;;;277      BufferDesc.Cnt            = 0;
000014  2000              MOVS     r0,#0
000016  9016              STR      r0,[sp,#0x58]
;;;278      BufferDesc.RTTBufferIndex = BufferIndex;
000018  f8cd9060          STR      r9,[sp,#0x60]
;;;279      BufferDesc.ReturnValue    = 0;
00001c  9017              STR      r0,[sp,#0x5c]
;;;280    
;;;281      do {
00001e  bf00              NOP      
                  |L2.32|
;;;282        c = *sFormat++;
000020  f8156b01          LDRB     r6,[r5],#1
;;;283        if (c == 0) {
000024  b906              CBNZ     r6,|L2.40|
;;;284          break;
000026  e0d4              B        |L2.466|
                  |L2.40|
;;;285        }
;;;286        if (c == '%') {
000028  2e25              CMP      r6,#0x25
00002a  d173              BNE      |L2.276|
;;;287          //
;;;288          // Filter out flags
;;;289          //
;;;290          FormatFlags = 0;
00002c  2700              MOVS     r7,#0
;;;291          do {
00002e  bf00              NOP      
                  |L2.48|
;;;292            c = *sFormat;
000030  782e              LDRB     r6,[r5,#0]
;;;293            switch (c) {
000032  2e23              CMP      r6,#0x23
000034  d012              BEQ      |L2.92|
000036  2e2b              CMP      r6,#0x2b
000038  d00c              BEQ      |L2.84|
00003a  2e2d              CMP      r6,#0x2d
00003c  d002              BEQ      |L2.68|
00003e  2e30              CMP      r6,#0x30
000040  d110              BNE      |L2.100|
000042  e003              B        |L2.76|
                  |L2.68|
;;;294            case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
000044  f0470701          ORR      r7,r7,#1
000048  1c6d              ADDS     r5,r5,#1
00004a  e00c              B        |L2.102|
                  |L2.76|
;;;295            case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
00004c  f0470702          ORR      r7,r7,#2
000050  1c6d              ADDS     r5,r5,#1
000052  e008              B        |L2.102|
                  |L2.84|
;;;296            case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
000054  f0470704          ORR      r7,r7,#4
000058  1c6d              ADDS     r5,r5,#1
00005a  e004              B        |L2.102|
                  |L2.92|
;;;297            case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
00005c  f0470708          ORR      r7,r7,#8
000060  1c6d              ADDS     r5,r5,#1
000062  e000              B        |L2.102|
                  |L2.100|
;;;298            default:  goto FilterFieldWidth;                  
000064  e001              B        |L2.106|
                  |L2.102|
000066  bf00              NOP                            ;294
;;;299    //					        break;
;;;300            }
;;;301          } while (1);
000068  e7e2              B        |L2.48|
                  |L2.106|
;;;302          //
;;;303          // filter out field with
;;;304          //
;;;305    FilterFieldWidth:
;;;306          FieldWidth = 0;
00006a  f04f0800          MOV      r8,#0
;;;307          do {
00006e  bf00              NOP      
                  |L2.112|
;;;308            c = *sFormat;
000070  782e              LDRB     r6,[r5,#0]
;;;309            if (c < '0' || c > '9') {
000072  2e30              CMP      r6,#0x30
000074  db01              BLT      |L2.122|
000076  2e39              CMP      r6,#0x39
000078  dd00              BLE      |L2.124|
                  |L2.122|
;;;310              break;
00007a  e007              B        |L2.140|
                  |L2.124|
;;;311            }
;;;312            sFormat++;
00007c  1c6d              ADDS     r5,r5,#1
;;;313            FieldWidth = FieldWidth * 10 + (c - '0');
00007e  f1a60030          SUB      r0,r6,#0x30
000082  eb080188          ADD      r1,r8,r8,LSL #2
000086  eb000841          ADD      r8,r0,r1,LSL #1
;;;314          } while (1);
00008a  e7f1              B        |L2.112|
                  |L2.140|
00008c  bf00              NOP                            ;310
;;;315    
;;;316          //
;;;317          // Filter out precision (number of digits to display)
;;;318          //
;;;319          NumDigits = 0;
00008e  2000              MOVS     r0,#0
000090  9013              STR      r0,[sp,#0x4c]
;;;320          c = *sFormat;
000092  782e              LDRB     r6,[r5,#0]
;;;321          if (c == '.') {
000094  2e2e              CMP      r6,#0x2e
000096  d112              BNE      |L2.190|
;;;322            sFormat++;
000098  1c6d              ADDS     r5,r5,#1
;;;323            do {
00009a  bf00              NOP      
                  |L2.156|
;;;324              c = *sFormat;
00009c  782e              LDRB     r6,[r5,#0]
;;;325              if (c < '0' || c > '9') {
00009e  2e30              CMP      r6,#0x30
0000a0  db01              BLT      |L2.166|
0000a2  2e39              CMP      r6,#0x39
0000a4  dd00              BLE      |L2.168|
                  |L2.166|
;;;326                break;
0000a6  e009              B        |L2.188|
                  |L2.168|
;;;327              }
;;;328              sFormat++;
0000a8  1c6d              ADDS     r5,r5,#1
;;;329              NumDigits = NumDigits * 10 + (c - '0');
0000aa  f1a60030          SUB      r0,r6,#0x30
0000ae  9913              LDR      r1,[sp,#0x4c]
0000b0  eb010181          ADD      r1,r1,r1,LSL #2
0000b4  eb000041          ADD      r0,r0,r1,LSL #1
0000b8  9013              STR      r0,[sp,#0x4c]
;;;330            } while (1);
0000ba  e7ef              B        |L2.156|
                  |L2.188|
0000bc  bf00              NOP                            ;326
                  |L2.190|
;;;331          }
;;;332          //
;;;333          // Filter out length modifier
;;;334          //
;;;335          c = *sFormat;
0000be  782e              LDRB     r6,[r5,#0]
;;;336          do {
0000c0  bf00              NOP      
                  |L2.194|
;;;337            if (c == 'l' || c == 'h') {
0000c2  2e6c              CMP      r6,#0x6c
0000c4  d001              BEQ      |L2.202|
0000c6  2e68              CMP      r6,#0x68
0000c8  d102              BNE      |L2.208|
                  |L2.202|
;;;338              c = *sFormat++;
0000ca  f8156b01          LDRB     r6,[r5],#1
;;;339              continue;
0000ce  e000              B        |L2.210|
                  |L2.208|
;;;340            }
;;;341            break;
0000d0  e000              B        |L2.212|
                  |L2.210|
;;;342          } while (1);
0000d2  e7f6              B        |L2.194|
                  |L2.212|
0000d4  bf00              NOP                            ;341
;;;343          //
;;;344          // Handle specifiers
;;;345          //
;;;346          switch (c) {
0000d6  2e70              CMP      r6,#0x70
0000d8  d05b              BEQ      |L2.402|
0000da  dc08              BGT      |L2.238|
0000dc  2e25              CMP      r6,#0x25
0000de  d068              BEQ      |L2.434|
0000e0  2e58              CMP      r6,#0x58
0000e2  d035              BEQ      |L2.336|
0000e4  2e63              CMP      r6,#0x63
0000e6  d009              BEQ      |L2.252|
0000e8  2e64              CMP      r6,#0x64
0000ea  d167              BNE      |L2.444|
0000ec  e013              B        |L2.278|
                  |L2.238|
0000ee  2e73              CMP      r6,#0x73
0000f0  d03c              BEQ      |L2.364|
0000f2  2e75              CMP      r6,#0x75
0000f4  d01d              BEQ      |L2.306|
0000f6  2e78              CMP      r6,#0x78
0000f8  d160              BNE      |L2.444|
0000fa  e028              B        |L2.334|
                  |L2.252|
;;;347          case 'c': {
;;;348            char c0;
;;;349            v = va_arg(*pParamList, int);
0000fc  6821              LDR      r1,[r4,#0]
0000fe  1d08              ADDS     r0,r1,#4
000100  6020              STR      r0,[r4,#0]
000102  f8d1a000          LDR      r10,[r1,#0]
;;;350            c0 = (char)v;
000106  f00a0bff          AND      r11,r10,#0xff
;;;351            _StoreChar(&BufferDesc, c0);
00010a  4659              MOV      r1,r11
00010c  a814              ADD      r0,sp,#0x50
00010e  f7fffffe          BL       _StoreChar
;;;352            break;
000112  e053              B        |L2.444|
                  |L2.276|
000114  e055              B        |L2.450|
                  |L2.278|
;;;353          }
;;;354          case 'd':
;;;355            v = va_arg(*pParamList, int);
000116  6821              LDR      r1,[r4,#0]
000118  1d08              ADDS     r0,r1,#4
00011a  6020              STR      r0,[r4,#0]
00011c  f8d1a000          LDR      r10,[r1,#0]
;;;356            _PrintInt(&BufferDesc, v, 10, NumDigits, FieldWidth, FormatFlags);
000120  e9cd8700          STRD     r8,r7,[sp,#0]
000124  220a              MOVS     r2,#0xa
000126  4651              MOV      r1,r10
000128  a814              ADD      r0,sp,#0x50
00012a  9b13              LDR      r3,[sp,#0x4c]
00012c  f7fffffe          BL       _PrintInt
;;;357            break;
000130  e044              B        |L2.444|
                  |L2.306|
;;;358          case 'u':
;;;359            v = va_arg(*pParamList, int);
000132  6821              LDR      r1,[r4,#0]
000134  1d08              ADDS     r0,r1,#4
000136  6020              STR      r0,[r4,#0]
000138  f8d1a000          LDR      r10,[r1,#0]
;;;360            _PrintUnsigned(&BufferDesc, v, 10, NumDigits, FieldWidth, FormatFlags);
00013c  e9cd8700          STRD     r8,r7,[sp,#0]
000140  220a              MOVS     r2,#0xa
000142  4651              MOV      r1,r10
000144  a814              ADD      r0,sp,#0x50
000146  9b13              LDR      r3,[sp,#0x4c]
000148  f7fffffe          BL       _PrintUnsigned
;;;361            break;
00014c  e036              B        |L2.444|
                  |L2.334|
;;;362          case 'x':
;;;363          case 'X':
00014e  bf00              NOP      
                  |L2.336|
;;;364            v = va_arg(*pParamList, int);
000150  6821              LDR      r1,[r4,#0]
000152  1d08              ADDS     r0,r1,#4
000154  6020              STR      r0,[r4,#0]
000156  f8d1a000          LDR      r10,[r1,#0]
;;;365            _PrintUnsigned(&BufferDesc, v, 16, NumDigits, FieldWidth, FormatFlags);
00015a  e9cd8700          STRD     r8,r7,[sp,#0]
00015e  2210              MOVS     r2,#0x10
000160  4651              MOV      r1,r10
000162  a814              ADD      r0,sp,#0x50
000164  9b13              LDR      r3,[sp,#0x4c]
000166  f7fffffe          BL       _PrintUnsigned
;;;366            break;
00016a  e027              B        |L2.444|
                  |L2.364|
;;;367          case 's':
;;;368            {
;;;369              const char * s = va_arg(*pParamList, const char *);
00016c  6821              LDR      r1,[r4,#0]
00016e  1d08              ADDS     r0,r1,#4
000170  6020              STR      r0,[r4,#0]
000172  f8d1b000          LDR      r11,[r1,#0]
;;;370              do {
000176  bf00              NOP      
                  |L2.376|
;;;371                c = *s++;
000178  f81b6b01          LDRB     r6,[r11],#1
;;;372                if (c == 0) {
00017c  b906              CBNZ     r6,|L2.384|
;;;373                  break;
00017e  e006              B        |L2.398|
                  |L2.384|
;;;374                }
;;;375               _StoreChar(&BufferDesc, c);
000180  4631              MOV      r1,r6
000182  a814              ADD      r0,sp,#0x50
000184  f7fffffe          BL       _StoreChar
;;;376              } while (BufferDesc.ReturnValue >= 0);
000188  9817              LDR      r0,[sp,#0x5c]
00018a  2800              CMP      r0,#0
00018c  daf4              BGE      |L2.376|
                  |L2.398|
00018e  bf00              NOP                            ;373
;;;377            }
;;;378            break;
000190  e014              B        |L2.444|
                  |L2.402|
;;;379          case 'p':
;;;380            v = va_arg(*pParamList, int);
000192  6821              LDR      r1,[r4,#0]
000194  1d08              ADDS     r0,r1,#4
000196  6020              STR      r0,[r4,#0]
000198  f8d1a000          LDR      r10,[r1,#0]
;;;381            _PrintUnsigned(&BufferDesc, v, 16, 8, 8, 0);
00019c  2000              MOVS     r0,#0
00019e  2108              MOVS     r1,#8
0001a0  460b              MOV      r3,r1
0001a2  2210              MOVS     r2,#0x10
0001a4  e9cd1000          STRD     r1,r0,[sp,#0]
0001a8  4651              MOV      r1,r10
0001aa  a814              ADD      r0,sp,#0x50
0001ac  f7fffffe          BL       _PrintUnsigned
;;;382            break;
0001b0  e004              B        |L2.444|
                  |L2.434|
;;;383          case '%':
;;;384            _StoreChar(&BufferDesc, '%');
0001b2  2125              MOVS     r1,#0x25
0001b4  a814              ADD      r0,sp,#0x50
0001b6  f7fffffe          BL       _StoreChar
;;;385            break;
0001ba  bf00              NOP      
                  |L2.444|
0001bc  bf00              NOP                            ;352
;;;386          }
;;;387          sFormat++;
0001be  1c6d              ADDS     r5,r5,#1
0001c0  e003              B        |L2.458|
                  |L2.450|
;;;388        } else {
;;;389          _StoreChar(&BufferDesc, c);
0001c2  4631              MOV      r1,r6
0001c4  a814              ADD      r0,sp,#0x50
0001c6  f7fffffe          BL       _StoreChar
                  |L2.458|
;;;390        }
;;;391      } while (BufferDesc.ReturnValue >= 0);
0001ca  9817              LDR      r0,[sp,#0x5c]
0001cc  2800              CMP      r0,#0
0001ce  f6bfaf27          BGE      |L2.32|
                  |L2.466|
0001d2  bf00              NOP                            ;284
;;;392    
;;;393      if (BufferDesc.ReturnValue > 0) {
0001d4  9817              LDR      r0,[sp,#0x5c]
0001d6  2800              CMP      r0,#0
0001d8  dd0a              BLE      |L2.496|
;;;394        //
;;;395        // Write remaining data, if any
;;;396        //
;;;397        if (BufferDesc.Cnt != 0) {
0001da  9816              LDR      r0,[sp,#0x58]
0001dc  b120              CBZ      r0,|L2.488|
;;;398          SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
0001de  a903              ADD      r1,sp,#0xc
0001e0  4648              MOV      r0,r9
0001e2  9a16              LDR      r2,[sp,#0x58]
0001e4  f7fffffe          BL       SEGGER_RTT_Write
                  |L2.488|
;;;399        }
;;;400        BufferDesc.ReturnValue += BufferDesc.Cnt;
0001e8  e9dd1016          LDRD     r1,r0,[sp,#0x58]
0001ec  4408              ADD      r0,r0,r1
0001ee  9017              STR      r0,[sp,#0x5c]
                  |L2.496|
;;;401      }
;;;402      return BufferDesc.ReturnValue;
0001f0  9817              LDR      r0,[sp,#0x5c]
;;;403    }
0001f2  b019              ADD      sp,sp,#0x64
0001f4  e8bd8ff0          POP      {r4-r11,pc}
;;;404    
                          ENDP


                          AREA ||i._PrintInt||, CODE, READONLY, ALIGN=1

                  _PrintInt PROC
;;;173    */
;;;174    static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d5ffc          PUSH     {r2-r12,lr}
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4692              MOV      r10,r2
00000a  4698              MOV      r8,r3
00000c  e9dd450c          LDRD     r4,r5,[sp,#0x30]
;;;175      unsigned Width;
;;;176      unsigned Number;
;;;177    
;;;178      Number = (v < 0) ? -v : v;
000010  2e00              CMP      r6,#0
000012  da01              BGE      |L3.24|
000014  4270              RSBS     r0,r6,#0
000016  e000              B        |L3.26|
                  |L3.24|
000018  4630              MOV      r0,r6
                  |L3.26|
00001a  4683              MOV      r11,r0
;;;179    
;;;180      //
;;;181      // Get actual field width
;;;182      //
;;;183      Width = 1;
00001c  f04f0901          MOV      r9,#1
;;;184      while (Number >= Base) {
000020  e003              B        |L3.42|
                  |L3.34|
;;;185        Number = (Number / Base);
000022  fbbbfbfa          UDIV     r11,r11,r10
;;;186        Width++;
000026  f1090901          ADD      r9,r9,#1
                  |L3.42|
00002a  45d3              CMP      r11,r10               ;184
00002c  d2f9              BCS      |L3.34|
;;;187      }
;;;188      if (NumDigits > Width) {
00002e  45c8              CMP      r8,r9
000030  d900              BLS      |L3.52|
;;;189        Width = NumDigits;
000032  46c1              MOV      r9,r8
                  |L3.52|
;;;190      }
;;;191      if ((FieldWidth > 0) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
000034  b134              CBZ      r4,|L3.68|
000036  2e00              CMP      r6,#0
000038  db03              BLT      |L3.66|
00003a  f0050004          AND      r0,r5,#4
00003e  2804              CMP      r0,#4
000040  d100              BNE      |L3.68|
                  |L3.66|
;;;192        FieldWidth--;
000042  1e64              SUBS     r4,r4,#1
                  |L3.68|
;;;193      }
;;;194    
;;;195      //
;;;196      // Print leading spaces if necessary
;;;197      //
;;;198      if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0) || (NumDigits != 0)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0)) {
000044  f0050002          AND      r0,r5,#2
000048  b110              CBZ      r0,|L3.80|
00004a  f1b80f00          CMP      r8,#0
00004e  d012              BEQ      |L3.118|
                  |L3.80|
000050  f0050001          AND      r0,r5,#1
000054  b978              CBNZ     r0,|L3.118|
;;;199        if (FieldWidth != 0) {
000056  b174              CBZ      r4,|L3.118|
;;;200          while ((FieldWidth != 0) && (Width < FieldWidth--)) {
000058  e008              B        |L3.108|
                  |L3.90|
;;;201            _StoreChar(pBufferDesc, ' ');
00005a  2120              MOVS     r1,#0x20
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       _StoreChar
;;;202            if (pBufferDesc->ReturnValue < 0) {
000062  68f8              LDR      r0,[r7,#0xc]
000064  2800              CMP      r0,#0
000066  da01              BGE      |L3.108|
                  |L3.104|
;;;203              return;
;;;204            }
;;;205          }
;;;206        }
;;;207      }
;;;208      //
;;;209      // Print sign if necessary
;;;210      //
;;;211      if (v < 0) {
;;;212        v = -v;
;;;213        _StoreChar(pBufferDesc, '-');
;;;214        if (pBufferDesc->ReturnValue < 0) {
;;;215          return;
;;;216        }
;;;217      } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
;;;218        _StoreChar(pBufferDesc, '+');
;;;219        if (pBufferDesc->ReturnValue < 0) {
;;;220          return;
;;;221        }
;;;222      }
;;;223      //
;;;224      // Print leading zeros if necessary
;;;225      //
;;;226      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0) && (NumDigits == 0)) {
;;;227        if (FieldWidth != 0) {
;;;228          while ((FieldWidth != 0) && (Width < FieldWidth--)) {
;;;229            _StoreChar(pBufferDesc, '0');
;;;230            if (pBufferDesc->ReturnValue < 0) {
;;;231              return;
;;;232            }
;;;233          }
;;;234        }
;;;235      }
;;;236    
;;;237      //
;;;238      // Print number without sign
;;;239      //
;;;240      _PrintUnsigned(pBufferDesc, v, Base, NumDigits, FieldWidth, FormatFlags);
;;;241    }
000068  e8bd9ffc          POP      {r2-r12,pc}
                  |L3.108|
00006c  b11c              CBZ      r4,|L3.118|
00006e  4620              MOV      r0,r4                 ;200
000070  1e64              SUBS     r4,r4,#1              ;200
000072  4548              CMP      r0,r9                 ;200
000074  d8f1              BHI      |L3.90|
                  |L3.118|
000076  2e00              CMP      r6,#0                 ;211
000078  da08              BGE      |L3.140|
00007a  4276              RSBS     r6,r6,#0              ;212
00007c  212d              MOVS     r1,#0x2d              ;213
00007e  4638              MOV      r0,r7                 ;213
000080  f7fffffe          BL       _StoreChar
000084  68f8              LDR      r0,[r7,#0xc]          ;214
000086  2800              CMP      r0,#0                 ;214
000088  da0c              BGE      |L3.164|
00008a  e7ed              B        |L3.104|
                  |L3.140|
00008c  f0050004          AND      r0,r5,#4              ;217
000090  2804              CMP      r0,#4                 ;217
000092  d107              BNE      |L3.164|
000094  212b              MOVS     r1,#0x2b              ;218
000096  4638              MOV      r0,r7                 ;218
000098  f7fffffe          BL       _StoreChar
00009c  68f8              LDR      r0,[r7,#0xc]          ;219
00009e  2800              CMP      r0,#0                 ;219
0000a0  da00              BGE      |L3.164|
0000a2  e7e1              B        |L3.104|
                  |L3.164|
0000a4  f0050002          AND      r0,r5,#2              ;226
0000a8  2802              CMP      r0,#2                 ;226
0000aa  d114              BNE      |L3.214|
0000ac  f0050001          AND      r0,r5,#1              ;226
0000b0  b988              CBNZ     r0,|L3.214|
0000b2  f1b80f00          CMP      r8,#0                 ;226
0000b6  d10e              BNE      |L3.214|
0000b8  b16c              CBZ      r4,|L3.214|
0000ba  e007              B        |L3.204|
                  |L3.188|
0000bc  2130              MOVS     r1,#0x30              ;229
0000be  4638              MOV      r0,r7                 ;229
0000c0  f7fffffe          BL       _StoreChar
0000c4  68f8              LDR      r0,[r7,#0xc]          ;230
0000c6  2800              CMP      r0,#0                 ;230
0000c8  da00              BGE      |L3.204|
0000ca  e7cd              B        |L3.104|
                  |L3.204|
0000cc  b11c              CBZ      r4,|L3.214|
0000ce  4620              MOV      r0,r4                 ;228
0000d0  1e64              SUBS     r4,r4,#1              ;228
0000d2  4548              CMP      r0,r9                 ;228
0000d4  d8f2              BHI      |L3.188|
                  |L3.214|
0000d6  4643              MOV      r3,r8                 ;240
0000d8  4652              MOV      r2,r10                ;240
0000da  4631              MOV      r1,r6                 ;240
0000dc  4638              MOV      r0,r7                 ;240
0000de  e9cd4500          STRD     r4,r5,[sp,#0]         ;240
0000e2  f7fffffe          BL       _PrintUnsigned
0000e6  bf00              NOP      
0000e8  e7be              B        |L3.104|
;;;242    
                          ENDP


                          AREA ||i._PrintUnsigned||, CODE, READONLY, ALIGN=2

                  _PrintUnsigned PROC
;;;97     */
;;;98     static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, int NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
000000  e92d4ffe          PUSH     {r1-r11,lr}
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
00000c  e9dd5b0c          LDRD     r5,r11,[sp,#0x30]
;;;99       static const char _aV2C[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
;;;100      unsigned Div;
;;;101      unsigned Digit = 1;
000010  2601              MOVS     r6,#1
;;;102      unsigned Number;
;;;103      unsigned Width;
;;;104      char c;
;;;105    
;;;106      Number = v;
000012  9701              STR      r7,[sp,#4]
;;;107    
;;;108      //
;;;109      // Get actual field width
;;;110      //
;;;111      Width = 1;
000014  46b2              MOV      r10,r6
;;;112      while (Number >= Base) {
000016  e005              B        |L4.36|
                  |L4.24|
;;;113        Number = (Number / Base);
000018  9801              LDR      r0,[sp,#4]
00001a  fbb0f0f4          UDIV     r0,r0,r4
00001e  9001              STR      r0,[sp,#4]
;;;114        Width++;
000020  f10a0a01          ADD      r10,r10,#1
                  |L4.36|
000024  9801              LDR      r0,[sp,#4]            ;112
000026  42a0              CMP      r0,r4                 ;112
000028  d2f6              BCS      |L4.24|
;;;115      }
;;;116      if ((unsigned)NumDigits > Width) {
00002a  45d0              CMP      r8,r10
00002c  d900              BLS      |L4.48|
;;;117        Width = NumDigits;
00002e  46c2              MOV      r10,r8
                  |L4.48|
;;;118      }
;;;119      //
;;;120      // Print leading chars if necessary
;;;121      //
;;;122      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0) {
000030  f00b0001          AND      r0,r11,#1
000034  b9e0              CBNZ     r0,|L4.112|
;;;123        if (FieldWidth != 0) {
000036  b1dd              CBZ      r5,|L4.112|
;;;124          if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0)) {
000038  f00b0002          AND      r0,r11,#2
00003c  2802              CMP      r0,#2
00003e  d105              BNE      |L4.76|
000040  f1b80f00          CMP      r8,#0
000044  d102              BNE      |L4.76|
;;;125            c = '0';
000046  2030              MOVS     r0,#0x30
000048  9000              STR      r0,[sp,#0]
00004a  e001              B        |L4.80|
                  |L4.76|
;;;126          } else {
;;;127            c = ' ';
00004c  2020              MOVS     r0,#0x20
00004e  9000              STR      r0,[sp,#0]
                  |L4.80|
;;;128          }
;;;129          while ((FieldWidth != 0) && (Width < FieldWidth--)) {
000050  e009              B        |L4.102|
                  |L4.82|
;;;130            _StoreChar(pBufferDesc, c);
000052  4648              MOV      r0,r9
000054  9900              LDR      r1,[sp,#0]
000056  f7fffffe          BL       _StoreChar
;;;131            if (pBufferDesc->ReturnValue < 0) {
00005a  f8d9000c          LDR      r0,[r9,#0xc]
00005e  2800              CMP      r0,#0
000060  da01              BGE      |L4.102|
                  |L4.98|
;;;132              return;
;;;133            }
;;;134          }
;;;135        }
;;;136      }
;;;137      //
;;;138      // Count how many digits are required by precision
;;;139      //
;;;140      while (((v / Digit) >= Base) | (NumDigits-- > 1)) {
;;;141        Digit *= Base;
;;;142      }
;;;143      //
;;;144      // Output digits
;;;145      //
;;;146      do {
;;;147        Div = v / Digit;
;;;148        v -= Div * Digit;
;;;149        _StoreChar(pBufferDesc, _aV2C[Div]);
;;;150        if (pBufferDesc->ReturnValue < 0) {
;;;151          break;
;;;152        }
;;;153        Digit /= Base;
;;;154      } while (Digit);
;;;155      //
;;;156      // Print trailing spaces if necessary
;;;157      //
;;;158      if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
;;;159        if (FieldWidth != 0) {
;;;160          while ((FieldWidth != 0) && (Width < FieldWidth--)) {
;;;161            _StoreChar(pBufferDesc, ' ');
;;;162            if (pBufferDesc->ReturnValue < 0) {
;;;163              return;
;;;164            }
;;;165          }
;;;166        }
;;;167      }
;;;168    }
000062  e8bd8ffe          POP      {r1-r11,pc}
                  |L4.102|
000066  b11d              CBZ      r5,|L4.112|
000068  4628              MOV      r0,r5                 ;129
00006a  1e6d              SUBS     r5,r5,#1              ;129
00006c  4550              CMP      r0,r10                ;129
00006e  d8f0              BHI      |L4.82|
                  |L4.112|
000070  e000              B        |L4.116|
                  |L4.114|
000072  4366              MULS     r6,r4,r6              ;141
                  |L4.116|
000074  fbb7f0f6          UDIV     r0,r7,r6              ;140
000078  42a0              CMP      r0,r4                 ;140
00007a  d301              BCC      |L4.128|
00007c  2001              MOVS     r0,#1                 ;140
00007e  e000              B        |L4.130|
                  |L4.128|
000080  2000              MOVS     r0,#0                 ;140
                  |L4.130|
000082  4641              MOV      r1,r8                 ;140
000084  f1a80801          SUB      r8,r8,#1              ;140
000088  2901              CMP      r1,#1                 ;140
00008a  dd01              BLE      |L4.144|
00008c  2101              MOVS     r1,#1                 ;140
00008e  e000              B        |L4.146|
                  |L4.144|
000090  2100              MOVS     r1,#0                 ;140
                  |L4.146|
000092  4308              ORRS     r0,r0,r1              ;140
000094  2800              CMP      r0,#0                 ;140
000096  d1ec              BNE      |L4.114|
000098  bf00              NOP                            ;146
                  |L4.154|
00009a  fbb7f0f6          UDIV     r0,r7,r6              ;147
00009e  9002              STR      r0,[sp,#8]            ;147
0000a0  9802              LDR      r0,[sp,#8]            ;148
0000a2  fb007716          MLS      r7,r0,r6,r7           ;148
0000a6  4a12              LDR      r2,|L4.240|
0000a8  9802              LDR      r0,[sp,#8]            ;149
0000aa  5c11              LDRB     r1,[r2,r0]            ;149
0000ac  4648              MOV      r0,r9                 ;149
0000ae  f7fffffe          BL       _StoreChar
0000b2  f8d9000c          LDR      r0,[r9,#0xc]          ;150
0000b6  2800              CMP      r0,#0                 ;150
0000b8  da00              BGE      |L4.188|
0000ba  e003              B        |L4.196|
                  |L4.188|
0000bc  fbb6f6f4          UDIV     r6,r6,r4              ;153
0000c0  2e00              CMP      r6,#0                 ;154
0000c2  d1ea              BNE      |L4.154|
                  |L4.196|
0000c4  bf00              NOP                            ;151
0000c6  f00b0001          AND      r0,r11,#1             ;158
0000ca  b178              CBZ      r0,|L4.236|
0000cc  b175              CBZ      r5,|L4.236|
0000ce  e008              B        |L4.226|
                  |L4.208|
0000d0  2120              MOVS     r1,#0x20              ;161
0000d2  4648              MOV      r0,r9                 ;161
0000d4  f7fffffe          BL       _StoreChar
0000d8  f8d9000c          LDR      r0,[r9,#0xc]          ;162
0000dc  2800              CMP      r0,#0                 ;162
0000de  da00              BGE      |L4.226|
0000e0  e7bf              B        |L4.98|
                  |L4.226|
0000e2  b11d              CBZ      r5,|L4.236|
0000e4  4628              MOV      r0,r5                 ;160
0000e6  1e6d              SUBS     r5,r5,#1              ;160
0000e8  4550              CMP      r0,r10                ;160
0000ea  d8f1              BHI      |L4.208|
                  |L4.236|
0000ec  bf00              NOP      
0000ee  e7b8              B        |L4.98|
;;;169    
                          ENDP

                  |L4.240|
                          DCD      _aV2C

                          AREA ||i._StoreChar||, CODE, READONLY, ALIGN=1

                  _StoreChar PROC
;;;72     */
;;;73     static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;74       int Cnt;
;;;75     
;;;76       Cnt = p->Cnt;
000006  68a5              LDR      r5,[r4,#8]
;;;77       if ((Cnt + 1) <= p->BufferSize) {
000008  1c68              ADDS     r0,r5,#1
00000a  6861              LDR      r1,[r4,#4]
00000c  4281              CMP      r1,r0
00000e  db06              BLT      |L5.30|
;;;78         *(p->pBuffer + Cnt) = c;
000010  6820              LDR      r0,[r4,#0]
000012  5546              STRB     r6,[r0,r5]
;;;79         p->Cnt = Cnt + 1;
000014  1c68              ADDS     r0,r5,#1
000016  60a0              STR      r0,[r4,#8]
;;;80         p->ReturnValue++;
000018  68e0              LDR      r0,[r4,#0xc]
00001a  1c40              ADDS     r0,r0,#1
00001c  60e0              STR      r0,[r4,#0xc]
                  |L5.30|
;;;81       }
;;;82       //
;;;83       // Write part of string, when the buffer is full
;;;84       //
;;;85       if (p->Cnt == p->BufferSize) {
00001e  e9d41001          LDRD     r1,r0,[r4,#4]
000022  4288              CMP      r0,r1
000024  d10d              BNE      |L5.66|
;;;86         if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
000026  68a2              LDR      r2,[r4,#8]
000028  6821              LDR      r1,[r4,#0]
00002a  6920              LDR      r0,[r4,#0x10]
00002c  f7fffffe          BL       SEGGER_RTT_Write
000030  68a1              LDR      r1,[r4,#8]
000032  4288              CMP      r0,r1
000034  d003              BEQ      |L5.62|
;;;87           p->ReturnValue = -1;
000036  f04f30ff          MOV      r0,#0xffffffff
00003a  60e0              STR      r0,[r4,#0xc]
00003c  e001              B        |L5.66|
                  |L5.62|
;;;88         } else {
;;;89           p->Cnt = 0;
00003e  2000              MOVS     r0,#0
000040  60a0              STR      r0,[r4,#8]
                  |L5.66|
;;;90         }
;;;91       }
;;;92     }
000042  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  _aV2C
000000  30313233          DCB      0x30,0x31,0x32,0x33
000004  34353637          DCB      0x34,0x35,0x36,0x37
000008  38394142          DCB      0x38,0x39,0x41,0x42
00000c  43444546          DCB      0x43,0x44,0x45,0x46
