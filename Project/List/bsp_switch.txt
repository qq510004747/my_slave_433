; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_switch.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_switch.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\bsp_switch.crf ..\BSP\BSP_Switch\BSP_Switch.c]
                          THUMB

                          AREA ||i.BSP_Switch_Init||, CODE, READONLY, ALIGN=1

                  BSP_Switch_Init PROC
;;;211    }
;;;212    void BSP_Switch_Init(void)
000000  b510              PUSH     {r4,lr}
;;;213    {
;;;214    	Switch_Init();		 
000002  f7fffffe          BL       Switch_Init
;;;215    }
000006  bd10              POP      {r4,pc}
;;;216    /**********************************************
                          ENDP


                          AREA ||i.Get_Switch_Message||, CODE, READONLY, ALIGN=2

                  Get_Switch_Message PROC
;;;104    }
;;;105    void Get_Switch_Message(u8 switch_flag)
000000  2100              MOVS     r1,#0
;;;106    {
;;;107    	u8 LoRa_Frequency_Flag = 0;
;;;108    	switch((switch_flag & (1<<0))) 
000002  f0000201          AND      r2,r0,#1
000006  b112              CBZ      r2,|L2.14|
000008  2a01              CMP      r2,#1
00000a  d100              BNE      |L2.14|
;;;109    	{
;;;110    		case 1:
;;;111    		{
;;;112    			#define MASTER_MODE
;;;113    		}
;;;114    		case 0:
00000c  bf00              NOP      
                  |L2.14|
;;;115    		{
;;;116    			#define  SLAVE_MODE
;;;117    		}
;;;118    	}
;;;119    	if(Switch4 == 0)
00000e  4a10              LDR      r2,|L2.80|
000010  6812              LDR      r2,[r2,#0]
000012  b91a              CBNZ     r2,|L2.28|
;;;120    	{
;;;121    		current_node.location2  = East;
000014  2200              MOVS     r2,#0
000016  4b0f              LDR      r3,|L2.84|
000018  71da              STRB     r2,[r3,#7]
00001a  e018              B        |L2.78|
                  |L2.28|
;;;122    	}
;;;123    	else if(Switch5 == 0)
00001c  4a0e              LDR      r2,|L2.88|
00001e  6812              LDR      r2,[r2,#0]
000020  b91a              CBNZ     r2,|L2.42|
;;;124    	{
;;;125    		current_node.location2  = South;
000022  2201              MOVS     r2,#1
000024  4b0b              LDR      r3,|L2.84|
000026  71da              STRB     r2,[r3,#7]
000028  e011              B        |L2.78|
                  |L2.42|
;;;126    	}
;;;127    	else if(Switch6 == 0)
00002a  4a0b              LDR      r2,|L2.88|
00002c  1f12              SUBS     r2,r2,#4
00002e  6812              LDR      r2,[r2,#0]
000030  b91a              CBNZ     r2,|L2.58|
;;;128    	{
;;;129    		current_node.location2  = West;
000032  2202              MOVS     r2,#2
000034  4b07              LDR      r3,|L2.84|
000036  71da              STRB     r2,[r3,#7]
000038  e009              B        |L2.78|
                  |L2.58|
;;;130    	}
;;;131    	else if(Switch7 == 0)
00003a  4a08              LDR      r2,|L2.92|
00003c  6812              LDR      r2,[r2,#0]
00003e  b91a              CBNZ     r2,|L2.72|
;;;132    	{
;;;133    		current_node.location2  = North;
000040  2203              MOVS     r2,#3
000042  4b04              LDR      r3,|L2.84|
000044  71da              STRB     r2,[r3,#7]
000046  e002              B        |L2.78|
                  |L2.72|
;;;134    	}
;;;135    	else
;;;136    	{
;;;137    		current_node.location2  = East;
000048  2200              MOVS     r2,#0
00004a  4b02              LDR      r3,|L2.84|
00004c  71da              STRB     r2,[r3,#7]
                  |L2.78|
;;;138    	}
;;;139    //	LoRa_Frequency_Flag = ((switch_flag>>4)&(~(1<<4)));
;;;140    //	switch(LoRa_Frequency_Flag) 
;;;141    //	{
;;;142    //		case 0:
;;;143    //		{
;;;144    //			LoRa_Frequency_Change =  426000000;
;;;145    //			break;
;;;146    //		}
;;;147    //		case 1:
;;;148    //		{
;;;149    //			LoRa_Frequency_Change =  428000000;
;;;150    //			break;
;;;151    //		}
;;;152    //		case 2:
;;;153    //		{
;;;154    //			LoRa_Frequency_Change =  430000000;
;;;155    //			break;
;;;156    //		}
;;;157    //		case 3:
;;;158    //		{
;;;159    //			LoRa_Frequency_Change =  432000000;
;;;160    //			break;
;;;161    //		}
;;;162    //		case 4:
;;;163    //		{
;;;164    //			LoRa_Frequency_Change =  434000000;
;;;165    //			break;
;;;166    //		}
;;;167    //		case 5:
;;;168    //		{
;;;169    //			LoRa_Frequency_Change =  436000000;
;;;170    //			break;
;;;171    //		}
;;;172    //		case 6:
;;;173    //		{
;;;174    //			LoRa_Frequency_Change =  438000000;
;;;175    //			break;
;;;176    //		}
;;;177    //		case 7:
;;;178    //		{
;;;179    //			LoRa_Frequency_Change =  440000000;
;;;180    //			break;
;;;181    //		}
;;;182    //		default:
;;;183    //			break;
;;;184    //	}
;;;185    //	Location_Flag = ((switch_flag>>2)&((~(1<<0))&(~(1<<1))));
;;;186    //	switch(Location_Flag)
;;;187    //	{
;;;188    //		case 0:
;;;189    //		{
;;;190    //			current_node.location2  = East;
;;;191    //			break;
;;;192    //		}
;;;193    //		case 1:
;;;194    //		{
;;;195    //			current_node.location2  = South;
;;;196    //			break;
;;;197    //		}
;;;198    //		case 2:
;;;199    //		{
;;;200    //			current_node.location2  = West;
;;;201    //			break;
;;;202    //		}
;;;203    //		case 3:
;;;204    //		{
;;;205    //			current_node.location2  = North;
;;;206    //			break;
;;;207    //		}
;;;208    //		default:
;;;209    //			break;
;;;210    //	}
;;;211    }
00004e  4770              BX       lr
;;;212    void BSP_Switch_Init(void)
                          ENDP

                  |L2.80|
                          DCD      0x42218100
                  |L2.84|
                          DCD      current_node
                  |L2.88|
                          DCD      0x42220114
                  |L2.92|
                          DCD      0x42210100

                          AREA ||i.Get_Switch_Status||, CODE, READONLY, ALIGN=2

                  Get_Switch_Status PROC
;;;90     
;;;91     u8 Get_Switch_Status(void)
000000  2000              MOVS     r0,#0
;;;92     {
;;;93     	
;;;94     	Switch_Status = 0;
000002  4920              LDR      r1,|L3.132|
000004  7008              STRB     r0,[r1,#0]
;;;95     	Switch_Status |= (Switch0<<0);
000006  4820              LDR      r0,|L3.136|
000008  6800              LDR      r0,[r0,#0]
00000a  7809              LDRB     r1,[r1,#0]  ; Switch_Status
00000c  4308              ORRS     r0,r0,r1
00000e  491d              LDR      r1,|L3.132|
000010  7008              STRB     r0,[r1,#0]
;;;96     	Switch_Status |= (Switch1<<1);
000012  481d              LDR      r0,|L3.136|
000014  1f00              SUBS     r0,r0,#4
000016  6800              LDR      r0,[r0,#0]
000018  7809              LDRB     r1,[r1,#0]  ; Switch_Status
00001a  ea410040          ORR      r0,r1,r0,LSL #1
00001e  4919              LDR      r1,|L3.132|
000020  7008              STRB     r0,[r1,#0]
;;;97     	Switch_Status |= (Switch2<<2);
000022  4819              LDR      r0,|L3.136|
000024  3808              SUBS     r0,r0,#8
000026  6800              LDR      r0,[r0,#0]
000028  7809              LDRB     r1,[r1,#0]  ; Switch_Status
00002a  ea410080          ORR      r0,r1,r0,LSL #2
00002e  4915              LDR      r1,|L3.132|
000030  7008              STRB     r0,[r1,#0]
;;;98     	Switch_Status |= (Switch3<<3);
000032  4815              LDR      r0,|L3.136|
000034  382c              SUBS     r0,r0,#0x2c
000036  6800              LDR      r0,[r0,#0]
000038  7809              LDRB     r1,[r1,#0]  ; Switch_Status
00003a  ea4100c0          ORR      r0,r1,r0,LSL #3
00003e  4911              LDR      r1,|L3.132|
000040  7008              STRB     r0,[r1,#0]
;;;99     	Switch_Status |= (Switch4<<4);
000042  4811              LDR      r0,|L3.136|
000044  3830              SUBS     r0,r0,#0x30
000046  6800              LDR      r0,[r0,#0]
000048  7809              LDRB     r1,[r1,#0]  ; Switch_Status
00004a  ea411000          ORR      r0,r1,r0,LSL #4
00004e  490d              LDR      r1,|L3.132|
000050  7008              STRB     r0,[r1,#0]
;;;100    	Switch_Status |= (Switch5<<5);
000052  480e              LDR      r0,|L3.140|
000054  6800              LDR      r0,[r0,#0]
000056  7809              LDRB     r1,[r1,#0]  ; Switch_Status
000058  ea411040          ORR      r0,r1,r0,LSL #5
00005c  4909              LDR      r1,|L3.132|
00005e  7008              STRB     r0,[r1,#0]
;;;101    	Switch_Status |= (Switch6<<6);
000060  480a              LDR      r0,|L3.140|
000062  1f00              SUBS     r0,r0,#4
000064  6800              LDR      r0,[r0,#0]
000066  7809              LDRB     r1,[r1,#0]  ; Switch_Status
000068  ea411080          ORR      r0,r1,r0,LSL #6
00006c  4905              LDR      r1,|L3.132|
00006e  7008              STRB     r0,[r1,#0]
;;;102    	Switch_Status |= (Switch7<<7);
000070  4807              LDR      r0,|L3.144|
000072  6800              LDR      r0,[r0,#0]
000074  7809              LDRB     r1,[r1,#0]  ; Switch_Status
000076  ea4110c0          ORR      r0,r1,r0,LSL #7
00007a  4902              LDR      r1,|L3.132|
00007c  7008              STRB     r0,[r1,#0]
;;;103    	return  Switch_Status;
00007e  4608              MOV      r0,r1
000080  7800              LDRB     r0,[r0,#0]  ; Switch_Status
;;;104    }
000082  4770              BX       lr
;;;105    void Get_Switch_Message(u8 switch_flag)
                          ENDP

                  |L3.132|
                          DCD      Switch_Status
                  |L3.136|
                          DCD      0x42218130
                  |L3.140|
                          DCD      0x42220114
                  |L3.144|
                          DCD      0x42210100

                          AREA ||i.Switch_Init||, CODE, READONLY, ALIGN=2

                  Switch_Init PROC
;;;221    **********************************************/ 
;;;222    static void Switch_Init(void)
000000  b508              PUSH     {r3,lr}
;;;223    {
;;;224    	GPIO_InitTypeDef GPIO_InitStructure;
;;;225    
;;;226    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC,ENABLE);
000002  2101              MOVS     r1,#1
000004  201c              MOVS     r0,#0x1c
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;227    
;;;228    	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable,ENABLE); //JATG
00000a  2101              MOVS     r1,#1
00000c  484b              LDR      r0,|L4.316|
00000e  f7fffffe          BL       GPIO_PinRemapConfig
;;;229    
;;;230    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
000012  2048              MOVS     r0,#0x48
000014  f88d0003          STRB     r0,[sp,#3]
;;;231    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000018  2001              MOVS     r0,#1
00001a  f88d0002          STRB     r0,[sp,#2]
;;;232    	
;;;233    	GPIO_InitStructure.GPIO_Pin =  ADDR_7_Pin ;
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;234    	GPIO_Init(ADDR_7_GPIO, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4846              LDR      r0,|L4.320|
000026  f7fffffe          BL       GPIO_Init
;;;235    	
;;;236    	GPIO_InitStructure.GPIO_Pin =  ADDR_6_Pin ;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad0000          STRH     r0,[sp,#0]
;;;237    	GPIO_Init(ADDR_6_GPIO, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  4844              LDR      r0,|L4.324|
000034  f7fffffe          BL       GPIO_Init
;;;238    	
;;;239    	GPIO_InitStructure.GPIO_Pin =  ADDR_5_Pin ;
000038  2020              MOVS     r0,#0x20
00003a  f8ad0000          STRH     r0,[sp,#0]
;;;240    	GPIO_Init(ADDR_5_GPIO, &GPIO_InitStructure);
00003e  4669              MOV      r1,sp
000040  4840              LDR      r0,|L4.324|
000042  f7fffffe          BL       GPIO_Init
;;;241    	
;;;242    	GPIO_InitStructure.GPIO_Pin =  ADDR_4_Pin ;
000046  2001              MOVS     r0,#1
000048  f8ad0000          STRH     r0,[sp,#0]
;;;243    	GPIO_Init(ADDR_4_GPIO, &GPIO_InitStructure);
00004c  4669              MOV      r1,sp
00004e  483e              LDR      r0,|L4.328|
000050  f7fffffe          BL       GPIO_Init
;;;244    	
;;;245    	GPIO_InitStructure.GPIO_Pin =  ADDR_3_Pin ;
000054  2002              MOVS     r0,#2
000056  f8ad0000          STRH     r0,[sp,#0]
;;;246    	GPIO_Init(ADDR_3_GPIO, &GPIO_InitStructure);
00005a  4669              MOV      r1,sp
00005c  483a              LDR      r0,|L4.328|
00005e  f7fffffe          BL       GPIO_Init
;;;247    	
;;;248    	GPIO_InitStructure.GPIO_Pin =  ADDR_2_Pin ;
000062  f44f6080          MOV      r0,#0x400
000066  f8ad0000          STRH     r0,[sp,#0]
;;;249    	GPIO_Init(ADDR_2_GPIO, &GPIO_InitStructure);
00006a  4669              MOV      r1,sp
00006c  4836              LDR      r0,|L4.328|
00006e  f7fffffe          BL       GPIO_Init
;;;250    	
;;;251    	GPIO_InitStructure.GPIO_Pin =  ADDR_1_Pin ;
000072  f44f6000          MOV      r0,#0x800
000076  f8ad0000          STRH     r0,[sp,#0]
;;;252    	GPIO_Init(ADDR_1_GPIO, &GPIO_InitStructure);
00007a  4669              MOV      r1,sp
00007c  4832              LDR      r0,|L4.328|
00007e  f7fffffe          BL       GPIO_Init
;;;253    	
;;;254    	GPIO_InitStructure.GPIO_Pin =  ADDR_0_Pin ;
000082  f44f5080          MOV      r0,#0x1000
000086  f8ad0000          STRH     r0,[sp,#0]
;;;255    	GPIO_Init(ADDR_0_GPIO, &GPIO_InitStructure);
00008a  4669              MOV      r1,sp
00008c  482e              LDR      r0,|L4.328|
00008e  f7fffffe          BL       GPIO_Init
;;;256    //******************************************************************
;;;257    	GPIO_InitStructure.GPIO_Pin =  ADDR_1_1_Pin ;
000092  2040              MOVS     r0,#0x40
000094  f8ad0000          STRH     r0,[sp,#0]
;;;258    	GPIO_Init(ADDR_1_1_GPIO, &GPIO_InitStructure);
000098  4669              MOV      r1,sp
00009a  482b              LDR      r0,|L4.328|
00009c  f7fffffe          BL       GPIO_Init
;;;259    	
;;;260    	GPIO_InitStructure.GPIO_Pin =  ADDR_1_2_Pin ;
0000a0  2080              MOVS     r0,#0x80
0000a2  f8ad0000          STRH     r0,[sp,#0]
;;;261    	GPIO_Init(ADDR_1_2_GPIO, &GPIO_InitStructure);
0000a6  4669              MOV      r1,sp
0000a8  4827              LDR      r0,|L4.328|
0000aa  f7fffffe          BL       GPIO_Init
;;;262    	
;;;263    	GPIO_InitStructure.GPIO_Pin =  ADDR_1_3_Pin ;
0000ae  f44f7080          MOV      r0,#0x100
0000b2  f8ad0000          STRH     r0,[sp,#0]
;;;264    	GPIO_Init(ADDR_1_3_GPIO, &GPIO_InitStructure);
0000b6  4669              MOV      r1,sp
0000b8  4823              LDR      r0,|L4.328|
0000ba  f7fffffe          BL       GPIO_Init
;;;265    	
;;;266    	GPIO_InitStructure.GPIO_Pin =  ADDR_1_4_Pin ;
0000be  f44f7000          MOV      r0,#0x200
0000c2  f8ad0000          STRH     r0,[sp,#0]
;;;267    	GPIO_Init(ADDR_1_4_GPIO, &GPIO_InitStructure);
0000c6  4669              MOV      r1,sp
0000c8  481f              LDR      r0,|L4.328|
0000ca  f7fffffe          BL       GPIO_Init
;;;268    //******************************************************************
;;;269    	GPIO_SetBits(ADDR_1_1_GPIO, ADDR_1_1_Pin);
0000ce  2140              MOVS     r1,#0x40
0000d0  481d              LDR      r0,|L4.328|
0000d2  f7fffffe          BL       GPIO_SetBits
;;;270    	GPIO_SetBits(ADDR_1_2_GPIO, ADDR_1_2_Pin);
0000d6  2180              MOVS     r1,#0x80
0000d8  481b              LDR      r0,|L4.328|
0000da  f7fffffe          BL       GPIO_SetBits
;;;271    	GPIO_SetBits(ADDR_1_3_GPIO, ADDR_1_3_Pin);
0000de  f44f7180          MOV      r1,#0x100
0000e2  4819              LDR      r0,|L4.328|
0000e4  f7fffffe          BL       GPIO_SetBits
;;;272    	GPIO_SetBits(ADDR_1_4_GPIO, ADDR_1_4_Pin);
0000e8  f44f7100          MOV      r1,#0x200
0000ec  4816              LDR      r0,|L4.328|
0000ee  f7fffffe          BL       GPIO_SetBits
;;;273    	
;;;274    	GPIO_SetBits(ADDR_0_GPIO, ADDR_0_Pin);
0000f2  f44f5180          MOV      r1,#0x1000
0000f6  4814              LDR      r0,|L4.328|
0000f8  f7fffffe          BL       GPIO_SetBits
;;;275    	GPIO_SetBits(ADDR_1_GPIO, ADDR_1_Pin);
0000fc  f44f6100          MOV      r1,#0x800
000100  4811              LDR      r0,|L4.328|
000102  f7fffffe          BL       GPIO_SetBits
;;;276    	GPIO_SetBits(ADDR_2_GPIO, ADDR_2_Pin);
000106  f44f6180          MOV      r1,#0x400
00010a  480f              LDR      r0,|L4.328|
00010c  f7fffffe          BL       GPIO_SetBits
;;;277    	GPIO_SetBits(ADDR_3_GPIO, ADDR_3_Pin);
000110  2102              MOVS     r1,#2
000112  480d              LDR      r0,|L4.328|
000114  f7fffffe          BL       GPIO_SetBits
;;;278    	GPIO_SetBits(ADDR_4_GPIO, ADDR_4_Pin);
000118  2101              MOVS     r1,#1
00011a  480b              LDR      r0,|L4.328|
00011c  f7fffffe          BL       GPIO_SetBits
;;;279    	GPIO_SetBits(ADDR_5_GPIO, ADDR_5_Pin);
000120  2120              MOVS     r1,#0x20
000122  4808              LDR      r0,|L4.324|
000124  f7fffffe          BL       GPIO_SetBits
;;;280    	GPIO_SetBits(ADDR_6_GPIO, ADDR_6_Pin);
000128  2110              MOVS     r1,#0x10
00012a  4806              LDR      r0,|L4.324|
00012c  f7fffffe          BL       GPIO_SetBits
;;;281    	GPIO_SetBits(ADDR_7_GPIO, ADDR_7_Pin);
000130  2101              MOVS     r1,#1
000132  4803              LDR      r0,|L4.320|
000134  f7fffffe          BL       GPIO_SetBits
;;;282    }
000138  bd08              POP      {r3,pc}
;;;283    
                          ENDP

00013a  0000              DCW      0x0000
                  |L4.316|
                          DCD      0x00300200
                  |L4.320|
                          DCD      0x40010800
                  |L4.324|
                          DCD      0x40011000
                  |L4.328|
                          DCD      0x40010c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  crc16Tab
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=1

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  01                DCB      0x01
                  Switch_Status
000003  00                DCB      0x00
                  Location_Flag
000004  00                DCB      0x00
