; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\sx1276-loramisc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\sx1276-loramisc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\sx1276-loramisc.crf ..\BSP\SX1278\radio\sx1276-LoRaMisc.c]
                          THUMB

                          AREA ||i.SX1276LoRaGetErrorCoding||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetErrorCoding PROC
;;;197    
;;;198    uint8_t SX1276LoRaGetErrorCoding( void )
000000  b510              PUSH     {r4,lr}
;;;199    {
;;;200        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000002  4808              LDR      r0,|L1.36|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  311d              ADDS     r1,r1,#0x1d
000008  201d              MOVS     r0,#0x1d
00000a  f7fffffe          BL       SX1276Read
;;;201        LoRaSettings.ErrorCoding = ( SX1276LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_CODINGRATE_MASK ) >> 1;
00000e  4805              LDR      r0,|L1.36|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7f40              LDRB     r0,[r0,#0x1d]
000014  f02000f1          BIC      r0,r0,#0xf1
000018  1040              ASRS     r0,r0,#1
00001a  4903              LDR      r1,|L1.40|
00001c  71c8              STRB     r0,[r1,#7]
;;;202        return LoRaSettings.ErrorCoding;
00001e  4608              MOV      r0,r1
000020  79c0              LDRB     r0,[r0,#7]  ; LoRaSettings
;;;203    }
000022  bd10              POP      {r4,pc}
;;;204    
                          ENDP

                  |L1.36|
                          DCD      SX1276LR
                  |L1.40|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetFreqHopOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetFreqHopOn PROC
;;;264    
;;;265    bool SX1276LoRaGetFreqHopOn( void )
000000  4801              LDR      r0,|L2.8|
;;;266    {
;;;267        return LoRaSettings.FreqHopOn;
000002  7ac0              LDRB     r0,[r0,#0xb]  ; LoRaSettings
;;;268    }
000004  4770              BX       lr
;;;269    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetHopPeriod||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetHopPeriod PROC
;;;276    
;;;277    uint8_t SX1276LoRaGetHopPeriod( void )
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279        SX1276Read( REG_LR_HOPPERIOD, &SX1276LR->RegHopPeriod );
000002  4807              LDR      r0,|L3.32|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3124              ADDS     r1,r1,#0x24
000008  2024              MOVS     r0,#0x24
00000a  f7fffffe          BL       SX1276Read
;;;280        LoRaSettings.HopPeriod = SX1276LR->RegHopPeriod;
00000e  4804              LDR      r0,|L3.32|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  f8900024          LDRB     r0,[r0,#0x24]
000016  4903              LDR      r1,|L3.36|
000018  7308              STRB     r0,[r1,#0xc]
;;;281        return LoRaSettings.HopPeriod;
00001a  4608              MOV      r0,r1
00001c  7b00              LDRB     r0,[r0,#0xc]  ; LoRaSettings
;;;282    }
00001e  bd10              POP      {r4,pc}
;;;283    
                          ENDP

                  |L3.32|
                          DCD      SX1276LR
                  |L3.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetImplicitHeaderOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetImplicitHeaderOn PROC
;;;242    
;;;243    bool SX1276LoRaGetImplicitHeaderOn( void )
000000  b510              PUSH     {r4,lr}
;;;244    {
;;;245        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000002  4808              LDR      r0,|L4.36|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  311d              ADDS     r1,r1,#0x1d
000008  201d              MOVS     r0,#0x1d
00000a  f7fffffe          BL       SX1276Read
;;;246        LoRaSettings.ImplicitHeaderOn = ( SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_ON );
00000e  4805              LDR      r0,|L4.36|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7f40              LDRB     r0,[r0,#0x1d]
000014  f0000001          AND      r0,r0,#1
000018  4903              LDR      r1,|L4.40|
00001a  7248              STRB     r0,[r1,#9]
;;;247        return LoRaSettings.ImplicitHeaderOn;
00001c  4608              MOV      r0,r1
00001e  7a40              LDRB     r0,[r0,#9]  ; LoRaSettings
;;;248    }
000020  bd10              POP      {r4,pc}
;;;249    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      SX1276LR
                  |L4.40|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetLowDatarateOptimize||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetLowDatarateOptimize PROC
;;;391    
;;;392    bool SX1276LoRaGetLowDatarateOptimize( void )
000000  b510              PUSH     {r4,lr}
;;;393    {
;;;394        SX1276Read( REG_LR_MODEMCONFIG3, &SX1276LR->RegModemConfig3 );
000002  4806              LDR      r0,|L5.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3126              ADDS     r1,r1,#0x26
000008  2026              MOVS     r0,#0x26
00000a  f7fffffe          BL       SX1276Read
;;;395        return ( ( SX1276LR->RegModemConfig3 & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_ON ) >> 3 );
00000e  4803              LDR      r0,|L5.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  f8900026          LDRB     r0,[r0,#0x26]
000016  f3c000c0          UBFX     r0,r0,#3,#1
;;;396    }
00001a  bd10              POP      {r4,pc}
;;;397    
                          ENDP

                  |L5.28|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetNbTrigPeaks||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetNbTrigPeaks PROC
;;;404    
;;;405    uint8_t SX1276LoRaGetNbTrigPeaks( void )
000000  b510              PUSH     {r4,lr}
;;;406    {
;;;407        SX1276Read( 0x31, &SX1276LR->RegTestReserved31 );
000002  4806              LDR      r0,|L6.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3130              ADDS     r1,r1,#0x30
000008  2031              MOVS     r0,#0x31
00000a  f7fffffe          BL       SX1276Read
;;;408        return ( SX1276LR->RegTestReserved31 & 0x07 );
00000e  4803              LDR      r0,|L6.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  f8900030          LDRB     r0,[r0,#0x30]
000016  f0000007          AND      r0,r0,#7
;;;409    }
00001a  bd10              POP      {r4,pc}
;;;410    
                          ENDP

                  |L6.28|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetPAOutput||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPAOutput PROC
;;;350    
;;;351    uint8_t SX1276LoRaGetPAOutput( void )
000000  b510              PUSH     {r4,lr}
;;;352    {
;;;353        SX1276Read( REG_LR_PACONFIG, &SX1276LR->RegPaConfig );
000002  4806              LDR      r0,|L7.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3109              ADDS     r1,r1,#9
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       SX1276Read
;;;354        return SX1276LR->RegPaConfig & ~RFLR_PACONFIG_PASELECT_MASK;
00000e  4803              LDR      r0,|L7.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7a40              LDRB     r0,[r0,#9]
000014  f020007f          BIC      r0,r0,#0x7f
;;;355    }
000018  bd10              POP      {r4,pc}
;;;356    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetPa20dBm||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPa20dBm PROC
;;;336    
;;;337    bool SX1276LoRaGetPa20dBm( void )
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339        SX1276Read( REG_LR_PADAC, &SX1276LR->RegPaDac );
000002  4809              LDR      r0,|L8.40|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  314c              ADDS     r1,r1,#0x4c
000008  204d              MOVS     r0,#0x4d
00000a  f7fffffe          BL       SX1276Read
;;;340        
;;;341        return ( ( SX1276LR->RegPaDac & 0x07 ) == 0x07 ) ? true : false;
00000e  4806              LDR      r0,|L8.40|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  f890004c          LDRB     r0,[r0,#0x4c]
000016  f0000007          AND      r0,r0,#7
00001a  2807              CMP      r0,#7
00001c  d101              BNE      |L8.34|
00001e  2001              MOVS     r0,#1
                  |L8.32|
;;;342    }
000020  bd10              POP      {r4,pc}
                  |L8.34|
000022  2000              MOVS     r0,#0                 ;341
000024  e7fc              B        |L8.32|
;;;343    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetPaRamp||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPaRamp PROC
;;;363    
;;;364    uint8_t SX1276LoRaGetPaRamp( void )
000000  b510              PUSH     {r4,lr}
;;;365    {
;;;366        SX1276Read( REG_LR_PARAMP, &SX1276LR->RegPaRamp );
000002  4806              LDR      r0,|L9.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  310a              ADDS     r1,r1,#0xa
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       SX1276Read
;;;367        return SX1276LR->RegPaRamp & ~RFLR_PARAMP_MASK;
00000e  4803              LDR      r0,|L9.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7a80              LDRB     r0,[r0,#0xa]
000014  f02000f0          BIC      r0,r0,#0xf0
;;;368    }
000018  bd10              POP      {r4,pc}
;;;369    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetPacketCrcOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPacketCrcOn PROC
;;;227    
;;;228    bool SX1276LoRaGetPacketCrcOn( void )
000000  b510              PUSH     {r4,lr}
;;;229    {
;;;230        SX1276Read( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2 );
000002  480a              LDR      r0,|L10.44|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  311e              ADDS     r1,r1,#0x1e
000008  201e              MOVS     r0,#0x1e
00000a  f7fffffe          BL       SX1276Read
;;;231        LoRaSettings.CrcOn = ( SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_RXPAYLOADCRC_ON ) >> 1;
00000e  4807              LDR      r0,|L10.44|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7f80              LDRB     r0,[r0,#0x1e]
000014  f0000004          AND      r0,r0,#4
000018  1040              ASRS     r0,r0,#1
00001a  b108              CBZ      r0,|L10.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L10.34|
                  |L10.32|
000020  2000              MOVS     r0,#0
                  |L10.34|
000022  4903              LDR      r1,|L10.48|
000024  7208              STRB     r0,[r1,#8]
;;;232        return LoRaSettings.CrcOn;
000026  4608              MOV      r0,r1
000028  7a00              LDRB     r0,[r0,#8]  ; LoRaSettings
;;;233    }
00002a  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  |L10.44|
                          DCD      SX1276LR
                  |L10.48|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetPayloadLength||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPayloadLength PROC
;;;310    
;;;311    uint8_t SX1276LoRaGetPayloadLength( void )
000000  b510              PUSH     {r4,lr}
;;;312    {
;;;313        SX1276Read( REG_LR_PAYLOADLENGTH, &SX1276LR->RegPayloadLength );
000002  4807              LDR      r0,|L11.32|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3122              ADDS     r1,r1,#0x22
000008  2022              MOVS     r0,#0x22
00000a  f7fffffe          BL       SX1276Read
;;;314        LoRaSettings.PayloadLength = SX1276LR->RegPayloadLength;
00000e  4804              LDR      r0,|L11.32|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  f8900022          LDRB     r0,[r0,#0x22]
000016  4903              LDR      r1,|L11.36|
000018  7608              STRB     r0,[r1,#0x18]
;;;315        return LoRaSettings.PayloadLength;
00001a  4608              MOV      r0,r1
00001c  7e00              LDRB     r0,[r0,#0x18]  ; LoRaSettings
;;;316    }
00001e  bd10              POP      {r4,pc}
;;;317    
                          ENDP

                  |L11.32|
                          DCD      SX1276LR
                  |L11.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetPreambleLength||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetPreambleLength PROC
;;;221    
;;;222    uint16_t SX1276LoRaGetPreambleLength( void )
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224        SX1276ReadBuffer( REG_LR_PREAMBLEMSB, &SX1276LR->RegPreambleMsb, 2 );
000002  2202              MOVS     r2,#2
000004  4808              LDR      r0,|L12.40|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  3120              ADDS     r1,r1,#0x20
00000a  2020              MOVS     r0,#0x20
00000c  f7fffffe          BL       SX1276ReadBuffer
;;;225        return ( ( SX1276LR->RegPreambleMsb & 0x00FF ) << 8 ) | SX1276LR->RegPreambleLsb;
000010  4805              LDR      r0,|L12.40|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  f8901021          LDRB     r1,[r0,#0x21]
000018  4803              LDR      r0,|L12.40|
00001a  6800              LDR      r0,[r0,#0]  ; SX1276LR
00001c  f8900020          LDRB     r0,[r0,#0x20]
000020  ea412000          ORR      r0,r1,r0,LSL #8
;;;226    }
000024  bd10              POP      {r4,pc}
;;;227    
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetRFFrequency||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetRFFrequency PROC
;;;57     
;;;58     uint32_t SX1276LoRaGetRFFrequency( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;59     {
;;;60         SX1276ReadBuffer( REG_LR_FRFMSB, &SX1276LR->RegFrfMsb, 3 );
000004  2203              MOVS     r2,#3
000006  4813              LDR      r0,|L13.84|
000008  6801              LDR      r1,[r0,#0]  ; SX1276LR
00000a  1d89              ADDS     r1,r1,#6
00000c  2006              MOVS     r0,#6
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;61         LoRaSettings.RFFrequency = ( ( uint32_t )SX1276LR->RegFrfMsb << 16 ) | ( ( uint32_t )SX1276LR->RegFrfMid << 8 ) | ( ( uint32_t )SX1276LR->RegFrfLsb );
000012  4810              LDR      r0,|L13.84|
000014  6800              LDR      r0,[r0,#0]  ; SX1276LR
000016  7980              LDRB     r0,[r0,#6]
000018  0400              LSLS     r0,r0,#16
00001a  490e              LDR      r1,|L13.84|
00001c  6809              LDR      r1,[r1,#0]  ; SX1276LR
00001e  79c9              LDRB     r1,[r1,#7]
000020  ea402001          ORR      r0,r0,r1,LSL #8
000024  490b              LDR      r1,|L13.84|
000026  6809              LDR      r1,[r1,#0]  ; SX1276LR
000028  7a09              LDRB     r1,[r1,#8]
00002a  4308              ORRS     r0,r0,r1
00002c  490a              LDR      r1,|L13.88|
00002e  6008              STR      r0,[r1,#0]  ; LoRaSettings
;;;62         LoRaSettings.RFFrequency = ( uint32_t )( ( double )LoRaSettings.RFFrequency * ( double )FREQ_STEP );
000030  6808              LDR      r0,[r1,#0]  ; LoRaSettings
000032  f7fffffe          BL       __aeabi_ui2d
000036  4606              MOV      r6,r0
000038  2200              MOVS     r2,#0
00003a  4b08              LDR      r3,|L13.92|
00003c  f7fffffe          BL       __aeabi_dmul
000040  4604              MOV      r4,r0
000042  f7fffffe          BL       __aeabi_d2uiz
000046  4904              LDR      r1,|L13.88|
000048  6008              STR      r0,[r1,#0]  ; LoRaSettings
;;;63     
;;;64         return LoRaSettings.RFFrequency;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]  ; LoRaSettings
;;;65     }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;66     
                          ENDP

000052  0000              DCW      0x0000
                  |L13.84|
                          DCD      SX1276LR
                  |L13.88|
                          DCD      LoRaSettings
                  |L13.92|
                          DCD      0x404e8480

                          AREA ||i.SX1276LoRaGetRFPower||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetRFPower PROC
;;;117    
;;;118    int8_t SX1276LoRaGetRFPower( void )
000000  b510              PUSH     {r4,lr}
;;;119    {
;;;120        SX1276Read( REG_LR_PACONFIG, &SX1276LR->RegPaConfig );
000002  481c              LDR      r0,|L14.116|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  3109              ADDS     r1,r1,#9
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       SX1276Read
;;;121        SX1276Read( REG_LR_PADAC, &SX1276LR->RegPaDac );
00000e  4819              LDR      r0,|L14.116|
000010  6801              LDR      r1,[r0,#0]  ; SX1276LR
000012  314c              ADDS     r1,r1,#0x4c
000014  204d              MOVS     r0,#0x4d
000016  f7fffffe          BL       SX1276Read
;;;122    
;;;123        if( ( SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
00001a  4816              LDR      r0,|L14.116|
00001c  6800              LDR      r0,[r0,#0]  ; SX1276LR
00001e  7a40              LDRB     r0,[r0,#9]
000020  f0000080          AND      r0,r0,#0x80
000024  2880              CMP      r0,#0x80
000026  d119              BNE      |L14.92|
;;;124        {
;;;125            if( ( SX1276LR->RegPaDac & 0x07 ) == 0x07 )
000028  4812              LDR      r0,|L14.116|
00002a  6800              LDR      r0,[r0,#0]  ; SX1276LR
00002c  f890004c          LDRB     r0,[r0,#0x4c]
000030  f0000007          AND      r0,r0,#7
000034  2807              CMP      r0,#7
000036  d108              BNE      |L14.74|
;;;126            {
;;;127                LoRaSettings.Power = 5 + ( SX1276LR->RegPaConfig & ~RFLR_PACONFIG_OUTPUTPOWER_MASK );
000038  480e              LDR      r0,|L14.116|
00003a  6800              LDR      r0,[r0,#0]  ; SX1276LR
00003c  7a40              LDRB     r0,[r0,#9]
00003e  f02000f0          BIC      r0,r0,#0xf0
000042  1d40              ADDS     r0,r0,#5
000044  490c              LDR      r1,|L14.120|
000046  7108              STRB     r0,[r1,#4]
000048  e010              B        |L14.108|
                  |L14.74|
;;;128            }
;;;129            else
;;;130            {
;;;131                LoRaSettings.Power = 2 + ( SX1276LR->RegPaConfig & ~RFLR_PACONFIG_OUTPUTPOWER_MASK );
00004a  480a              LDR      r0,|L14.116|
00004c  6800              LDR      r0,[r0,#0]  ; SX1276LR
00004e  7a40              LDRB     r0,[r0,#9]
000050  f02000f0          BIC      r0,r0,#0xf0
000054  1c80              ADDS     r0,r0,#2
000056  4908              LDR      r1,|L14.120|
000058  7108              STRB     r0,[r1,#4]
00005a  e007              B        |L14.108|
                  |L14.92|
;;;132            }
;;;133        }
;;;134        else
;;;135        {
;;;136            LoRaSettings.Power = -1 + ( SX1276LR->RegPaConfig & ~RFLR_PACONFIG_OUTPUTPOWER_MASK );
00005c  4805              LDR      r0,|L14.116|
00005e  6800              LDR      r0,[r0,#0]  ; SX1276LR
000060  7a40              LDRB     r0,[r0,#9]
000062  f02000f0          BIC      r0,r0,#0xf0
000066  1e40              SUBS     r0,r0,#1
000068  4903              LDR      r1,|L14.120|
00006a  7108              STRB     r0,[r1,#4]
                  |L14.108|
;;;137        }
;;;138        return LoRaSettings.Power;
00006c  4802              LDR      r0,|L14.120|
00006e  f9900004          LDRSB    r0,[r0,#4]  ; LoRaSettings
;;;139    }
000072  bd10              POP      {r4,pc}
;;;140    
                          ENDP

                  |L14.116|
                          DCD      SX1276LR
                  |L14.120|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetRxPacketTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetRxPacketTimeout PROC
;;;298    
;;;299    uint32_t SX1276LoRaGetRxPacketTimeout( void )
000000  4801              LDR      r0,|L15.8|
;;;300    {
;;;301        return LoRaSettings.RxPacketTimeout;
000002  6940              LDR      r0,[r0,#0x14]  ; LoRaSettings
;;;302    }
000004  4770              BX       lr
;;;303    
                          ENDP

000006  0000              DCW      0x0000
                  |L15.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetRxSingleOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetRxSingleOn PROC
;;;254    
;;;255    bool SX1276LoRaGetRxSingleOn( void )
000000  4801              LDR      r0,|L16.8|
;;;256    {
;;;257        return LoRaSettings.RxSingleOn;
000002  7a80              LDRB     r0,[r0,#0xa]  ; LoRaSettings
;;;258    }
000004  4770              BX       lr
;;;259    
                          ENDP

000006  0000              DCW      0x0000
                  |L16.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetSignalBandwidth||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetSignalBandwidth PROC
;;;148    
;;;149    uint8_t SX1276LoRaGetSignalBandwidth( void )
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000002  4807              LDR      r0,|L17.32|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  311d              ADDS     r1,r1,#0x1d
000008  201d              MOVS     r0,#0x1d
00000a  f7fffffe          BL       SX1276Read
;;;152        LoRaSettings.SignalBw = ( SX1276LR->RegModemConfig1 & ~RFLR_MODEMCONFIG1_BW_MASK ) >> 4;
00000e  4804              LDR      r0,|L17.32|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7f40              LDRB     r0,[r0,#0x1d]
000014  1100              ASRS     r0,r0,#4
000016  4903              LDR      r1,|L17.36|
000018  7148              STRB     r0,[r1,#5]
;;;153        return LoRaSettings.SignalBw;
00001a  4608              MOV      r0,r1
00001c  7940              LDRB     r0,[r0,#5]  ; LoRaSettings
;;;154    }
00001e  bd10              POP      {r4,pc}
;;;155    
                          ENDP

                  |L17.32|
                          DCD      SX1276LR
                  |L17.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetSpreadingFactor||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetSpreadingFactor PROC
;;;182    
;;;183    uint8_t SX1276LoRaGetSpreadingFactor( void )
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185        SX1276Read( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2 );   
000002  4807              LDR      r0,|L18.32|
000004  6801              LDR      r1,[r0,#0]  ; SX1276LR
000006  311e              ADDS     r1,r1,#0x1e
000008  201e              MOVS     r0,#0x1e
00000a  f7fffffe          BL       SX1276Read
;;;186        LoRaSettings.SpreadingFactor = ( SX1276LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SF_MASK ) >> 4;
00000e  4804              LDR      r0,|L18.32|
000010  6800              LDR      r0,[r0,#0]  ; SX1276LR
000012  7f80              LDRB     r0,[r0,#0x1e]
000014  1100              ASRS     r0,r0,#4
000016  4903              LDR      r1,|L18.36|
000018  7188              STRB     r0,[r1,#6]
;;;187        return LoRaSettings.SpreadingFactor;
00001a  4608              MOV      r0,r1
00001c  7980              LDRB     r0,[r0,#6]  ; LoRaSettings
;;;188    }
00001e  bd10              POP      {r4,pc}
;;;189    
                          ENDP

                  |L18.32|
                          DCD      SX1276LR
                  |L18.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaGetSymbTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetSymbTimeout PROC
;;;378    
;;;379    uint16_t SX1276LoRaGetSymbTimeout( void )
000000  b510              PUSH     {r4,lr}
;;;380    {
;;;381        SX1276ReadBuffer( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2, 2 );
000002  2202              MOVS     r2,#2
000004  4808              LDR      r0,|L19.40|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  311e              ADDS     r1,r1,#0x1e
00000a  201e              MOVS     r0,#0x1e
00000c  f7fffffe          BL       SX1276ReadBuffer
;;;382        return ( ( SX1276LR->RegModemConfig2 & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) << 8 ) | SX1276LR->RegSymbTimeoutLsb;
000010  4805              LDR      r0,|L19.40|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7fc0              LDRB     r0,[r0,#0x1f]
000016  4904              LDR      r1,|L19.40|
000018  6809              LDR      r1,[r1,#0]  ; SX1276LR
00001a  7f89              LDRB     r1,[r1,#0x1e]
00001c  f02101fc          BIC      r1,r1,#0xfc
000020  ea402001          ORR      r0,r0,r1,LSL #8
;;;383    }
000024  bd10              POP      {r4,pc}
;;;384    
                          ENDP

000026  0000              DCW      0x0000
                  |L19.40|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaGetTxPacketTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaGetTxPacketTimeout PROC
;;;288    
;;;289    uint32_t SX1276LoRaGetTxPacketTimeout( void )
000000  4801              LDR      r0,|L20.8|
;;;290    {
;;;291        return LoRaSettings.TxPacketTimeout;
000002  6900              LDR      r0,[r0,#0x10]  ; LoRaSettings
;;;292    }
000004  4770              BX       lr
;;;293    
                          ENDP

000006  0000              DCW      0x0000
                  |L20.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetErrorCoding||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetErrorCoding PROC
;;;189    
;;;190    void SX1276LoRaSetErrorCoding( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;191    {
000002  4604              MOV      r4,r0
;;;192        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000004  480c              LDR      r0,|L21.56|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  311d              ADDS     r1,r1,#0x1d
00000a  201d              MOVS     r0,#0x1d
00000c  f7fffffe          BL       SX1276Read
;;;193        SX1276LR->RegModemConfig1 = ( SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_CODINGRATE_MASK ) | ( value << 1 );
000010  4809              LDR      r0,|L21.56|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7f40              LDRB     r0,[r0,#0x1d]
000016  f00000f1          AND      r0,r0,#0xf1
00001a  ea400044          ORR      r0,r0,r4,LSL #1
00001e  4906              LDR      r1,|L21.56|
000020  6809              LDR      r1,[r1,#0]  ; SX1276LR
000022  7748              STRB     r0,[r1,#0x1d]
;;;194        SX1276Write( REG_LR_MODEMCONFIG1, SX1276LR->RegModemConfig1 );
000024  4804              LDR      r0,|L21.56|
000026  6800              LDR      r0,[r0,#0]  ; SX1276LR
000028  7f41              LDRB     r1,[r0,#0x1d]
00002a  201d              MOVS     r0,#0x1d
00002c  f7fffffe          BL       SX1276Write
;;;195        LoRaSettings.ErrorCoding = value;
000030  4802              LDR      r0,|L21.60|
000032  71c4              STRB     r4,[r0,#7]
;;;196    }
000034  bd10              POP      {r4,pc}
;;;197    
                          ENDP

000036  0000              DCW      0x0000
                  |L21.56|
                          DCD      SX1276LR
                  |L21.60|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetFreqHopOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetFreqHopOn PROC
;;;259    
;;;260    void SX1276LoRaSetFreqHopOn( bool enable )
000000  4901              LDR      r1,|L22.8|
;;;261    {
;;;262        LoRaSettings.FreqHopOn = enable;
000002  72c8              STRB     r0,[r1,#0xb]
;;;263    }
000004  4770              BX       lr
;;;264    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetHopPeriod||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetHopPeriod PROC
;;;269    
;;;270    void SX1276LoRaSetHopPeriod( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272        SX1276LR->RegHopPeriod = value;
000004  4806              LDR      r0,|L23.32|
000006  6800              LDR      r0,[r0,#0]  ; SX1276LR
000008  f8804024          STRB     r4,[r0,#0x24]
;;;273        SX1276Write( REG_LR_HOPPERIOD, SX1276LR->RegHopPeriod );
00000c  4804              LDR      r0,|L23.32|
00000e  6800              LDR      r0,[r0,#0]  ; SX1276LR
000010  f8901024          LDRB     r1,[r0,#0x24]
000014  2024              MOVS     r0,#0x24
000016  f7fffffe          BL       SX1276Write
;;;274        LoRaSettings.HopPeriod = value;
00001a  4802              LDR      r0,|L23.36|
00001c  7304              STRB     r4,[r0,#0xc]
;;;275    }
00001e  bd10              POP      {r4,pc}
;;;276    
                          ENDP

                  |L23.32|
                          DCD      SX1276LR
                  |L23.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetImplicitHeaderOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetImplicitHeaderOn PROC
;;;234    
;;;235    void SX1276LoRaSetImplicitHeaderOn( bool enable )
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000004  480b              LDR      r0,|L24.52|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  311d              ADDS     r1,r1,#0x1d
00000a  201d              MOVS     r0,#0x1d
00000c  f7fffffe          BL       SX1276Read
;;;238        SX1276LR->RegModemConfig1 = ( SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_IMPLICITHEADER_MASK ) | ( enable );
000010  4808              LDR      r0,|L24.52|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7f40              LDRB     r0,[r0,#0x1d]
000016  f00000fe          AND      r0,r0,#0xfe
00001a  4320              ORRS     r0,r0,r4
00001c  4905              LDR      r1,|L24.52|
00001e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000020  7748              STRB     r0,[r1,#0x1d]
;;;239        SX1276Write( REG_LR_MODEMCONFIG1, SX1276LR->RegModemConfig1 );
000022  4804              LDR      r0,|L24.52|
000024  6800              LDR      r0,[r0,#0]  ; SX1276LR
000026  7f41              LDRB     r1,[r0,#0x1d]
000028  201d              MOVS     r0,#0x1d
00002a  f7fffffe          BL       SX1276Write
;;;240        LoRaSettings.ImplicitHeaderOn = enable;
00002e  4802              LDR      r0,|L24.56|
000030  7244              STRB     r4,[r0,#9]
;;;241    }
000032  bd10              POP      {r4,pc}
;;;242    
                          ENDP

                  |L24.52|
                          DCD      SX1276LR
                  |L24.56|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetLowDatarateOptimize||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetLowDatarateOptimize PROC
;;;384    
;;;385    void SX1276LoRaSetLowDatarateOptimize( bool enable )
000000  b510              PUSH     {r4,lr}
;;;386    {
000002  4604              MOV      r4,r0
;;;387        SX1276Read( REG_LR_MODEMCONFIG3, &SX1276LR->RegModemConfig3 );
000004  480c              LDR      r0,|L25.56|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  3126              ADDS     r1,r1,#0x26
00000a  2026              MOVS     r0,#0x26
00000c  f7fffffe          BL       SX1276Read
;;;388        SX1276LR->RegModemConfig3 = ( SX1276LR->RegModemConfig3 & RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) | ( enable << 3 );
000010  4809              LDR      r0,|L25.56|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  f8900026          LDRB     r0,[r0,#0x26]
000018  f00000f7          AND      r0,r0,#0xf7
00001c  ea4000c4          ORR      r0,r0,r4,LSL #3
000020  4905              LDR      r1,|L25.56|
000022  6809              LDR      r1,[r1,#0]  ; SX1276LR
000024  f8810026          STRB     r0,[r1,#0x26]
;;;389        SX1276Write( REG_LR_MODEMCONFIG3, SX1276LR->RegModemConfig3 );
000028  4803              LDR      r0,|L25.56|
00002a  6800              LDR      r0,[r0,#0]  ; SX1276LR
00002c  f8901026          LDRB     r1,[r0,#0x26]
000030  2026              MOVS     r0,#0x26
000032  f7fffffe          BL       SX1276Write
;;;390    }
000036  bd10              POP      {r4,pc}
;;;391    
                          ENDP

                  |L25.56|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetNbTrigPeaks||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetNbTrigPeaks PROC
;;;397    
;;;398    void SX1276LoRaSetNbTrigPeaks( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;399    {
000002  4604              MOV      r4,r0
;;;400        SX1276Read( 0x31, &SX1276LR->RegTestReserved31 );
000004  480c              LDR      r0,|L26.56|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  3130              ADDS     r1,r1,#0x30
00000a  2031              MOVS     r0,#0x31
00000c  f7fffffe          BL       SX1276Read
;;;401        SX1276LR->RegTestReserved31 = ( SX1276LR->RegTestReserved31 & 0xF8 ) | value;
000010  4809              LDR      r0,|L26.56|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  f8900030          LDRB     r0,[r0,#0x30]
000018  f00000f8          AND      r0,r0,#0xf8
00001c  4320              ORRS     r0,r0,r4
00001e  4906              LDR      r1,|L26.56|
000020  6809              LDR      r1,[r1,#0]  ; SX1276LR
000022  f8810030          STRB     r0,[r1,#0x30]
;;;402        SX1276Write( 0x31, SX1276LR->RegTestReserved31 );
000026  4804              LDR      r0,|L26.56|
000028  6800              LDR      r0,[r0,#0]  ; SX1276LR
00002a  f8901030          LDRB     r1,[r0,#0x30]
00002e  2031              MOVS     r0,#0x31
000030  f7fffffe          BL       SX1276Write
;;;403    }
000034  bd10              POP      {r4,pc}
;;;404    
                          ENDP

000036  0000              DCW      0x0000
                  |L26.56|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetPAOutput||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPAOutput PROC
;;;343    
;;;344    void SX1276LoRaSetPAOutput( uint8_t outputPin )
000000  b510              PUSH     {r4,lr}
;;;345    {
000002  4604              MOV      r4,r0
;;;346        SX1276Read( REG_LR_PACONFIG, &SX1276LR->RegPaConfig );
000004  480a              LDR      r0,|L27.48|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  3109              ADDS     r1,r1,#9
00000a  2009              MOVS     r0,#9
00000c  f7fffffe          BL       SX1276Read
;;;347        SX1276LR->RegPaConfig = (SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_MASK ) | outputPin;
000010  4807              LDR      r0,|L27.48|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7a40              LDRB     r0,[r0,#9]
000016  f000007f          AND      r0,r0,#0x7f
00001a  4320              ORRS     r0,r0,r4
00001c  4904              LDR      r1,|L27.48|
00001e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000020  7248              STRB     r0,[r1,#9]
;;;348        SX1276Write( REG_LR_PACONFIG, SX1276LR->RegPaConfig );
000022  4803              LDR      r0,|L27.48|
000024  6800              LDR      r0,[r0,#0]  ; SX1276LR
000026  7a41              LDRB     r1,[r0,#9]
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       SX1276Write
;;;349    }
00002e  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  |L27.48|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetPa20dBm||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPa20dBm PROC
;;;317    
;;;318    void SX1276LoRaSetPa20dBm( bool enale )
000000  b510              PUSH     {r4,lr}
;;;319    {
000002  4604              MOV      r4,r0
;;;320        SX1276Read( REG_LR_PADAC, &SX1276LR->RegPaDac );
000004  4813              LDR      r0,|L28.84|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  314c              ADDS     r1,r1,#0x4c
00000a  204d              MOVS     r0,#0x4d
00000c  f7fffffe          BL       SX1276Read
;;;321        SX1276Read( REG_LR_PACONFIG, &SX1276LR->RegPaConfig );
000010  4810              LDR      r0,|L28.84|
000012  6801              LDR      r1,[r0,#0]  ; SX1276LR
000014  3109              ADDS     r1,r1,#9
000016  2009              MOVS     r0,#9
000018  f7fffffe          BL       SX1276Read
;;;322    
;;;323        if( ( SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
00001c  480d              LDR      r0,|L28.84|
00001e  6800              LDR      r0,[r0,#0]  ; SX1276LR
000020  7a40              LDRB     r0,[r0,#9]
000022  f0000080          AND      r0,r0,#0x80
000026  2880              CMP      r0,#0x80
000028  d107              BNE      |L28.58|
;;;324        {    
;;;325            if( enale == true )
00002a  2c01              CMP      r4,#1
00002c  d10a              BNE      |L28.68|
;;;326            {
;;;327                SX1276LR->RegPaDac = 0x87;
00002e  2087              MOVS     r0,#0x87
000030  4908              LDR      r1,|L28.84|
000032  6809              LDR      r1,[r1,#0]  ; SX1276LR
000034  f881004c          STRB     r0,[r1,#0x4c]
000038  e004              B        |L28.68|
                  |L28.58|
;;;328            }
;;;329        }
;;;330        else
;;;331        {
;;;332            SX1276LR->RegPaDac = 0x84;
00003a  2084              MOVS     r0,#0x84
00003c  4905              LDR      r1,|L28.84|
00003e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000040  f881004c          STRB     r0,[r1,#0x4c]
                  |L28.68|
;;;333        }
;;;334        SX1276Write( REG_LR_PADAC, SX1276LR->RegPaDac );
000044  4803              LDR      r0,|L28.84|
000046  6800              LDR      r0,[r0,#0]  ; SX1276LR
000048  f890104c          LDRB     r1,[r0,#0x4c]
00004c  204d              MOVS     r0,#0x4d
00004e  f7fffffe          BL       SX1276Write
;;;335    }
000052  bd10              POP      {r4,pc}
;;;336    
                          ENDP

                  |L28.84|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetPaRamp||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPaRamp PROC
;;;356    
;;;357    void SX1276LoRaSetPaRamp( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;358    {
000002  4604              MOV      r4,r0
;;;359        SX1276Read( REG_LR_PARAMP, &SX1276LR->RegPaRamp );
000004  480b              LDR      r0,|L29.52|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  310a              ADDS     r1,r1,#0xa
00000a  200a              MOVS     r0,#0xa
00000c  f7fffffe          BL       SX1276Read
;;;360        SX1276LR->RegPaRamp = ( SX1276LR->RegPaRamp & RFLR_PARAMP_MASK ) | ( value & ~RFLR_PARAMP_MASK );
000010  4808              LDR      r0,|L29.52|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7a80              LDRB     r0,[r0,#0xa]
000016  f00000f0          AND      r0,r0,#0xf0
00001a  f02401f0          BIC      r1,r4,#0xf0
00001e  4308              ORRS     r0,r0,r1
000020  4904              LDR      r1,|L29.52|
000022  6809              LDR      r1,[r1,#0]  ; SX1276LR
000024  7288              STRB     r0,[r1,#0xa]
;;;361        SX1276Write( REG_LR_PARAMP, SX1276LR->RegPaRamp );
000026  4803              LDR      r0,|L29.52|
000028  6800              LDR      r0,[r0,#0]  ; SX1276LR
00002a  7a81              LDRB     r1,[r0,#0xa]
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       SX1276Write
;;;362    }
000032  bd10              POP      {r4,pc}
;;;363    
                          ENDP

                  |L29.52|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetPacketCrcOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPacketCrcOn PROC
;;;204    
;;;205    void SX1276LoRaSetPacketCrcOn( bool enable )
000000  b510              PUSH     {r4,lr}
;;;206    {
000002  4604              MOV      r4,r0
;;;207        SX1276Read( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2 );
000004  480c              LDR      r0,|L30.56|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  311e              ADDS     r1,r1,#0x1e
00000a  201e              MOVS     r0,#0x1e
00000c  f7fffffe          BL       SX1276Read
;;;208        SX1276LR->RegModemConfig2 = ( SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) | ( enable << 2 );
000010  4809              LDR      r0,|L30.56|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7f80              LDRB     r0,[r0,#0x1e]
000016  f00000fb          AND      r0,r0,#0xfb
00001a  ea400084          ORR      r0,r0,r4,LSL #2
00001e  4906              LDR      r1,|L30.56|
000020  6809              LDR      r1,[r1,#0]  ; SX1276LR
000022  7788              STRB     r0,[r1,#0x1e]
;;;209        SX1276Write( REG_LR_MODEMCONFIG2, SX1276LR->RegModemConfig2 );
000024  4804              LDR      r0,|L30.56|
000026  6800              LDR      r0,[r0,#0]  ; SX1276LR
000028  7f81              LDRB     r1,[r0,#0x1e]
00002a  201e              MOVS     r0,#0x1e
00002c  f7fffffe          BL       SX1276Write
;;;210        LoRaSettings.CrcOn = enable;
000030  4802              LDR      r0,|L30.60|
000032  7204              STRB     r4,[r0,#8]
;;;211    }
000034  bd10              POP      {r4,pc}
;;;212    
                          ENDP

000036  0000              DCW      0x0000
                  |L30.56|
                          DCD      SX1276LR
                  |L30.60|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetPayloadLength||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPayloadLength PROC
;;;303    
;;;304    void SX1276LoRaSetPayloadLength( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;305    {
000002  4604              MOV      r4,r0
;;;306        SX1276LR->RegPayloadLength = value;
000004  4806              LDR      r0,|L31.32|
000006  6800              LDR      r0,[r0,#0]  ; SX1276LR
000008  f8804022          STRB     r4,[r0,#0x22]
;;;307        SX1276Write( REG_LR_PAYLOADLENGTH, SX1276LR->RegPayloadLength );
00000c  4804              LDR      r0,|L31.32|
00000e  6800              LDR      r0,[r0,#0]  ; SX1276LR
000010  f8901022          LDRB     r1,[r0,#0x22]
000014  2022              MOVS     r0,#0x22
000016  f7fffffe          BL       SX1276Write
;;;308        LoRaSettings.PayloadLength = value;
00001a  4802              LDR      r0,|L31.36|
00001c  7604              STRB     r4,[r0,#0x18]
;;;309    }
00001e  bd10              POP      {r4,pc}
;;;310    
                          ENDP

                  |L31.32|
                          DCD      SX1276LR
                  |L31.36|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetPreambleLength||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetPreambleLength PROC
;;;212    
;;;213    void SX1276LoRaSetPreambleLength( uint16_t value )
000000  b510              PUSH     {r4,lr}
;;;214    {
000002  4604              MOV      r4,r0
;;;215        SX1276ReadBuffer( REG_LR_PREAMBLEMSB, &SX1276LR->RegPreambleMsb, 2 );
000004  2202              MOVS     r2,#2
000006  480b              LDR      r0,|L32.52|
000008  6801              LDR      r1,[r0,#0]  ; SX1276LR
00000a  3120              ADDS     r1,r1,#0x20
00000c  2020              MOVS     r0,#0x20
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;216    
;;;217        SX1276LR->RegPreambleMsb = ( value >> 8 ) & 0x00FF;
000012  0a20              LSRS     r0,r4,#8
000014  4907              LDR      r1,|L32.52|
000016  6809              LDR      r1,[r1,#0]  ; SX1276LR
000018  f8810020          STRB     r0,[r1,#0x20]
;;;218        SX1276LR->RegPreambleLsb = value & 0xFF;
00001c  4905              LDR      r1,|L32.52|
00001e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000020  f8814021          STRB     r4,[r1,#0x21]
;;;219        SX1276WriteBuffer( REG_LR_PREAMBLEMSB, &SX1276LR->RegPreambleMsb, 2 );
000024  2202              MOVS     r2,#2
000026  4803              LDR      r0,|L32.52|
000028  6801              LDR      r1,[r0,#0]  ; SX1276LR
00002a  3120              ADDS     r1,r1,#0x20
00002c  2020              MOVS     r0,#0x20
00002e  f7fffffe          BL       SX1276WriteBuffer
;;;220    }
000032  bd10              POP      {r4,pc}
;;;221    
                          ENDP

                  |L32.52|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetRFFrequency||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetRFFrequency PROC
;;;46     
;;;47     void SX1276LoRaSetRFFrequency( uint32_t freq )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;48     {
000004  4604              MOV      r4,r0
;;;49         LoRaSettings.RFFrequency = freq;
000006  4811              LDR      r0,|L33.76|
000008  6004              STR      r4,[r0,#0]  ; LoRaSettings
;;;50     
;;;51         freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_ui2d
000010  4605              MOV      r5,r0
000012  2200              MOVS     r2,#0
000014  4b0e              LDR      r3,|L33.80|
000016  f7fffffe          BL       __aeabi_ddiv
00001a  4607              MOV      r7,r0
00001c  f7fffffe          BL       __aeabi_d2uiz
000020  4604              MOV      r4,r0
;;;52         SX1276LR->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
000022  0c20              LSRS     r0,r4,#16
000024  490b              LDR      r1,|L33.84|
000026  6809              LDR      r1,[r1,#0]  ; SX1276LR
000028  7188              STRB     r0,[r1,#6]
;;;53         SX1276LR->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
00002a  0a20              LSRS     r0,r4,#8
00002c  4909              LDR      r1,|L33.84|
00002e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000030  71c8              STRB     r0,[r1,#7]
;;;54         SX1276LR->RegFrfLsb = ( uint8_t )( freq & 0xFF );
000032  4908              LDR      r1,|L33.84|
000034  6809              LDR      r1,[r1,#0]  ; SX1276LR
000036  720c              STRB     r4,[r1,#8]
;;;55         SX1276WriteBuffer( REG_LR_FRFMSB, &SX1276LR->RegFrfMsb, 3 );
000038  2203              MOVS     r2,#3
00003a  4806              LDR      r0,|L33.84|
00003c  6801              LDR      r1,[r0,#0]  ; SX1276LR
00003e  1d89              ADDS     r1,r1,#6
000040  2006              MOVS     r0,#6
000042  f7fffffe          BL       SX1276WriteBuffer
;;;56     }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;57     
                          ENDP

00004a  0000              DCW      0x0000
                  |L33.76|
                          DCD      LoRaSettings
                  |L33.80|
                          DCD      0x404e8480
                  |L33.84|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetRFPower||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetRFPower PROC
;;;66     
;;;67     void SX1276LoRaSetRFPower( int8_t power )
000000  b510              PUSH     {r4,lr}
;;;68     {
000002  4604              MOV      r4,r0
;;;69         SX1276Read( REG_LR_PACONFIG, &SX1276LR->RegPaConfig );
000004  483d              LDR      r0,|L34.252|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  3109              ADDS     r1,r1,#9
00000a  2009              MOVS     r0,#9
00000c  f7fffffe          BL       SX1276Read
;;;70         SX1276Read( REG_LR_PADAC, &SX1276LR->RegPaDac );
000010  483a              LDR      r0,|L34.252|
000012  6801              LDR      r1,[r0,#0]  ; SX1276LR
000014  314c              ADDS     r1,r1,#0x4c
000016  204d              MOVS     r0,#0x4d
000018  f7fffffe          BL       SX1276Read
;;;71         
;;;72         if( ( SX1276LR->RegPaConfig & RFLR_PACONFIG_PASELECT_PABOOST ) == RFLR_PACONFIG_PASELECT_PABOOST )
00001c  4837              LDR      r0,|L34.252|
00001e  6800              LDR      r0,[r0,#0]  ; SX1276LR
000020  7a40              LDRB     r0,[r0,#9]
000022  f0000080          AND      r0,r0,#0x80
000026  2880              CMP      r0,#0x80
000028  d141              BNE      |L34.174|
;;;73         {
;;;74             if( ( SX1276LR->RegPaDac & 0x87 ) == 0x87 )
00002a  4834              LDR      r0,|L34.252|
00002c  6800              LDR      r0,[r0,#0]  ; SX1276LR
00002e  f890004c          LDRB     r0,[r0,#0x4c]
000032  f0000087          AND      r0,r0,#0x87
000036  2887              CMP      r0,#0x87
000038  d11c              BNE      |L34.116|
;;;75             {
;;;76                 if( power < 5 )
00003a  2c05              CMP      r4,#5
00003c  da00              BGE      |L34.64|
;;;77                 {
;;;78                     power = 5;
00003e  2405              MOVS     r4,#5
                  |L34.64|
;;;79                 }
;;;80                 if( power > 20 )
000040  2c14              CMP      r4,#0x14
000042  dd00              BLE      |L34.70|
;;;81                 {
;;;82                     power = 20;
000044  2414              MOVS     r4,#0x14
                  |L34.70|
;;;83                 }
;;;84                 SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
000046  482d              LDR      r0,|L34.252|
000048  6800              LDR      r0,[r0,#0]  ; SX1276LR
00004a  7a40              LDRB     r0,[r0,#9]
00004c  f000008f          AND      r0,r0,#0x8f
000050  f0400070          ORR      r0,r0,#0x70
000054  4929              LDR      r1,|L34.252|
000056  6809              LDR      r1,[r1,#0]  ; SX1276LR
000058  7248              STRB     r0,[r1,#9]
;;;85                 SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
00005a  4828              LDR      r0,|L34.252|
00005c  6800              LDR      r0,[r0,#0]  ; SX1276LR
00005e  7a40              LDRB     r0,[r0,#9]
000060  f00000f0          AND      r0,r0,#0xf0
000064  1f61              SUBS     r1,r4,#5
000066  f001010f          AND      r1,r1,#0xf
00006a  4308              ORRS     r0,r0,r1
00006c  4923              LDR      r1,|L34.252|
00006e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000070  7248              STRB     r0,[r1,#9]
000072  e03a              B        |L34.234|
                  |L34.116|
;;;86             }
;;;87             else
;;;88             {
;;;89                 if( power < 2 )
000074  2c02              CMP      r4,#2
000076  da00              BGE      |L34.122|
;;;90                 {
;;;91                     power = 2;
000078  2402              MOVS     r4,#2
                  |L34.122|
;;;92                 }
;;;93                 if( power > 17 )
00007a  2c11              CMP      r4,#0x11
00007c  dd00              BLE      |L34.128|
;;;94                 {
;;;95                     power = 17;
00007e  2411              MOVS     r4,#0x11
                  |L34.128|
;;;96                 }
;;;97                 SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
000080  481e              LDR      r0,|L34.252|
000082  6800              LDR      r0,[r0,#0]  ; SX1276LR
000084  7a40              LDRB     r0,[r0,#9]
000086  f000008f          AND      r0,r0,#0x8f
00008a  f0400070          ORR      r0,r0,#0x70
00008e  491b              LDR      r1,|L34.252|
000090  6809              LDR      r1,[r1,#0]  ; SX1276LR
000092  7248              STRB     r0,[r1,#9]
;;;98                 SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
000094  4819              LDR      r0,|L34.252|
000096  6800              LDR      r0,[r0,#0]  ; SX1276LR
000098  7a40              LDRB     r0,[r0,#9]
00009a  f00000f0          AND      r0,r0,#0xf0
00009e  1ea1              SUBS     r1,r4,#2
0000a0  f001010f          AND      r1,r1,#0xf
0000a4  4308              ORRS     r0,r0,r1
0000a6  4915              LDR      r1,|L34.252|
0000a8  6809              LDR      r1,[r1,#0]  ; SX1276LR
0000aa  7248              STRB     r0,[r1,#9]
0000ac  e01d              B        |L34.234|
                  |L34.174|
;;;99             }
;;;100        }
;;;101        else
;;;102        {
;;;103            if( power < -1 )
0000ae  f1b43fff          CMP      r4,#0xffffffff
0000b2  da01              BGE      |L34.184|
;;;104            {
;;;105                power = -1;
0000b4  f04f34ff          MOV      r4,#0xffffffff
                  |L34.184|
;;;106            }
;;;107            if( power > 14 )
0000b8  2c0e              CMP      r4,#0xe
0000ba  dd00              BLE      |L34.190|
;;;108            {
;;;109                power = 14;
0000bc  240e              MOVS     r4,#0xe
                  |L34.190|
;;;110            }
;;;111            SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_MAX_POWER_MASK ) | 0x70;
0000be  480f              LDR      r0,|L34.252|
0000c0  6800              LDR      r0,[r0,#0]  ; SX1276LR
0000c2  7a40              LDRB     r0,[r0,#9]
0000c4  f000008f          AND      r0,r0,#0x8f
0000c8  f0400070          ORR      r0,r0,#0x70
0000cc  490b              LDR      r1,|L34.252|
0000ce  6809              LDR      r1,[r1,#0]  ; SX1276LR
0000d0  7248              STRB     r0,[r1,#9]
;;;112            SX1276LR->RegPaConfig = ( SX1276LR->RegPaConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
0000d2  480a              LDR      r0,|L34.252|
0000d4  6800              LDR      r0,[r0,#0]  ; SX1276LR
0000d6  7a40              LDRB     r0,[r0,#9]
0000d8  f00000f0          AND      r0,r0,#0xf0
0000dc  1c61              ADDS     r1,r4,#1
0000de  f001010f          AND      r1,r1,#0xf
0000e2  4308              ORRS     r0,r0,r1
0000e4  4905              LDR      r1,|L34.252|
0000e6  6809              LDR      r1,[r1,#0]  ; SX1276LR
0000e8  7248              STRB     r0,[r1,#9]
                  |L34.234|
;;;113        }
;;;114        SX1276Write( REG_LR_PACONFIG, SX1276LR->RegPaConfig );
0000ea  4804              LDR      r0,|L34.252|
0000ec  6800              LDR      r0,[r0,#0]  ; SX1276LR
0000ee  7a41              LDRB     r1,[r0,#9]
0000f0  2009              MOVS     r0,#9
0000f2  f7fffffe          BL       SX1276Write
;;;115        LoRaSettings.Power = power;
0000f6  4802              LDR      r0,|L34.256|
0000f8  7104              STRB     r4,[r0,#4]
;;;116    }
0000fa  bd10              POP      {r4,pc}
;;;117    
                          ENDP

                  |L34.252|
                          DCD      SX1276LR
                  |L34.256|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetRxPacketTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetRxPacketTimeout PROC
;;;293    
;;;294    void SX1276LoRaSetRxPacketTimeout( uint32_t value )
000000  4901              LDR      r1,|L35.8|
;;;295    {
;;;296        LoRaSettings.RxPacketTimeout = value;
000002  6148              STR      r0,[r1,#0x14]  ; LoRaSettings
;;;297    }
000004  4770              BX       lr
;;;298    
                          ENDP

000006  0000              DCW      0x0000
                  |L35.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetRxSingleOn||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetRxSingleOn PROC
;;;249    
;;;250    void SX1276LoRaSetRxSingleOn( bool enable )
000000  4901              LDR      r1,|L36.8|
;;;251    {
;;;252        LoRaSettings.RxSingleOn = enable;
000002  7288              STRB     r0,[r1,#0xa]
;;;253    }
000004  4770              BX       lr
;;;254    
                          ENDP

000006  0000              DCW      0x0000
                  |L36.8|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetSignalBandwidth||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetSignalBandwidth PROC
;;;140    
;;;141    void SX1276LoRaSetSignalBandwidth( uint8_t bw )
000000  b510              PUSH     {r4,lr}
;;;142    {
000002  4604              MOV      r4,r0
;;;143        SX1276Read( REG_LR_MODEMCONFIG1, &SX1276LR->RegModemConfig1 );
000004  480b              LDR      r0,|L37.52|
000006  6801              LDR      r1,[r0,#0]  ; SX1276LR
000008  311d              ADDS     r1,r1,#0x1d
00000a  201d              MOVS     r0,#0x1d
00000c  f7fffffe          BL       SX1276Read
;;;144        SX1276LR->RegModemConfig1 = ( SX1276LR->RegModemConfig1 & RFLR_MODEMCONFIG1_BW_MASK ) | ( bw << 4 );
000010  4808              LDR      r0,|L37.52|
000012  6800              LDR      r0,[r0,#0]  ; SX1276LR
000014  7f40              LDRB     r0,[r0,#0x1d]
000016  f364101f          BFI      r0,r4,#4,#28
00001a  4906              LDR      r1,|L37.52|
00001c  6809              LDR      r1,[r1,#0]  ; SX1276LR
00001e  7748              STRB     r0,[r1,#0x1d]
;;;145        SX1276Write( REG_LR_MODEMCONFIG1, SX1276LR->RegModemConfig1 );
000020  4804              LDR      r0,|L37.52|
000022  6800              LDR      r0,[r0,#0]  ; SX1276LR
000024  7f41              LDRB     r1,[r0,#0x1d]
000026  201d              MOVS     r0,#0x1d
000028  f7fffffe          BL       SX1276Write
;;;146        LoRaSettings.SignalBw = bw;
00002c  4802              LDR      r0,|L37.56|
00002e  7144              STRB     r4,[r0,#5]
;;;147    }
000030  bd10              POP      {r4,pc}
;;;148    
                          ENDP

000032  0000              DCW      0x0000
                  |L37.52|
                          DCD      SX1276LR
                  |L37.56|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetSpreadingFactor||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetSpreadingFactor PROC
;;;155    
;;;156    void SX1276LoRaSetSpreadingFactor( uint8_t factor )
000000  b510              PUSH     {r4,lr}
;;;157    {
000002  4604              MOV      r4,r0
;;;158    
;;;159        if( factor > 12 )
000004  2c0c              CMP      r4,#0xc
000006  dd01              BLE      |L38.12|
;;;160        {
;;;161            factor = 12;
000008  240c              MOVS     r4,#0xc
00000a  e002              B        |L38.18|
                  |L38.12|
;;;162        }
;;;163        else if( factor < 6 )
00000c  2c06              CMP      r4,#6
00000e  da00              BGE      |L38.18|
;;;164        {
;;;165            factor = 6;
000010  2406              MOVS     r4,#6
                  |L38.18|
;;;166        }
;;;167    
;;;168        if( factor == 6 )
000012  2c06              CMP      r4,#6
000014  d103              BNE      |L38.30|
;;;169        {
;;;170            SX1276LoRaSetNbTrigPeaks( 5 );
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       SX1276LoRaSetNbTrigPeaks
00001c  e002              B        |L38.36|
                  |L38.30|
;;;171        }
;;;172        else
;;;173        {
;;;174            SX1276LoRaSetNbTrigPeaks( 3 );
00001e  2003              MOVS     r0,#3
000020  f7fffffe          BL       SX1276LoRaSetNbTrigPeaks
                  |L38.36|
;;;175        }
;;;176    
;;;177        SX1276Read( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2 );    
000024  480b              LDR      r0,|L38.84|
000026  6801              LDR      r1,[r0,#0]  ; SX1276LR
000028  311e              ADDS     r1,r1,#0x1e
00002a  201e              MOVS     r0,#0x1e
00002c  f7fffffe          BL       SX1276Read
;;;178        SX1276LR->RegModemConfig2 = ( SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SF_MASK ) | ( factor << 4 );
000030  4808              LDR      r0,|L38.84|
000032  6800              LDR      r0,[r0,#0]  ; SX1276LR
000034  7f80              LDRB     r0,[r0,#0x1e]
000036  f364101f          BFI      r0,r4,#4,#28
00003a  4906              LDR      r1,|L38.84|
00003c  6809              LDR      r1,[r1,#0]  ; SX1276LR
00003e  7788              STRB     r0,[r1,#0x1e]
;;;179        SX1276Write( REG_LR_MODEMCONFIG2, SX1276LR->RegModemConfig2 );    
000040  4804              LDR      r0,|L38.84|
000042  6800              LDR      r0,[r0,#0]  ; SX1276LR
000044  7f81              LDRB     r1,[r0,#0x1e]
000046  201e              MOVS     r0,#0x1e
000048  f7fffffe          BL       SX1276Write
;;;180        LoRaSettings.SpreadingFactor = factor;
00004c  4802              LDR      r0,|L38.88|
00004e  7184              STRB     r4,[r0,#6]
;;;181    }
000050  bd10              POP      {r4,pc}
;;;182    
                          ENDP

000052  0000              DCW      0x0000
                  |L38.84|
                          DCD      SX1276LR
                  |L38.88|
                          DCD      LoRaSettings

                          AREA ||i.SX1276LoRaSetSymbTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetSymbTimeout PROC
;;;369    
;;;370    void SX1276LoRaSetSymbTimeout( uint16_t value )
000000  b510              PUSH     {r4,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372        SX1276ReadBuffer( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2, 2 );
000004  2202              MOVS     r2,#2
000006  480f              LDR      r0,|L39.68|
000008  6801              LDR      r1,[r0,#0]  ; SX1276LR
00000a  311e              ADDS     r1,r1,#0x1e
00000c  201e              MOVS     r0,#0x1e
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;373    
;;;374        SX1276LR->RegModemConfig2 = ( SX1276LR->RegModemConfig2 & RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) | ( ( value >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK );
000012  480c              LDR      r0,|L39.68|
000014  6800              LDR      r0,[r0,#0]  ; SX1276LR
000016  7f80              LDRB     r0,[r0,#0x1e]
000018  f00000fc          AND      r0,r0,#0xfc
00001c  f06f01fc          MVN      r1,#0xfc
000020  ea012124          AND      r1,r1,r4,ASR #8
000024  4308              ORRS     r0,r0,r1
000026  4907              LDR      r1,|L39.68|
000028  6809              LDR      r1,[r1,#0]  ; SX1276LR
00002a  7788              STRB     r0,[r1,#0x1e]
;;;375        SX1276LR->RegSymbTimeoutLsb = value & 0xFF;
00002c  4905              LDR      r1,|L39.68|
00002e  6809              LDR      r1,[r1,#0]  ; SX1276LR
000030  77cc              STRB     r4,[r1,#0x1f]
;;;376        SX1276WriteBuffer( REG_LR_MODEMCONFIG2, &SX1276LR->RegModemConfig2, 2 );
000032  2202              MOVS     r2,#2
000034  4803              LDR      r0,|L39.68|
000036  6801              LDR      r1,[r0,#0]  ; SX1276LR
000038  311e              ADDS     r1,r1,#0x1e
00003a  201e              MOVS     r0,#0x1e
00003c  f7fffffe          BL       SX1276WriteBuffer
;;;377    }
000040  bd10              POP      {r4,pc}
;;;378    
                          ENDP

000042  0000              DCW      0x0000
                  |L39.68|
                          DCD      SX1276LR

                          AREA ||i.SX1276LoRaSetTxPacketTimeout||, CODE, READONLY, ALIGN=2

                  SX1276LoRaSetTxPacketTimeout PROC
;;;283    
;;;284    void SX1276LoRaSetTxPacketTimeout( uint32_t value )
000000  4901              LDR      r1,|L40.8|
;;;285    {
;;;286        LoRaSettings.TxPacketTimeout = value;
000002  6108              STR      r0,[r1,#0x10]  ; LoRaSettings
;;;287    }
000004  4770              BX       lr
;;;288    
                          ENDP

000006  0000              DCW      0x0000
                  |L40.8|
                          DCD      LoRaSettings
