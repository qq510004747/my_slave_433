; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_fifo.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\bsp_fifo.crf ..\BSP\BSP_FIFO\BSP_FIFO.c]
                          THUMB

                          AREA ||i.fifoFlushBuf||, CODE, READONLY, ALIGN=2

                  fifoFlushBuf PROC
;;;45       */
;;;46     void fifoFlushBuf(void)
000000  4805              LDR      r0,|L1.24|
;;;47     {
;;;48     	out_index = in_index;
000002  8800              LDRH     r0,[r0,#0]  ; in_index
000004  4905              LDR      r1,|L1.28|
000006  8008              STRH     r0,[r1,#0]
;;;49     	/* Set empty flag */
;;;50     	buf_flags |= EMPTY_FLAG;
000008  4805              LDR      r0,|L1.32|
00000a  7800              LDRB     r0,[r0,#0]  ; buf_flags
00000c  f0400002          ORR      r0,r0,#2
000010  4903              LDR      r1,|L1.32|
000012  7008              STRB     r0,[r1,#0]
;;;51     }
000014  4770              BX       lr
;;;52     
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      in_index
                  |L1.28|
                          DCD      out_index
                  |L1.32|
                          DCD      buf_flags

                          AREA ||i.fifoGetBufDataCount||, CODE, READONLY, ALIGN=2

                  fifoGetBufDataCount PROC
;;;88       */
;;;89     uint16_t fifoGetBufDataCount(void)
000000  4815              LDR      r0,|L2.88|
;;;90     {
;;;91     	/* Check if buffer is overflowed or empty */
;;;92     	if (out_index == in_index) {
000002  8800              LDRH     r0,[r0,#0]  ; out_index
000004  4915              LDR      r1,|L2.92|
000006  8809              LDRH     r1,[r1,#0]  ; in_index
000008  4288              CMP      r0,r1
00000a  d10e              BNE      |L2.42|
;;;93     		if (!(buf_flags & OVREFLOW_FLAG)) {
00000c  4814              LDR      r0,|L2.96|
00000e  7800              LDRB     r0,[r0,#0]  ; buf_flags
000010  f0000001          AND      r0,r0,#1
000014  b938              CBNZ     r0,|L2.38|
;;;94     			/* Buffer is empty */
;;;95     			buf_flags |= EMPTY_FLAG;
000016  4812              LDR      r0,|L2.96|
000018  7800              LDRB     r0,[r0,#0]  ; buf_flags
00001a  f0400002          ORR      r0,r0,#2
00001e  4910              LDR      r1,|L2.96|
000020  7008              STRB     r0,[r1,#0]
;;;96     			return 0;
000022  2000              MOVS     r0,#0
                  |L2.36|
;;;97     			
;;;98     		} else {
;;;99     			return FIFO_BUF_SIZE;
;;;100    		}
;;;101    	}
;;;102    	if (in_index > out_index) {
;;;103    		return in_index - out_index;
;;;104    		
;;;105    	} else {
;;;106    		return FIFO_BUF_SIZE - out_index + in_index;
;;;107    	}
;;;108    }
000024  4770              BX       lr
                  |L2.38|
000026  2080              MOVS     r0,#0x80              ;99
000028  e7fc              B        |L2.36|
                  |L2.42|
00002a  480c              LDR      r0,|L2.92|
00002c  8800              LDRH     r0,[r0,#0]            ;102  ; in_index
00002e  490a              LDR      r1,|L2.88|
000030  8809              LDRH     r1,[r1,#0]            ;102  ; out_index
000032  4288              CMP      r0,r1                 ;102
000034  dd06              BLE      |L2.68|
000036  4809              LDR      r0,|L2.92|
000038  8800              LDRH     r0,[r0,#0]            ;103  ; in_index
00003a  4907              LDR      r1,|L2.88|
00003c  8809              LDRH     r1,[r1,#0]            ;103  ; out_index
00003e  1a40              SUBS     r0,r0,r1              ;103
000040  b280              UXTH     r0,r0                 ;103
000042  e7ef              B        |L2.36|
                  |L2.68|
000044  4804              LDR      r0,|L2.88|
000046  8800              LDRH     r0,[r0,#0]            ;106  ; out_index
000048  f1c00080          RSB      r0,r0,#0x80           ;106
00004c  4903              LDR      r1,|L2.92|
00004e  8809              LDRH     r1,[r1,#0]            ;106  ; in_index
000050  4408              ADD      r0,r0,r1              ;106
000052  b280              UXTH     r0,r0                 ;106
000054  e7e6              B        |L2.36|
;;;109    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
                          DCD      out_index
                  |L2.92|
                          DCD      in_index
                  |L2.96|
                          DCD      buf_flags

                          AREA ||i.fifoLookBuf||, CODE, READONLY, ALIGN=2

                  fifoLookBuf PROC
;;;115      */
;;;116    void fifoLookBuf(uint8_t *out_buf)
000000  4601              MOV      r1,r0
;;;117    {
;;;118    	uint8_t i = 0;
000002  2000              MOVS     r0,#0
;;;119    
;;;120    	while (i < FIFO_BUF_SIZE) {
000004  e004              B        |L3.16|
                  |L3.6|
;;;121    		out_buf[i] = buffer[i];
000006  4a04              LDR      r2,|L3.24|
000008  5c12              LDRB     r2,[r2,r0]
00000a  540a              STRB     r2,[r1,r0]
;;;122    		i++;
00000c  1c42              ADDS     r2,r0,#1
00000e  b2d0              UXTB     r0,r2
                  |L3.16|
000010  2880              CMP      r0,#0x80              ;120
000012  dbf8              BLT      |L3.6|
;;;123    	}
;;;124    }
000014  4770              BX       lr
;;;125    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      buffer

                          AREA ||i.fifoPopBuf||, CODE, READONLY, ALIGN=2

                  fifoPopBuf PROC
;;;58       */
;;;59     uint16_t fifoPopBuf(uint8_t *out_buf, uint16_t n)
000000  b570              PUSH     {r4-r6,lr}
;;;60     {
000002  4602              MOV      r2,r0
;;;61     	uint16_t i = 0;
000004  2400              MOVS     r4,#0
;;;62     	uint16_t data_count = 0;
000006  2300              MOVS     r3,#0
;;;63     
;;;64     	while (n--) {
000008  e02c              B        |L4.100|
                  |L4.10|
;;;65     		/* Buffer is overflowed or empty */
;;;66     		if (out_index == in_index) {
00000a  481a              LDR      r0,|L4.116|
00000c  8800              LDRH     r0,[r0,#0]  ; out_index
00000e  4d1a              LDR      r5,|L4.120|
000010  882d              LDRH     r5,[r5,#0]  ; in_index
000012  42a8              CMP      r0,r5
000014  d10c              BNE      |L4.48|
;;;67     			if (!(buf_flags & OVREFLOW_FLAG)) {
000016  4819              LDR      r0,|L4.124|
000018  7800              LDRB     r0,[r0,#0]  ; buf_flags
00001a  f0000001          AND      r0,r0,#1
00001e  b938              CBNZ     r0,|L4.48|
;;;68     				/* Buffer is empty */
;;;69     				buf_flags |= EMPTY_FLAG;
000020  4816              LDR      r0,|L4.124|
000022  7800              LDRB     r0,[r0,#0]  ; buf_flags
000024  f0400002          ORR      r0,r0,#2
000028  4d14              LDR      r5,|L4.124|
00002a  7028              STRB     r0,[r5,#0]
;;;70     				//return EMPTERR;
;;;71     				return 0;
00002c  2000              MOVS     r0,#0
                  |L4.46|
;;;72     			}
;;;73     		}
;;;74     		out_buf[i++] = buffer[out_index++];
;;;75     		out_index &= FIFO_BUF_MASK;
;;;76     		data_count++;
;;;77     		/* Clear overflow flag */
;;;78     		buf_flags &= ~OVREFLOW_FLAG;
;;;79     	}
;;;80     	return data_count;
;;;81     }
00002e  bd70              POP      {r4-r6,pc}
                  |L4.48|
000030  4810              LDR      r0,|L4.116|
000032  8805              LDRH     r5,[r0,#0]            ;74  ; out_index
000034  8800              LDRH     r0,[r0,#0]            ;74  ; out_index
000036  1c40              ADDS     r0,r0,#1              ;74
000038  4e0e              LDR      r6,|L4.116|
00003a  8030              STRH     r0,[r6,#0]            ;74
00003c  4810              LDR      r0,|L4.128|
00003e  5d46              LDRB     r6,[r0,r5]            ;74
000040  4620              MOV      r0,r4                 ;74
000042  1c65              ADDS     r5,r4,#1              ;74
000044  b2ac              UXTH     r4,r5                 ;74
000046  5416              STRB     r6,[r2,r0]            ;74
000048  480a              LDR      r0,|L4.116|
00004a  7800              LDRB     r0,[r0,#0]            ;75  ; out_index
00004c  f000007f          AND      r0,r0,#0x7f           ;75
000050  4d08              LDR      r5,|L4.116|
000052  8028              STRH     r0,[r5,#0]            ;75
000054  1c58              ADDS     r0,r3,#1              ;76
000056  b283              UXTH     r3,r0                 ;76
000058  4808              LDR      r0,|L4.124|
00005a  7800              LDRB     r0,[r0,#0]            ;78  ; buf_flags
00005c  f0200001          BIC      r0,r0,#1              ;78
000060  4d06              LDR      r5,|L4.124|
000062  7028              STRB     r0,[r5,#0]            ;78
                  |L4.100|
000064  1e08              SUBS     r0,r1,#0              ;64
000066  f1a10501          SUB      r5,r1,#1              ;64
00006a  b2a9              UXTH     r1,r5                 ;64
00006c  d1cd              BNE      |L4.10|
00006e  4618              MOV      r0,r3                 ;80
000070  e7dd              B        |L4.46|
;;;82     
                          ENDP

000072  0000              DCW      0x0000
                  |L4.116|
                          DCD      out_index
                  |L4.120|
                          DCD      in_index
                  |L4.124|
                          DCD      buf_flags
                  |L4.128|
                          DCD      buffer

                          AREA ||i.fifoPushBuf||, CODE, READONLY, ALIGN=2

                  fifoPushBuf PROC
;;;14       */
;;;15     uint16_t fifoPushBuf(uint8_t *data, uint16_t n)
000000  b5f0              PUSH     {r4-r7,lr}
;;;16     {
000002  4602              MOV      r2,r0
;;;17     	uint16_t i = 0;
000004  2400              MOVS     r4,#0
;;;18     	uint16_t data_count = 0;
000006  2300              MOVS     r3,#0
;;;19     
;;;20     	while (n--) {
000008  e02c              B        |L5.100|
                  |L5.10|
;;;21     		/* If buffer overflowed, drop new data */
;;;22     		if (buf_flags & OVREFLOW_FLAG) {
00000a  481a              LDR      r0,|L5.116|
00000c  7800              LDRB     r0,[r0,#0]  ; buf_flags
00000e  f0000001          AND      r0,r0,#1
000012  b108              CBZ      r0,|L5.24|
;;;23     			//return OVFERR;
;;;24     			return 0;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;25     		} else {
;;;26     			buffer[in_index++] = data[i++];
;;;27     			in_index &= FIFO_BUF_MASK;
;;;28     			/* Clear overflow flag */
;;;29     			buf_flags &= ~EMPTY_FLAG;
;;;30     			data_count++;
;;;31     			/* Set overflow flag */
;;;32     			if (in_index == out_index) {
;;;33     				buf_flags |= OVREFLOW_FLAG;
;;;34     			}
;;;35     		}
;;;36     	}
;;;37     	return data_count;
;;;38     }
000016  bdf0              POP      {r4-r7,pc}
                  |L5.24|
000018  4620              MOV      r0,r4                 ;26
00001a  1c65              ADDS     r5,r4,#1              ;26
00001c  b2ac              UXTH     r4,r5                 ;26
00001e  5c15              LDRB     r5,[r2,r0]            ;26
000020  4815              LDR      r0,|L5.120|
000022  8806              LDRH     r6,[r0,#0]            ;26  ; in_index
000024  8800              LDRH     r0,[r0,#0]            ;26  ; in_index
000026  1c40              ADDS     r0,r0,#1              ;26
000028  4f13              LDR      r7,|L5.120|
00002a  8038              STRH     r0,[r7,#0]            ;26
00002c  4813              LDR      r0,|L5.124|
00002e  5585              STRB     r5,[r0,r6]            ;26
000030  4638              MOV      r0,r7                 ;27
000032  7800              LDRB     r0,[r0,#0]            ;27  ; in_index
000034  f000007f          AND      r0,r0,#0x7f           ;27
000038  463d              MOV      r5,r7                 ;27
00003a  8028              STRH     r0,[r5,#0]            ;27
00003c  480d              LDR      r0,|L5.116|
00003e  7800              LDRB     r0,[r0,#0]            ;29  ; buf_flags
000040  f0200002          BIC      r0,r0,#2              ;29
000044  4d0b              LDR      r5,|L5.116|
000046  7028              STRB     r0,[r5,#0]            ;29
000048  1c58              ADDS     r0,r3,#1              ;30
00004a  b283              UXTH     r3,r0                 ;30
00004c  4638              MOV      r0,r7                 ;32
00004e  8800              LDRH     r0,[r0,#0]            ;32  ; in_index
000050  4d0b              LDR      r5,|L5.128|
000052  882d              LDRH     r5,[r5,#0]            ;32  ; out_index
000054  42a8              CMP      r0,r5                 ;32
000056  d105              BNE      |L5.100|
000058  4806              LDR      r0,|L5.116|
00005a  7800              LDRB     r0,[r0,#0]            ;33  ; buf_flags
00005c  f0400001          ORR      r0,r0,#1              ;33
000060  4d04              LDR      r5,|L5.116|
000062  7028              STRB     r0,[r5,#0]            ;33
                  |L5.100|
000064  1e08              SUBS     r0,r1,#0              ;20
000066  f1a10501          SUB      r5,r1,#1              ;20
00006a  b2a9              UXTH     r1,r5                 ;20
00006c  d1cd              BNE      |L5.10|
00006e  4618              MOV      r0,r3                 ;37
000070  e7d1              B        |L5.22|
;;;39     
                          ENDP

000072  0000              DCW      0x0000
                  |L5.116|
                          DCD      buf_flags
                  |L5.120|
                          DCD      in_index
                  |L5.124|
                          DCD      buffer
                  |L5.128|
                          DCD      out_index

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30
                  buffer
                          %        128

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  crc16Tab
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=1

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  01                DCB      0x01
                  buf_flags
000003  00                DCB      0x00
                  in_index
000004  0000              DCB      0x00,0x00
                  out_index
000006  0000              DCB      0x00,0x00
