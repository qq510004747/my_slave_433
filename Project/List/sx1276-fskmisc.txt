; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\sx1276-fskmisc.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\sx1276-fskmisc.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\sx1276-fskmisc.crf ..\BSP\SX1278\radio\sx1276-FskMisc.c]
                          THUMB

                          AREA ||i.SX1276FskCalibreateTemp||, CODE, READONLY, ALIGN=1

                  SX1276FskCalibreateTemp PROC
;;;511    
;;;512    int8_t SX1276FskCalibreateTemp( int8_t actualTemp )
000000  b510              PUSH     {r4,lr}
;;;513    {
000002  4604              MOV      r4,r0
;;;514        return actualTemp - SX1276FskGetRawTemp( );
000004  f7fffffe          BL       SX1276FskGetRawTemp
000008  1a20              SUBS     r0,r4,r0
00000a  b240              SXTB     r0,r0
;;;515    }
00000c  bd10              POP      {r4,pc}
;;;516    
                          ENDP


                          AREA ||i.SX1276FskComputeRxBw||, CODE, READONLY, ALIGN=2

                  SX1276FskComputeRxBw PROC
;;;220     */
;;;221    static uint32_t SX1276FskComputeRxBw( uint8_t mantisse, uint8_t exponent )
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;222    {
000004  4683              MOV      r11,r0
000006  468a              MOV      r10,r1
;;;223        // rxBw
;;;224        if( ( SX1276->RegOpMode & RF_OPMODE_MODULATIONTYPE_FSK ) == RF_OPMODE_MODULATIONTYPE_FSK )
000008  2000              MOVS     r0,#0
00000a  bb18              CBNZ     r0,|L2.84|
;;;225        {
;;;226            return ( uint32_t )( ( double )XTAL_FREQ / ( mantisse * ( double )pow( 2, exponent + 2 ) ) );
00000c  f10a0002          ADD      r0,r10,#2
000010  f7fffffe          BL       __aeabi_i2d
000014  4606              MOV      r6,r0
000016  4632              MOV      r2,r6
000018  460b              MOV      r3,r1
00001a  2000              MOVS     r0,#0
00001c  f04f4180          MOV      r1,#0x40000000
000020  f7fffffe          BL       pow
000024  e9cd0100          STRD     r0,r1,[sp,#0]
000028  4658              MOV      r0,r11
00002a  f7fffffe          BL       __aeabi_ui2d
00002e  4680              MOV      r8,r0
000030  e9dd2300          LDRD     r2,r3,[sp,#0]
000034  f7fffffe          BL       __aeabi_dmul
000038  4602              MOV      r2,r0
00003a  460b              MOV      r3,r1
00003c  e9cd0102          STRD     r0,r1,[sp,#8]
000040  2000              MOVS     r0,#0
000042  4915              LDR      r1,|L2.152|
000044  f7fffffe          BL       __aeabi_ddiv
000048  4604              MOV      r4,r0
00004a  f7fffffe          BL       __aeabi_d2uiz
                  |L2.78|
;;;227        }
;;;228        else
;;;229        {
;;;230            return ( uint32_t )( ( double )XTAL_FREQ / ( mantisse * ( double )pow( 2, exponent + 3 ) ) );
;;;231        }
;;;232    }
00004e  b004              ADD      sp,sp,#0x10
000050  e8bd9ff0          POP      {r4-r12,pc}
                  |L2.84|
000054  f10a0003          ADD      r0,r10,#3             ;230
000058  f7fffffe          BL       __aeabi_i2d
00005c  4602              MOV      r2,r0                 ;230
00005e  460b              MOV      r3,r1                 ;230
000060  e9cd0100          STRD     r0,r1,[sp,#0]         ;230
000064  2000              MOVS     r0,#0                 ;230
000066  f04f4180          MOV      r1,#0x40000000        ;230
00006a  f7fffffe          BL       pow
00006e  e9cd0102          STRD     r0,r1,[sp,#8]         ;230
000072  4658              MOV      r0,r11                ;230
000074  f7fffffe          BL       __aeabi_ui2d
000078  4606              MOV      r6,r0                 ;230
00007a  e9dd2302          LDRD     r2,r3,[sp,#8]         ;230
00007e  f7fffffe          BL       __aeabi_dmul
000082  4604              MOV      r4,r0                 ;230
000084  4622              MOV      r2,r4                 ;230
000086  460b              MOV      r3,r1                 ;230
000088  2000              MOVS     r0,#0                 ;230
00008a  4903              LDR      r1,|L2.152|
00008c  f7fffffe          BL       __aeabi_ddiv
000090  4680              MOV      r8,r0                 ;230
000092  f7fffffe          BL       __aeabi_d2uiz
000096  e7da              B        |L2.78|
;;;233    
                          ENDP

                  |L2.152|
                          DCD      0x417e8480

                          AREA ||i.SX1276FskComputeRxBwMantExp||, CODE, READONLY, ALIGN=2

                  SX1276FskComputeRxBwMantExp PROC
;;;240     */
;;;241    static void SX1276FskComputeRxBwMantExp( uint32_t rxBwValue, uint8_t* mantisse, uint8_t* exponent )
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;242    {
000004  b088              SUB      sp,sp,#0x20
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
;;;243        uint8_t tmpExp = 0;
00000a  2400              MOVS     r4,#0
;;;244        uint8_t tmpMant = 0;
00000c  46a1              MOV      r9,r4
;;;245    
;;;246        double tmpRxBw = 0;
00000e  bf00              NOP      
;;;247        double rxBwMin = 10e6;
000010  2700              MOVS     r7,#0
000012  f8df80f8          LDR      r8,|L3.268|
;;;248    
;;;249        for( tmpExp = 0; tmpExp < 8; tmpExp++ )
000016  bf00              NOP      
000018  e072              B        |L3.256|
                  |L3.26|
;;;250        {
;;;251            for( tmpMant = 16; tmpMant <= 24; tmpMant += 4 )
00001a  f04f0910          MOV      r9,#0x10
00001e  e06a              B        |L3.246|
                  |L3.32|
;;;252            {
;;;253                if( ( SX1276->RegOpMode & RF_OPMODE_MODULATIONTYPE_FSK ) == RF_OPMODE_MODULATIONTYPE_FSK )
000020  2000              MOVS     r0,#0
000022  bb08              CBNZ     r0,|L3.104|
;;;254                {
;;;255                    tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 2 ) );
000024  1ca0              ADDS     r0,r4,#2
000026  f7fffffe          BL       __aeabi_i2d
00002a  4602              MOV      r2,r0
00002c  460b              MOV      r3,r1
00002e  e9cd0100          STRD     r0,r1,[sp,#0]
000032  2000              MOVS     r0,#0
000034  f04f4180          MOV      r1,#0x40000000
000038  f7fffffe          BL       pow
00003c  e9cd0104          STRD     r0,r1,[sp,#0x10]
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       __aeabi_ui2d
000046  e9cd0102          STRD     r0,r1,[sp,#8]
00004a  e9dd2304          LDRD     r2,r3,[sp,#0x10]
00004e  f7fffffe          BL       __aeabi_dmul
000052  4602              MOV      r2,r0
000054  460b              MOV      r3,r1
000056  e9cd0106          STRD     r0,r1,[sp,#0x18]
00005a  2000              MOVS     r0,#0
00005c  492c              LDR      r1,|L3.272|
00005e  f7fffffe          BL       __aeabi_ddiv
000062  4605              MOV      r5,r0
000064  460e              MOV      r6,r1
000066  e020              B        |L3.170|
                  |L3.104|
;;;256                }
;;;257                else
;;;258                {
;;;259                    tmpRxBw = ( double )XTAL_FREQ / ( tmpMant * ( double )pow( 2, tmpExp + 3 ) );
000068  1ce0              ADDS     r0,r4,#3
00006a  f7fffffe          BL       __aeabi_i2d
00006e  4602              MOV      r2,r0
000070  460b              MOV      r3,r1
000072  e9cd0100          STRD     r0,r1,[sp,#0]
000076  2000              MOVS     r0,#0
000078  f04f4180          MOV      r1,#0x40000000
00007c  f7fffffe          BL       pow
000080  e9cd0104          STRD     r0,r1,[sp,#0x10]
000084  4648              MOV      r0,r9
000086  f7fffffe          BL       __aeabi_ui2d
00008a  e9cd0102          STRD     r0,r1,[sp,#8]
00008e  e9dd2304          LDRD     r2,r3,[sp,#0x10]
000092  f7fffffe          BL       __aeabi_dmul
000096  4602              MOV      r2,r0
000098  460b              MOV      r3,r1
00009a  e9cd0106          STRD     r0,r1,[sp,#0x18]
00009e  2000              MOVS     r0,#0
0000a0  491b              LDR      r1,|L3.272|
0000a2  f7fffffe          BL       __aeabi_ddiv
0000a6  4605              MOV      r5,r0
0000a8  460e              MOV      r6,r1
                  |L3.170|
;;;260                }
;;;261                if( fabs( tmpRxBw - rxBwValue ) < rxBwMin )
0000aa  9808              LDR      r0,[sp,#0x20]
0000ac  f7fffffe          BL       __aeabi_ui2d
0000b0  462a              MOV      r2,r5
0000b2  4633              MOV      r3,r6
0000b4  e9cd0104          STRD     r0,r1,[sp,#0x10]
0000b8  f7fffffe          BL       __aeabi_drsub
0000bc  f0214100          BIC      r1,r1,#0x80000000
0000c0  463a              MOV      r2,r7
0000c2  4643              MOV      r3,r8
0000c4  e9cd0106          STRD     r0,r1,[sp,#0x18]
0000c8  f7fffffe          BL       __aeabi_cdcmple
0000cc  d20f              BCS      |L3.238|
;;;262                {
;;;263                    rxBwMin = fabs( tmpRxBw - rxBwValue );
0000ce  9808              LDR      r0,[sp,#0x20]
0000d0  f7fffffe          BL       __aeabi_ui2d
0000d4  462a              MOV      r2,r5
0000d6  4633              MOV      r3,r6
0000d8  e9cd0106          STRD     r0,r1,[sp,#0x18]
0000dc  f7fffffe          BL       __aeabi_drsub
0000e0  f0214800          BIC      r8,r1,#0x80000000
0000e4  4607              MOV      r7,r0
;;;264                    *mantisse = tmpMant;
0000e6  f88a9000          STRB     r9,[r10,#0]
;;;265                    *exponent = tmpExp;
0000ea  f88b4000          STRB     r4,[r11,#0]
                  |L3.238|
0000ee  f1090004          ADD      r0,r9,#4              ;251
0000f2  f00009ff          AND      r9,r0,#0xff           ;251
                  |L3.246|
0000f6  f1b90f18          CMP      r9,#0x18              ;251
0000fa  dd91              BLE      |L3.32|
0000fc  1c60              ADDS     r0,r4,#1              ;249
0000fe  b2c4              UXTB     r4,r0                 ;249
                  |L3.256|
000100  2c08              CMP      r4,#8                 ;249
000102  db8a              BLT      |L3.26|
;;;266                }
;;;267            }
;;;268        }
;;;269    }
000104  b00b              ADD      sp,sp,#0x2c
000106  e8bd8ff0          POP      {r4-r11,pc}
;;;270    
                          ENDP

00010a  0000              DCW      0x0000
                  |L3.268|
                          DCD      0x416312d0
                  |L3.272|
                          DCD      0x417e8480

                          AREA ||i.SX1276FskGetAfcOn||, CODE, READONLY, ALIGN=2

                  SX1276FskGetAfcOn PROC
;;;366    
;;;367    bool SX1276FskGetAfcOn( void )
000000  b510              PUSH     {r4,lr}
;;;368    {
;;;369        SX1276Read( REG_RXCONFIG, &SX1276->RegRxConfig );
000002  4808              LDR      r0,|L4.36|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  310d              ADDS     r1,r1,#0xd
000008  200d              MOVS     r0,#0xd
00000a  f7fffffe          BL       SX1276Read
;;;370        FskSettings.AfcOn = ( SX1276->RegRxConfig & RF_RXCONFIG_AFCAUTO_ON ) >> 4;
00000e  4805              LDR      r0,|L4.36|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  7b40              LDRB     r0,[r0,#0xd]
000014  f3c01000          UBFX     r0,r0,#4,#1
000018  4903              LDR      r1,|L4.40|
00001a  7648              STRB     r0,[r1,#0x19]
;;;371        return FskSettings.AfcOn;
00001c  4608              MOV      r0,r1
00001e  7e40              LDRB     r0,[r0,#0x19]  ; FskSettings
;;;372    }
000020  bd10              POP      {r4,pc}
;;;373    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      SX1276
                  |L4.40|
                          DCD      FskSettings

                          AREA ||i.SX1276FskGetBitrate||, CODE, READONLY, ALIGN=2

                  SX1276FskGetBitrate PROC
;;;109    
;;;110    uint32_t SX1276FskGetBitrate( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;111    {
;;;112        SX1276ReadBuffer( REG_BITRATEMSB, &SX1276->RegBitrateMsb, 2 );
000004  2202              MOVS     r2,#2
000006  4812              LDR      r0,|L5.80|
000008  6801              LDR      r1,[r0,#0]  ; SX1276
00000a  1c89              ADDS     r1,r1,#2
00000c  4610              MOV      r0,r2
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;113        FskSettings.Bitrate = ( ( ( uint32_t )SX1276->RegBitrateMsb << 8 ) | ( ( uint32_t )SX1276->RegBitrateLsb ) );
000012  480f              LDR      r0,|L5.80|
000014  6800              LDR      r0,[r0,#0]  ; SX1276
000016  78c0              LDRB     r0,[r0,#3]
000018  490d              LDR      r1,|L5.80|
00001a  6809              LDR      r1,[r1,#0]  ; SX1276
00001c  7889              LDRB     r1,[r1,#2]
00001e  ea402001          ORR      r0,r0,r1,LSL #8
000022  490c              LDR      r1,|L5.84|
000024  6048              STR      r0,[r1,#4]  ; FskSettings
;;;114        FskSettings.Bitrate = ( uint16_t )( ( double )XTAL_FREQ / ( double )FskSettings.Bitrate );
000026  6848              LDR      r0,[r1,#4]  ; FskSettings
000028  f7fffffe          BL       __aeabi_ui2d
00002c  4606              MOV      r6,r0
00002e  4632              MOV      r2,r6
000030  460b              MOV      r3,r1
000032  2000              MOVS     r0,#0
000034  4908              LDR      r1,|L5.88|
000036  f7fffffe          BL       __aeabi_ddiv
00003a  4604              MOV      r4,r0
00003c  f7fffffe          BL       __aeabi_d2uiz
000040  b280              UXTH     r0,r0
000042  4904              LDR      r1,|L5.84|
000044  6048              STR      r0,[r1,#4]  ; FskSettings
;;;115    
;;;116        return FskSettings.Bitrate;
000046  4608              MOV      r0,r1
000048  6840              LDR      r0,[r0,#4]  ; FskSettings
;;;117    }
00004a  e8bd81f0          POP      {r4-r8,pc}
;;;118    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      SX1276
                  |L5.84|
                          DCD      FskSettings
                  |L5.88|
                          DCD      0x417e8480

                          AREA ||i.SX1276FskGetBw||, CODE, READONLY, ALIGN=2

                  SX1276FskGetBw PROC
;;;314    
;;;315    uint32_t SX1276FskGetBw( uint8_t* reg )
000000  b570              PUSH     {r4-r6,lr}
;;;316    {
000002  4604              MOV      r4,r0
;;;317        uint32_t rxBwValue = 0;
000004  2500              MOVS     r5,#0
;;;318        uint8_t mantisse = 0;
000006  2600              MOVS     r6,#0
;;;319        switch( ( *reg & 0x18 ) >> 3 )
000008  7820              LDRB     r0,[r4,#0]
00000a  f3c000c1          UBFX     r0,r0,#3,#2
00000e  b120              CBZ      r0,|L6.26|
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L6.30|
000014  2802              CMP      r0,#2
000016  d106              BNE      |L6.38|
000018  e003              B        |L6.34|
                  |L6.26|
;;;320        {
;;;321            case 0:
;;;322                mantisse = 16;
00001a  2610              MOVS     r6,#0x10
;;;323                break;
00001c  e004              B        |L6.40|
                  |L6.30|
;;;324            case 1:
;;;325                mantisse = 20;
00001e  2614              MOVS     r6,#0x14
;;;326                break;
000020  e002              B        |L6.40|
                  |L6.34|
;;;327            case 2:
;;;328                mantisse = 24;
000022  2618              MOVS     r6,#0x18
;;;329                break;
000024  e000              B        |L6.40|
                  |L6.38|
;;;330            default:
;;;331                break;
000026  bf00              NOP      
                  |L6.40|
000028  bf00              NOP                            ;323
;;;332        }
;;;333        rxBwValue = SX1276FskComputeRxBw( mantisse, ( uint8_t )*reg & 0x07 );
00002a  7820              LDRB     r0,[r4,#0]
00002c  f0000107          AND      r1,r0,#7
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       SX1276FskComputeRxBw
000036  4605              MOV      r5,r0
;;;334        if( reg == &SX1276->RegRxBw )
000038  4806              LDR      r0,|L6.84|
00003a  6800              LDR      r0,[r0,#0]  ; SX1276
00003c  3012              ADDS     r0,r0,#0x12
00003e  4284              CMP      r4,r0
000040  d103              BNE      |L6.74|
;;;335        {
;;;336            return FskSettings.RxBw = rxBwValue;
000042  4628              MOV      r0,r5
000044  4904              LDR      r1,|L6.88|
000046  610d              STR      r5,[r1,#0x10]  ; FskSettings
                  |L6.72|
;;;337        }
;;;338        else
;;;339        {
;;;340            return FskSettings.RxBwAfc = rxBwValue;
;;;341        }
;;;342    }
000048  bd70              POP      {r4-r6,pc}
                  |L6.74|
00004a  4628              MOV      r0,r5                 ;340
00004c  4902              LDR      r1,|L6.88|
00004e  614d              STR      r5,[r1,#0x14]         ;340  ; FskSettings
000050  e7fa              B        |L6.72|
;;;343    
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      SX1276
                  |L6.88|
                          DCD      FskSettings

                          AREA ||i.SX1276FskGetFdev||, CODE, READONLY, ALIGN=2

                  SX1276FskGetFdev PROC
;;;130    
;;;131    uint32_t SX1276FskGetFdev( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;132    {
;;;133        SX1276ReadBuffer( REG_FDEVMSB, &SX1276->RegFdevMsb, 2 );
000004  2202              MOVS     r2,#2
000006  4812              LDR      r0,|L7.80|
000008  6801              LDR      r1,[r0,#0]  ; SX1276
00000a  1d09              ADDS     r1,r1,#4
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;134        FskSettings.Fdev = ( ( ( uint32_t )( ( SX1276->RegFdevMsb << 8 ) & ~RF_FDEVMSB_FDEV_MASK ) ) | ( ( uint32_t )SX1276->RegFdevLsb ) );
000012  480f              LDR      r0,|L7.80|
000014  6800              LDR      r0,[r0,#0]  ; SX1276
000016  7900              LDRB     r0,[r0,#4]
000018  f06f01c0          MVN      r1,#0xc0
00001c  ea012000          AND      r0,r1,r0,LSL #8
000020  490b              LDR      r1,|L7.80|
000022  6809              LDR      r1,[r1,#0]  ; SX1276
000024  7949              LDRB     r1,[r1,#5]
000026  4308              ORRS     r0,r0,r1
000028  490a              LDR      r1,|L7.84|
00002a  6088              STR      r0,[r1,#8]  ; FskSettings
;;;135        FskSettings.Fdev = ( uint16_t )( ( double )FskSettings.Fdev * ( double )FREQ_STEP );
00002c  6888              LDR      r0,[r1,#8]  ; FskSettings
00002e  f7fffffe          BL       __aeabi_ui2d
000032  4606              MOV      r6,r0
000034  2200              MOVS     r2,#0
000036  4b08              LDR      r3,|L7.88|
000038  f7fffffe          BL       __aeabi_dmul
00003c  4604              MOV      r4,r0
00003e  f7fffffe          BL       __aeabi_d2uiz
000042  b280              UXTH     r0,r0
000044  4903              LDR      r1,|L7.84|
000046  6088              STR      r0,[r1,#8]  ; FskSettings
;;;136    
;;;137        return FskSettings.Fdev;
000048  4608              MOV      r0,r1
00004a  6880              LDR      r0,[r0,#8]  ; FskSettings
;;;138    }
00004c  e8bd81f0          POP      {r4-r8,pc}
;;;139    
                          ENDP

                  |L7.80|
                          DCD      SX1276
                  |L7.84|
                          DCD      FskSettings
                  |L7.88|
                          DCD      0x404e8480

                          AREA ||i.SX1276FskGetPAOutput||, CODE, READONLY, ALIGN=2

                  SX1276FskGetPAOutput PROC
;;;420    
;;;421    uint8_t SX1276FskGetPAOutput( void )
000000  b510              PUSH     {r4,lr}
;;;422    {
;;;423        SX1276Read( REG_PACONFIG, &SX1276->RegPaConfig );
000002  4806              LDR      r0,|L8.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  3109              ADDS     r1,r1,#9
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       SX1276Read
;;;424        return SX1276->RegPaConfig & ~RF_PACONFIG_PASELECT_MASK;
00000e  4803              LDR      r0,|L8.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  7a40              LDRB     r0,[r0,#9]
000014  f020007f          BIC      r0,r0,#0x7f
;;;425    }
000018  bd10              POP      {r4,pc}
;;;426    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      SX1276

                          AREA ||i.SX1276FskGetPa20dBm||, CODE, READONLY, ALIGN=2

                  SX1276FskGetPa20dBm PROC
;;;406    
;;;407    bool SX1276FskGetPa20dBm( void )
000000  b510              PUSH     {r4,lr}
;;;408    {
;;;409        SX1276Read( REG_PADAC, &SX1276->RegPaDac );
000002  4809              LDR      r0,|L9.40|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  314d              ADDS     r1,r1,#0x4d
000008  204d              MOVS     r0,#0x4d
00000a  f7fffffe          BL       SX1276Read
;;;410        
;;;411        return ( ( SX1276->RegPaDac & 0x07 ) == 0x07 ) ? true : false;
00000e  4806              LDR      r0,|L9.40|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  f890004d          LDRB     r0,[r0,#0x4d]
000016  f0000007          AND      r0,r0,#7
00001a  2807              CMP      r0,#7
00001c  d101              BNE      |L9.34|
00001e  2001              MOVS     r0,#1
                  |L9.32|
;;;412    }
000020  bd10              POP      {r4,pc}
                  |L9.34|
000022  2000              MOVS     r0,#0                 ;411
000024  e7fc              B        |L9.32|
;;;413    
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
                          DCD      SX1276

                          AREA ||i.SX1276FskGetPaRamp||, CODE, READONLY, ALIGN=2

                  SX1276FskGetPaRamp PROC
;;;434    
;;;435    uint8_t SX1276FskGetPaRamp( void )
000000  b510              PUSH     {r4,lr}
;;;436    {
;;;437        SX1276Read( REG_PARAMP, &SX1276->RegPaRamp );
000002  4806              LDR      r0,|L10.28|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  310a              ADDS     r1,r1,#0xa
000008  200a              MOVS     r0,#0xa
00000a  f7fffffe          BL       SX1276Read
;;;438        return SX1276->RegPaRamp & ~RF_PARAMP_MASK;
00000e  4803              LDR      r0,|L10.28|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  7a80              LDRB     r0,[r0,#0xa]
000014  f02000f0          BIC      r0,r0,#0xf0
;;;439    }
000018  bd10              POP      {r4,pc}
;;;440    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      SX1276

                          AREA ||i.SX1276FskGetPacketCrcOn||, CODE, READONLY, ALIGN=2

                  SX1276FskGetPacketCrcOn PROC
;;;351    
;;;352    bool SX1276FskGetPacketCrcOn( void )
000000  b510              PUSH     {r4,lr}
;;;353    {
;;;354        SX1276Read( REG_PACKETCONFIG1, &SX1276->RegPacketConfig1 );
000002  4808              LDR      r0,|L11.36|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  3130              ADDS     r1,r1,#0x30
000008  2030              MOVS     r0,#0x30
00000a  f7fffffe          BL       SX1276Read
;;;355        FskSettings.CrcOn = ( SX1276->RegPacketConfig1 & RF_PACKETCONFIG1_CRC_ON ) >> 4;
00000e  4805              LDR      r0,|L11.36|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  f8900030          LDRB     r0,[r0,#0x30]
000016  f3c01000          UBFX     r0,r0,#4,#1
00001a  4903              LDR      r1,|L11.40|
00001c  7608              STRB     r0,[r1,#0x18]
;;;356        return FskSettings.CrcOn;
00001e  4608              MOV      r0,r1
000020  7e00              LDRB     r0,[r0,#0x18]  ; FskSettings
;;;357    }
000022  bd10              POP      {r4,pc}
;;;358    
                          ENDP

                  |L11.36|
                          DCD      SX1276
                  |L11.40|
                          DCD      FskSettings

                          AREA ||i.SX1276FskGetPayloadLength||, CODE, READONLY, ALIGN=2

                  SX1276FskGetPayloadLength PROC
;;;380    
;;;381    uint8_t SX1276FskGetPayloadLength( void )
000000  b510              PUSH     {r4,lr}
;;;382    {
;;;383        SX1276Read( REG_PAYLOADLENGTH, &SX1276->RegPayloadLength );
000002  4807              LDR      r0,|L12.32|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  3132              ADDS     r1,r1,#0x32
000008  2032              MOVS     r0,#0x32
00000a  f7fffffe          BL       SX1276Read
;;;384        FskSettings.PayloadLength = SX1276->RegPayloadLength;
00000e  4804              LDR      r0,|L12.32|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  f8900032          LDRB     r0,[r0,#0x32]
000016  4903              LDR      r1,|L12.36|
000018  7688              STRB     r0,[r1,#0x1a]
;;;385        return FskSettings.PayloadLength;
00001a  4608              MOV      r0,r1
00001c  7e80              LDRB     r0,[r0,#0x1a]  ; FskSettings
;;;386    }
00001e  bd10              POP      {r4,pc}
;;;387    
                          ENDP

                  |L12.32|
                          DCD      SX1276
                  |L12.36|
                          DCD      FskSettings

                          AREA ||i.SX1276FskGetRFFrequency||, CODE, READONLY, ALIGN=2

                  SX1276FskGetRFFrequency PROC
;;;53     
;;;54     uint32_t SX1276FskGetRFFrequency( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;55     {
;;;56         SX1276ReadBuffer( REG_FRFMSB, &SX1276->RegFrfMsb, 3 );
000004  2203              MOVS     r2,#3
000006  4813              LDR      r0,|L13.84|
000008  6801              LDR      r1,[r0,#0]  ; SX1276
00000a  1d89              ADDS     r1,r1,#6
00000c  2006              MOVS     r0,#6
00000e  f7fffffe          BL       SX1276ReadBuffer
;;;57         FskSettings.RFFrequency = ( ( uint32_t )SX1276->RegFrfMsb << 16 ) | ( ( uint32_t )SX1276->RegFrfMid << 8 ) | ( ( uint32_t )SX1276->RegFrfLsb );
000012  4810              LDR      r0,|L13.84|
000014  6800              LDR      r0,[r0,#0]  ; SX1276
000016  7980              LDRB     r0,[r0,#6]
000018  0400              LSLS     r0,r0,#16
00001a  490e              LDR      r1,|L13.84|
00001c  6809              LDR      r1,[r1,#0]  ; SX1276
00001e  79c9              LDRB     r1,[r1,#7]
000020  ea402001          ORR      r0,r0,r1,LSL #8
000024  490b              LDR      r1,|L13.84|
000026  6809              LDR      r1,[r1,#0]  ; SX1276
000028  7a09              LDRB     r1,[r1,#8]
00002a  4308              ORRS     r0,r0,r1
00002c  490a              LDR      r1,|L13.88|
00002e  6008              STR      r0,[r1,#0]  ; FskSettings
;;;58         FskSettings.RFFrequency = ( uint32_t )( ( double )FskSettings.RFFrequency * ( double )FREQ_STEP );
000030  6808              LDR      r0,[r1,#0]  ; FskSettings
000032  f7fffffe          BL       __aeabi_ui2d
000036  4606              MOV      r6,r0
000038  2200              MOVS     r2,#0
00003a  4b08              LDR      r3,|L13.92|
00003c  f7fffffe          BL       __aeabi_dmul
000040  4604              MOV      r4,r0
000042  f7fffffe          BL       __aeabi_d2uiz
000046  4904              LDR      r1,|L13.88|
000048  6008              STR      r0,[r1,#0]  ; FskSettings
;;;59     
;;;60         return FskSettings.RFFrequency;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]  ; FskSettings
;;;61     }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;62     
                          ENDP

000052  0000              DCW      0x0000
                  |L13.84|
                          DCD      SX1276
                  |L13.88|
                          DCD      FskSettings
                  |L13.92|
                          DCD      0x404e8480

                          AREA ||i.SX1276FskGetRFPower||, CODE, READONLY, ALIGN=2

                  SX1276FskGetRFPower PROC
;;;190    
;;;191    int8_t SX1276FskGetRFPower( void )
000000  b510              PUSH     {r4,lr}
;;;192    {
;;;193        SX1276Read( REG_PACONFIG, &SX1276->RegPaConfig );
000002  481c              LDR      r0,|L14.116|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  3109              ADDS     r1,r1,#9
000008  2009              MOVS     r0,#9
00000a  f7fffffe          BL       SX1276Read
;;;194        SX1276Read( REG_PADAC, &SX1276->RegPaDac );
00000e  4819              LDR      r0,|L14.116|
000010  6801              LDR      r1,[r0,#0]  ; SX1276
000012  314d              ADDS     r1,r1,#0x4d
000014  204d              MOVS     r0,#0x4d
000016  f7fffffe          BL       SX1276Read
;;;195    
;;;196        if( ( SX1276->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
00001a  4816              LDR      r0,|L14.116|
00001c  6800              LDR      r0,[r0,#0]  ; SX1276
00001e  7a40              LDRB     r0,[r0,#9]
000020  f0000080          AND      r0,r0,#0x80
000024  2880              CMP      r0,#0x80
000026  d119              BNE      |L14.92|
;;;197        {
;;;198            if( ( SX1276->RegPaDac & 0x07 ) == 0x07 )
000028  4812              LDR      r0,|L14.116|
00002a  6800              LDR      r0,[r0,#0]  ; SX1276
00002c  f890004d          LDRB     r0,[r0,#0x4d]
000030  f0000007          AND      r0,r0,#7
000034  2807              CMP      r0,#7
000036  d108              BNE      |L14.74|
;;;199            {
;;;200                FskSettings.Power = 5 + ( SX1276->RegPaConfig & ~RF_PACONFIG_OUTPUTPOWER_MASK );
000038  480e              LDR      r0,|L14.116|
00003a  6800              LDR      r0,[r0,#0]  ; SX1276
00003c  7a40              LDRB     r0,[r0,#9]
00003e  f02000f0          BIC      r0,r0,#0xf0
000042  1d40              ADDS     r0,r0,#5
000044  490c              LDR      r1,|L14.120|
000046  7308              STRB     r0,[r1,#0xc]
000048  e010              B        |L14.108|
                  |L14.74|
;;;201            }
;;;202            else
;;;203            {
;;;204                FskSettings.Power = 2 + ( SX1276->RegPaConfig & ~RF_PACONFIG_OUTPUTPOWER_MASK );
00004a  480a              LDR      r0,|L14.116|
00004c  6800              LDR      r0,[r0,#0]  ; SX1276
00004e  7a40              LDRB     r0,[r0,#9]
000050  f02000f0          BIC      r0,r0,#0xf0
000054  1c80              ADDS     r0,r0,#2
000056  4908              LDR      r1,|L14.120|
000058  7308              STRB     r0,[r1,#0xc]
00005a  e007              B        |L14.108|
                  |L14.92|
;;;205            }
;;;206        }
;;;207        else
;;;208        {
;;;209            FskSettings.Power = -1 + ( SX1276->RegPaConfig & ~RF_PACONFIG_OUTPUTPOWER_MASK );
00005c  4805              LDR      r0,|L14.116|
00005e  6800              LDR      r0,[r0,#0]  ; SX1276
000060  7a40              LDRB     r0,[r0,#9]
000062  f02000f0          BIC      r0,r0,#0xf0
000066  1e40              SUBS     r0,r0,#1
000068  4903              LDR      r1,|L14.120|
00006a  7308              STRB     r0,[r1,#0xc]
                  |L14.108|
;;;210        }
;;;211        return FskSettings.Power;
00006c  4802              LDR      r0,|L14.120|
00006e  f990000c          LDRSB    r0,[r0,#0xc]  ; FskSettings
;;;212    }
000072  bd10              POP      {r4,pc}
;;;213    
                          ENDP

                  |L14.116|
                          DCD      SX1276
                  |L14.120|
                          DCD      FskSettings

                          AREA ||i.SX1276FskGetRawTemp||, CODE, READONLY, ALIGN=2

                  SX1276FskGetRawTemp PROC
;;;467    
;;;468    int8_t SX1276FskGetRawTemp( void )
000000  b570              PUSH     {r4-r6,lr}
;;;469    {
;;;470        int8_t temp = 0;
000002  2400              MOVS     r4,#0
;;;471        uint8_t previousOpMode;
;;;472        uint32_t startTick;
;;;473        
;;;474        // Enable Temperature reading
;;;475        SX1276Read( REG_IMAGECAL, &SX1276->RegImageCal );
000004  4832              LDR      r0,|L15.208|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  313b              ADDS     r1,r1,#0x3b
00000a  203b              MOVS     r0,#0x3b
00000c  f7fffffe          BL       SX1276Read
;;;476        SX1276->RegImageCal = ( SX1276->RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK ) | RF_IMAGECAL_TEMPMONITOR_ON;
000010  482f              LDR      r0,|L15.208|
000012  6800              LDR      r0,[r0,#0]  ; SX1276
000014  f890003b          LDRB     r0,[r0,#0x3b]
000018  f00000fe          AND      r0,r0,#0xfe
00001c  492c              LDR      r1,|L15.208|
00001e  6809              LDR      r1,[r1,#0]  ; SX1276
000020  f881003b          STRB     r0,[r1,#0x3b]
;;;477        SX1276Write( REG_IMAGECAL, SX1276->RegImageCal );
000024  482a              LDR      r0,|L15.208|
000026  6800              LDR      r0,[r0,#0]  ; SX1276
000028  f890103b          LDRB     r1,[r0,#0x3b]
00002c  203b              MOVS     r0,#0x3b
00002e  f7fffffe          BL       SX1276Write
;;;478    
;;;479        // save current Op Mode
;;;480        SX1276Read( REG_OPMODE, &SX1276->RegOpMode );
000032  4827              LDR      r0,|L15.208|
000034  6801              LDR      r1,[r0,#0]  ; SX1276
000036  1c49              ADDS     r1,r1,#1
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       SX1276Read
;;;481        previousOpMode = SX1276->RegOpMode;
00003e  4824              LDR      r0,|L15.208|
000040  6800              LDR      r0,[r0,#0]  ; SX1276
000042  7845              LDRB     r5,[r0,#1]
;;;482    
;;;483        // put device in FSK RxSynth
;;;484        SX1276->RegOpMode = RF_OPMODE_SYNTHESIZER_RX;
000044  2004              MOVS     r0,#4
000046  4922              LDR      r1,|L15.208|
000048  6809              LDR      r1,[r1,#0]  ; SX1276
00004a  7048              STRB     r0,[r1,#1]
;;;485        SX1276Write( REG_OPMODE, SX1276->RegOpMode );
00004c  4820              LDR      r0,|L15.208|
00004e  6800              LDR      r0,[r0,#0]  ; SX1276
000050  7841              LDRB     r1,[r0,#1]
000052  2001              MOVS     r0,#1
000054  f7fffffe          BL       SX1276Write
;;;486    
;;;487        // Wait 1ms
;;;488        startTick = GET_TICK_COUNT( );
000058  481e              LDR      r0,|L15.212|
00005a  6806              LDR      r6,[r0,#0]  ; TickCounter
;;;489        while( ( GET_TICK_COUNT( ) - startTick ) < TICK_RATE_MS( 1 ) );  
00005c  bf00              NOP      
                  |L15.94|
00005e  481d              LDR      r0,|L15.212|
000060  6800              LDR      r0,[r0,#0]  ; TickCounter
000062  1b80              SUBS     r0,r0,r6
000064  d0fb              BEQ      |L15.94|
;;;490    
;;;491        // Disable Temperature reading
;;;492        SX1276Read( REG_IMAGECAL, &SX1276->RegImageCal );
000066  481a              LDR      r0,|L15.208|
000068  6801              LDR      r1,[r0,#0]  ; SX1276
00006a  313b              ADDS     r1,r1,#0x3b
00006c  203b              MOVS     r0,#0x3b
00006e  f7fffffe          BL       SX1276Read
;;;493        SX1276->RegImageCal = ( SX1276->RegImageCal & RF_IMAGECAL_TEMPMONITOR_MASK ) | RF_IMAGECAL_TEMPMONITOR_OFF;
000072  4817              LDR      r0,|L15.208|
000074  6800              LDR      r0,[r0,#0]  ; SX1276
000076  f890003b          LDRB     r0,[r0,#0x3b]
00007a  f00000fe          AND      r0,r0,#0xfe
00007e  1c40              ADDS     r0,r0,#1
000080  4913              LDR      r1,|L15.208|
000082  6809              LDR      r1,[r1,#0]  ; SX1276
000084  f881003b          STRB     r0,[r1,#0x3b]
;;;494        SX1276Write( REG_IMAGECAL, SX1276->RegImageCal );
000088  4811              LDR      r0,|L15.208|
00008a  6800              LDR      r0,[r0,#0]  ; SX1276
00008c  f890103b          LDRB     r1,[r0,#0x3b]
000090  203b              MOVS     r0,#0x3b
000092  f7fffffe          BL       SX1276Write
;;;495    
;;;496        // Read temperature
;;;497        SX1276Read( REG_TEMP, &SX1276->RegTemp );
000096  480e              LDR      r0,|L15.208|
000098  6801              LDR      r1,[r0,#0]  ; SX1276
00009a  313c              ADDS     r1,r1,#0x3c
00009c  203c              MOVS     r0,#0x3c
00009e  f7fffffe          BL       SX1276Read
;;;498        
;;;499        temp = SX1276->RegTemp & 0x7F;
0000a2  480b              LDR      r0,|L15.208|
0000a4  6800              LDR      r0,[r0,#0]  ; SX1276
0000a6  f890003c          LDRB     r0,[r0,#0x3c]
0000aa  f000047f          AND      r4,r0,#0x7f
;;;500        
;;;501        if( ( SX1276->RegTemp & 0x80 ) == 0x80 )
0000ae  4808              LDR      r0,|L15.208|
0000b0  6800              LDR      r0,[r0,#0]  ; SX1276
0000b2  f890003c          LDRB     r0,[r0,#0x3c]
0000b6  f0000080          AND      r0,r0,#0x80
0000ba  2880              CMP      r0,#0x80
0000bc  d101              BNE      |L15.194|
;;;502        {
;;;503            temp *= -1;
0000be  4260              RSBS     r0,r4,#0
0000c0  b244              SXTB     r4,r0
                  |L15.194|
;;;504        }
;;;505    
;;;506        // Reload previous Op Mode
;;;507        SX1276Write( REG_OPMODE, previousOpMode );
0000c2  4629              MOV      r1,r5
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       SX1276Write
;;;508    
;;;509        return temp;
0000ca  4620              MOV      r0,r4
;;;510    }
0000cc  bd70              POP      {r4-r6,pc}
;;;511    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L15.208|
                          DCD      SX1276
                  |L15.212|
                          DCD      TickCounter

                          AREA ||i.SX1276FskGetRssiOffset||, CODE, READONLY, ALIGN=2

                  SX1276FskGetRssiOffset PROC
;;;453    
;;;454    int8_t SX1276FskGetRssiOffset( void )
000000  b510              PUSH     {r4,lr}
;;;455    {
;;;456        int8_t offset;
;;;457    		SX1276Read( REG_RSSICONFIG, &SX1276->RegRssiConfig );
000002  480a              LDR      r0,|L16.44|
000004  6801              LDR      r1,[r0,#0]  ; SX1276
000006  310e              ADDS     r1,r1,#0xe
000008  200e              MOVS     r0,#0xe
00000a  f7fffffe          BL       SX1276Read
;;;458        offset = SX1276->RegRssiConfig >> 3;
00000e  4807              LDR      r0,|L16.44|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  7b80              LDRB     r0,[r0,#0xe]
000014  10c4              ASRS     r4,r0,#3
;;;459        if( ( offset & 0x10 ) == 0x10 )
000016  f0040010          AND      r0,r4,#0x10
00001a  2810              CMP      r0,#0x10
00001c  d104              BNE      |L16.40|
;;;460        {
;;;461            offset = ( ~offset & 0x1F );
00001e  201f              MOVS     r0,#0x1f
000020  ea200404          BIC      r4,r0,r4
;;;462            offset += 1;
000024  1c64              ADDS     r4,r4,#1
;;;463            offset = -offset;
000026  4264              RSBS     r4,r4,#0
                  |L16.40|
;;;464        }
;;;465        return offset;
000028  4620              MOV      r0,r4
;;;466    }
00002a  bd10              POP      {r4,pc}
;;;467    
                          ENDP

                  |L16.44|
                          DCD      SX1276

                          AREA ||i.SX1276FskGetTemp||, CODE, READONLY, ALIGN=1

                  SX1276FskGetTemp PROC
;;;516    
;;;517    int8_t SX1276FskGetTemp( int8_t compensationFactor )
000000  b510              PUSH     {r4,lr}
;;;518    {
000002  4604              MOV      r4,r0
;;;519        return SX1276FskGetRawTemp( ) + compensationFactor;
000004  f7fffffe          BL       SX1276FskGetRawTemp
000008  4420              ADD      r0,r0,r4
00000a  b240              SXTB     r0,r0
;;;520    }
00000c  bd10              POP      {r4,pc}
;;;521    
                          ENDP


                          AREA ||i.SX1276FskRxCalibrate||, CODE, READONLY, ALIGN=2

                  SX1276FskRxCalibrate PROC
;;;62     
;;;63     void SX1276FskRxCalibrate( void )
000000  b538              PUSH     {r3-r5,lr}
;;;64     {
;;;65         // the function RadioRxCalibrate is called just after the reset so all register are at their default values
;;;66         uint8_t regPaConfigInitVal;
;;;67         uint32_t initialFreq;
;;;68     
;;;69         // save register values;
;;;70         SX1276Read( REG_PACONFIG, &regPaConfigInitVal );
000002  4669              MOV      r1,sp
000004  2009              MOVS     r0,#9
000006  f7fffffe          BL       SX1276Read
;;;71         initialFreq = SX1276FskGetRFFrequency( );
00000a  f7fffffe          BL       SX1276FskGetRFFrequency
00000e  4604              MOV      r4,r0
;;;72     
;;;73         // Cut the PA just in case
;;;74         SX1276->RegPaConfig = 0x00; // RFO output, power = -1 dBm
000010  2000              MOVS     r0,#0
000012  4924              LDR      r1,|L18.164|
000014  6809              LDR      r1,[r1,#0]  ; SX1276
000016  7248              STRB     r0,[r1,#9]
;;;75         SX1276Write( REG_PACONFIG, SX1276->RegPaConfig );
000018  4822              LDR      r0,|L18.164|
00001a  6800              LDR      r0,[r0,#0]  ; SX1276
00001c  7a41              LDRB     r1,[r0,#9]
00001e  2009              MOVS     r0,#9
000020  f7fffffe          BL       SX1276Write
;;;76     
;;;77         // Set Frequency in HF band
;;;78         SX1276FskSetRFFrequency( 860000000 );
000024  4820              LDR      r0,|L18.168|
000026  f7fffffe          BL       SX1276FskSetRFFrequency
;;;79     
;;;80         // Rx chain re-calibration workaround
;;;81         SX1276Read( REG_IMAGECAL, &SX1276->RegImageCal );    
00002a  481e              LDR      r0,|L18.164|
00002c  6801              LDR      r1,[r0,#0]  ; SX1276
00002e  313b              ADDS     r1,r1,#0x3b
000030  203b              MOVS     r0,#0x3b
000032  f7fffffe          BL       SX1276Read
;;;82         SX1276->RegImageCal = ( SX1276->RegImageCal & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START;
000036  481b              LDR      r0,|L18.164|
000038  6800              LDR      r0,[r0,#0]  ; SX1276
00003a  f890003b          LDRB     r0,[r0,#0x3b]
00003e  f00000bf          AND      r0,r0,#0xbf
000042  f0400040          ORR      r0,r0,#0x40
000046  4917              LDR      r1,|L18.164|
000048  6809              LDR      r1,[r1,#0]  ; SX1276
00004a  f881003b          STRB     r0,[r1,#0x3b]
;;;83         SX1276Write( REG_IMAGECAL, SX1276->RegImageCal );
00004e  4815              LDR      r0,|L18.164|
000050  6800              LDR      r0,[r0,#0]  ; SX1276
000052  f890103b          LDRB     r1,[r0,#0x3b]
000056  203b              MOVS     r0,#0x3b
000058  f7fffffe          BL       SX1276Write
;;;84     
;;;85         SX1276Read( REG_IMAGECAL, &SX1276->RegImageCal );
00005c  4811              LDR      r0,|L18.164|
00005e  6801              LDR      r1,[r0,#0]  ; SX1276
000060  313b              ADDS     r1,r1,#0x3b
000062  203b              MOVS     r0,#0x3b
000064  f7fffffe          BL       SX1276Read
;;;86         // rx_cal_run goes low when calibration in finished
;;;87         while( ( SX1276->RegImageCal & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
000068  e005              B        |L18.118|
                  |L18.106|
;;;88         {
;;;89             SX1276Read( REG_IMAGECAL, &SX1276->RegImageCal );
00006a  480e              LDR      r0,|L18.164|
00006c  6801              LDR      r1,[r0,#0]  ; SX1276
00006e  313b              ADDS     r1,r1,#0x3b
000070  203b              MOVS     r0,#0x3b
000072  f7fffffe          BL       SX1276Read
                  |L18.118|
000076  480b              LDR      r0,|L18.164|
000078  6800              LDR      r0,[r0,#0]            ;87  ; SX1276
00007a  f890003b          LDRB     r0,[r0,#0x3b]         ;87
00007e  f0000020          AND      r0,r0,#0x20           ;87
000082  2820              CMP      r0,#0x20              ;87
000084  d0f1              BEQ      |L18.106|
;;;90         }
;;;91     
;;;92         // reload saved values into the registers
;;;93         SX1276->RegPaConfig = regPaConfigInitVal;
000086  f89d0000          LDRB     r0,[sp,#0]
00008a  4906              LDR      r1,|L18.164|
00008c  6809              LDR      r1,[r1,#0]  ; SX1276
00008e  7248              STRB     r0,[r1,#9]
;;;94         SX1276Write( REG_PACONFIG, SX1276->RegPaConfig );
000090  4804              LDR      r0,|L18.164|
000092  6800              LDR      r0,[r0,#0]  ; SX1276
000094  7a41              LDRB     r1,[r0,#9]
000096  2009              MOVS     r0,#9
000098  f7fffffe          BL       SX1276Write
;;;95     
;;;96         SX1276FskSetRFFrequency( initialFreq );
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       SX1276FskSetRFFrequency
;;;97     
;;;98     }
0000a2  bd38              POP      {r3-r5,pc}
;;;99     
                          ENDP

                  |L18.164|
                          DCD      SX1276
                  |L18.168|
                          DCD      0x33428f00

                          AREA ||i.SX1276FskSetAfcOn||, CODE, READONLY, ALIGN=2

                  SX1276FskSetAfcOn PROC
;;;358    
;;;359    void SX1276FskSetAfcOn( bool enable )
000000  b510              PUSH     {r4,lr}
;;;360    {
000002  4604              MOV      r4,r0
;;;361        SX1276Read( REG_RXCONFIG, &SX1276->RegRxConfig );
000004  480c              LDR      r0,|L19.56|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  310d              ADDS     r1,r1,#0xd
00000a  200d              MOVS     r0,#0xd
00000c  f7fffffe          BL       SX1276Read
;;;362        SX1276->RegRxConfig = ( SX1276->RegRxConfig & RF_RXCONFIG_AFCAUTO_MASK ) | ( enable << 4 );
000010  4809              LDR      r0,|L19.56|
000012  6800              LDR      r0,[r0,#0]  ; SX1276
000014  7b40              LDRB     r0,[r0,#0xd]
000016  f00000ef          AND      r0,r0,#0xef
00001a  ea401004          ORR      r0,r0,r4,LSL #4
00001e  4906              LDR      r1,|L19.56|
000020  6809              LDR      r1,[r1,#0]  ; SX1276
000022  7348              STRB     r0,[r1,#0xd]
;;;363        SX1276Write( REG_RXCONFIG, SX1276->RegRxConfig );
000024  4804              LDR      r0,|L19.56|
000026  6800              LDR      r0,[r0,#0]  ; SX1276
000028  7b41              LDRB     r1,[r0,#0xd]
00002a  200d              MOVS     r0,#0xd
00002c  f7fffffe          BL       SX1276Write
;;;364        FskSettings.AfcOn = enable;
000030  4802              LDR      r0,|L19.60|
000032  7644              STRB     r4,[r0,#0x19]
;;;365    }
000034  bd10              POP      {r4,pc}
;;;366    
                          ENDP

000036  0000              DCW      0x0000
                  |L19.56|
                          DCD      SX1276
                  |L19.60|
                          DCD      FskSettings

                          AREA ||i.SX1276FskSetBitrate||, CODE, READONLY, ALIGN=2

                  SX1276FskSetBitrate PROC
;;;99     
;;;100    void SX1276FskSetBitrate( uint32_t bitrate )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;101    {
000004  4604              MOV      r4,r0
;;;102        FskSettings.Bitrate = bitrate;
000006  4810              LDR      r0,|L20.72|
000008  6044              STR      r4,[r0,#4]  ; FskSettings
;;;103        
;;;104        bitrate = ( uint16_t )( ( double )XTAL_FREQ / ( double )bitrate );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_ui2d
000010  4605              MOV      r5,r0
000012  462a              MOV      r2,r5
000014  460b              MOV      r3,r1
000016  2000              MOVS     r0,#0
000018  490c              LDR      r1,|L20.76|
00001a  f7fffffe          BL       __aeabi_ddiv
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       __aeabi_d2uiz
000024  b284              UXTH     r4,r0
;;;105        SX1276->RegBitrateMsb    = ( uint8_t )( bitrate >> 8 );
000026  0a20              LSRS     r0,r4,#8
000028  4909              LDR      r1,|L20.80|
00002a  6809              LDR      r1,[r1,#0]  ; SX1276
00002c  7088              STRB     r0,[r1,#2]
;;;106        SX1276->RegBitrateLsb    = ( uint8_t )( bitrate & 0xFF );
00002e  4908              LDR      r1,|L20.80|
000030  6809              LDR      r1,[r1,#0]  ; SX1276
000032  70cc              STRB     r4,[r1,#3]
;;;107        SX1276WriteBuffer( REG_BITRATEMSB, &SX1276->RegBitrateMsb, 2 );    
000034  2202              MOVS     r2,#2
000036  4806              LDR      r0,|L20.80|
000038  6801              LDR      r1,[r0,#0]  ; SX1276
00003a  1c89              ADDS     r1,r1,#2
00003c  4610              MOV      r0,r2
00003e  f7fffffe          BL       SX1276WriteBuffer
;;;108    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;109    
                          ENDP

000046  0000              DCW      0x0000
                  |L20.72|
                          DCD      FskSettings
                  |L20.76|
                          DCD      0x417e8480
                  |L20.80|
                          DCD      SX1276

                          AREA ||i.SX1276FskSetDccBw||, CODE, READONLY, ALIGN=2

                  SX1276FskSetDccBw PROC
;;;270    
;;;271    void SX1276FskSetDccBw( uint8_t* reg, uint32_t dccValue, uint32_t rxBwValue )
000000  b57c              PUSH     {r2-r6,lr}
;;;272    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;273        uint8_t mantisse = 0;
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;274        uint8_t exponent = 0;
00000c  9000              STR      r0,[sp,#0]
;;;275        
;;;276        if( reg == &SX1276->RegRxBw )
00000e  4825              LDR      r0,|L21.164|
000010  6800              LDR      r0,[r0,#0]  ; SX1276
000012  3012              ADDS     r0,r0,#0x12
000014  4284              CMP      r4,r0
000016  d103              BNE      |L21.32|
;;;277        {
;;;278            *reg = ( uint8_t )dccValue & 0x60;
000018  f0060060          AND      r0,r6,#0x60
00001c  7020              STRB     r0,[r4,#0]
00001e  e001              B        |L21.36|
                  |L21.32|
;;;279        }
;;;280        else
;;;281        {
;;;282            *reg = 0;
000020  2000              MOVS     r0,#0
000022  7020              STRB     r0,[r4,#0]
                  |L21.36|
;;;283        }
;;;284    
;;;285        SX1276FskComputeRxBwMantExp( rxBwValue, &mantisse, &exponent );
000024  466a              MOV      r2,sp
000026  a901              ADD      r1,sp,#4
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       SX1276FskComputeRxBwMantExp
;;;286    
;;;287        switch( mantisse )
00002e  f89d0004          LDRB     r0,[sp,#4]
000032  2810              CMP      r0,#0x10
000034  d004              BEQ      |L21.64|
000036  2814              CMP      r0,#0x14
000038  d00a              BEQ      |L21.80|
00003a  2818              CMP      r0,#0x18
00003c  d11c              BNE      |L21.120|
00003e  e011              B        |L21.100|
                  |L21.64|
;;;288        {
;;;289            case 16:
;;;290                *reg |= ( uint8_t )( 0x00 | ( exponent & 0x07 ) );
000040  7820              LDRB     r0,[r4,#0]
000042  f89d1000          LDRB     r1,[sp,#0]
000046  f0010107          AND      r1,r1,#7
00004a  4308              ORRS     r0,r0,r1
00004c  7020              STRB     r0,[r4,#0]
;;;291                break;
00004e  e014              B        |L21.122|
                  |L21.80|
;;;292            case 20:
;;;293                *reg |= ( uint8_t )( 0x08 | ( exponent & 0x07 ) );
000050  7820              LDRB     r0,[r4,#0]
000052  f89d1000          LDRB     r1,[sp,#0]
000056  f0010107          AND      r1,r1,#7
00005a  f0410108          ORR      r1,r1,#8
00005e  4308              ORRS     r0,r0,r1
000060  7020              STRB     r0,[r4,#0]
;;;294                break;
000062  e00a              B        |L21.122|
                  |L21.100|
;;;295            case 24:
;;;296                *reg |= ( uint8_t )( 0x10 | ( exponent & 0x07 ) );
000064  7820              LDRB     r0,[r4,#0]
000066  f89d1000          LDRB     r1,[sp,#0]
00006a  f0010107          AND      r1,r1,#7
00006e  f0410110          ORR      r1,r1,#0x10
000072  4308              ORRS     r0,r0,r1
000074  7020              STRB     r0,[r4,#0]
;;;297                break;
000076  e000              B        |L21.122|
                  |L21.120|
;;;298            default:
;;;299                // Something went terribely wrong
;;;300                break;
000078  bf00              NOP      
                  |L21.122|
00007a  bf00              NOP                            ;291
;;;301        }
;;;302    
;;;303        if( reg == &SX1276->RegRxBw )
00007c  4809              LDR      r0,|L21.164|
00007e  6800              LDR      r0,[r0,#0]  ; SX1276
000080  3012              ADDS     r0,r0,#0x12
000082  4284              CMP      r4,r0
000084  d106              BNE      |L21.148|
;;;304        {
;;;305            SX1276Write( REG_RXBW, *reg );
000086  7821              LDRB     r1,[r4,#0]
000088  2012              MOVS     r0,#0x12
00008a  f7fffffe          BL       SX1276Write
;;;306            FskSettings.RxBw = rxBwValue;
00008e  4806              LDR      r0,|L21.168|
000090  6105              STR      r5,[r0,#0x10]  ; FskSettings
000092  e005              B        |L21.160|
                  |L21.148|
;;;307        }
;;;308        else
;;;309        {
;;;310            SX1276Write( REG_AFCBW, *reg );
000094  7821              LDRB     r1,[r4,#0]
000096  2013              MOVS     r0,#0x13
000098  f7fffffe          BL       SX1276Write
;;;311            FskSettings.RxBwAfc = rxBwValue;
00009c  4802              LDR      r0,|L21.168|
00009e  6145              STR      r5,[r0,#0x14]  ; FskSettings
                  |L21.160|
;;;312        }
;;;313    }
0000a0  bd7c              POP      {r2-r6,pc}
;;;314    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L21.164|
                          DCD      SX1276
                  |L21.168|
                          DCD      FskSettings

                          AREA ||i.SX1276FskSetFdev||, CODE, READONLY, ALIGN=2

                  SX1276FskSetFdev PROC
;;;118    
;;;119    void SX1276FskSetFdev( uint32_t fdev )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
000004  4604              MOV      r4,r0
;;;121        FskSettings.Fdev = fdev;
000006  4816              LDR      r0,|L22.96|
000008  6084              STR      r4,[r0,#8]  ; FskSettings
;;;122    
;;;123        SX1276Read( REG_FDEVMSB, &SX1276->RegFdevMsb ); 
00000a  4816              LDR      r0,|L22.100|
00000c  6801              LDR      r1,[r0,#0]  ; SX1276
00000e  1d09              ADDS     r1,r1,#4
000010  2004              MOVS     r0,#4
000012  f7fffffe          BL       SX1276Read
;;;124    
;;;125        fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       __aeabi_ui2d
00001c  4605              MOV      r5,r0
00001e  2200              MOVS     r2,#0
000020  4b11              LDR      r3,|L22.104|
000022  f7fffffe          BL       __aeabi_ddiv
000026  4607              MOV      r7,r0
000028  f7fffffe          BL       __aeabi_d2uiz
00002c  b284              UXTH     r4,r0
;;;126        SX1276->RegFdevMsb    = ( ( SX1276->RegFdevMsb & RF_FDEVMSB_FDEV_MASK ) | ( ( ( uint8_t )( fdev >> 8 ) ) & ~RF_FDEVMSB_FDEV_MASK ) );
00002e  480d              LDR      r0,|L22.100|
000030  6800              LDR      r0,[r0,#0]  ; SX1276
000032  7900              LDRB     r0,[r0,#4]
000034  f00000c0          AND      r0,r0,#0xc0
000038  0a21              LSRS     r1,r4,#8
00003a  f02101c0          BIC      r1,r1,#0xc0
00003e  4308              ORRS     r0,r0,r1
000040  4908              LDR      r1,|L22.100|
000042  6809              LDR      r1,[r1,#0]  ; SX1276
000044  7108              STRB     r0,[r1,#4]
;;;127        SX1276->RegFdevLsb    = ( uint8_t )( fdev & 0xFF );
000046  4907              LDR      r1,|L22.100|
000048  6809              LDR      r1,[r1,#0]  ; SX1276
00004a  714c              STRB     r4,[r1,#5]
;;;128        SX1276WriteBuffer( REG_FDEVMSB, &SX1276->RegFdevMsb, 2 );    
00004c  2202              MOVS     r2,#2
00004e  4805              LDR      r0,|L22.100|
000050  6801              LDR      r1,[r0,#0]  ; SX1276
000052  1d09              ADDS     r1,r1,#4
000054  2004              MOVS     r0,#4
000056  f7fffffe          BL       SX1276WriteBuffer
;;;129    }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;130    
                          ENDP

00005e  0000              DCW      0x0000
                  |L22.96|
                          DCD      FskSettings
                  |L22.100|
                          DCD      SX1276
                  |L22.104|
                          DCD      0x404e8480

                          AREA ||i.SX1276FskSetPAOutput||, CODE, READONLY, ALIGN=2

                  SX1276FskSetPAOutput PROC
;;;413    
;;;414    void SX1276FskSetPAOutput( uint8_t outputPin )
000000  b510              PUSH     {r4,lr}
;;;415    {
000002  4604              MOV      r4,r0
;;;416        SX1276Read( REG_PACONFIG, &SX1276->RegPaConfig );
000004  480a              LDR      r0,|L23.48|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  3109              ADDS     r1,r1,#9
00000a  2009              MOVS     r0,#9
00000c  f7fffffe          BL       SX1276Read
;;;417        SX1276->RegPaConfig = (SX1276->RegPaConfig & RF_PACONFIG_PASELECT_MASK ) | outputPin;
000010  4807              LDR      r0,|L23.48|
000012  6800              LDR      r0,[r0,#0]  ; SX1276
000014  7a40              LDRB     r0,[r0,#9]
000016  f000007f          AND      r0,r0,#0x7f
00001a  4320              ORRS     r0,r0,r4
00001c  4904              LDR      r1,|L23.48|
00001e  6809              LDR      r1,[r1,#0]  ; SX1276
000020  7248              STRB     r0,[r1,#9]
;;;418        SX1276Write( REG_PACONFIG, SX1276->RegPaConfig );
000022  4803              LDR      r0,|L23.48|
000024  6800              LDR      r0,[r0,#0]  ; SX1276
000026  7a41              LDRB     r1,[r0,#9]
000028  2009              MOVS     r0,#9
00002a  f7fffffe          BL       SX1276Write
;;;419    }
00002e  bd10              POP      {r4,pc}
;;;420    
                          ENDP

                  |L23.48|
                          DCD      SX1276

                          AREA ||i.SX1276FskSetPa20dBm||, CODE, READONLY, ALIGN=2

                  SX1276FskSetPa20dBm PROC
;;;387    
;;;388    void SX1276FskSetPa20dBm( bool enale )
000000  b510              PUSH     {r4,lr}
;;;389    {
000002  4604              MOV      r4,r0
;;;390        SX1276Read( REG_PADAC, &SX1276->RegPaDac );
000004  4813              LDR      r0,|L24.84|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  314d              ADDS     r1,r1,#0x4d
00000a  204d              MOVS     r0,#0x4d
00000c  f7fffffe          BL       SX1276Read
;;;391        SX1276Read( REG_PACONFIG, &SX1276->RegPaConfig );
000010  4810              LDR      r0,|L24.84|
000012  6801              LDR      r1,[r0,#0]  ; SX1276
000014  3109              ADDS     r1,r1,#9
000016  2009              MOVS     r0,#9
000018  f7fffffe          BL       SX1276Read
;;;392    
;;;393        if( ( SX1276->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
00001c  480d              LDR      r0,|L24.84|
00001e  6800              LDR      r0,[r0,#0]  ; SX1276
000020  7a40              LDRB     r0,[r0,#9]
000022  f0000080          AND      r0,r0,#0x80
000026  2880              CMP      r0,#0x80
000028  d107              BNE      |L24.58|
;;;394        {    
;;;395            if( enale == true )
00002a  2c01              CMP      r4,#1
00002c  d10a              BNE      |L24.68|
;;;396            {
;;;397                SX1276->RegPaDac = 0x87;
00002e  2087              MOVS     r0,#0x87
000030  4908              LDR      r1,|L24.84|
000032  6809              LDR      r1,[r1,#0]  ; SX1276
000034  f881004d          STRB     r0,[r1,#0x4d]
000038  e004              B        |L24.68|
                  |L24.58|
;;;398            }
;;;399        }
;;;400        else
;;;401        {
;;;402            SX1276->RegPaDac = 0x84;
00003a  2084              MOVS     r0,#0x84
00003c  4905              LDR      r1,|L24.84|
00003e  6809              LDR      r1,[r1,#0]  ; SX1276
000040  f881004d          STRB     r0,[r1,#0x4d]
                  |L24.68|
;;;403        }
;;;404        SX1276Write( REG_PADAC, SX1276->RegPaDac );
000044  4803              LDR      r0,|L24.84|
000046  6800              LDR      r0,[r0,#0]  ; SX1276
000048  f890104d          LDRB     r1,[r0,#0x4d]
00004c  204d              MOVS     r0,#0x4d
00004e  f7fffffe          BL       SX1276Write
;;;405    }
000052  bd10              POP      {r4,pc}
;;;406    
                          ENDP

                  |L24.84|
                          DCD      SX1276

                          AREA ||i.SX1276FskSetPaRamp||, CODE, READONLY, ALIGN=2

                  SX1276FskSetPaRamp PROC
;;;427    
;;;428    void SX1276FskSetPaRamp( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;429    {
000002  4604              MOV      r4,r0
;;;430        SX1276Read( REG_PARAMP, &SX1276->RegPaRamp );
000004  480b              LDR      r0,|L25.52|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  310a              ADDS     r1,r1,#0xa
00000a  200a              MOVS     r0,#0xa
00000c  f7fffffe          BL       SX1276Read
;;;431        SX1276->RegPaRamp = ( SX1276->RegPaRamp & RF_PARAMP_MASK ) | ( value & ~RF_PARAMP_MASK );
000010  4808              LDR      r0,|L25.52|
000012  6800              LDR      r0,[r0,#0]  ; SX1276
000014  7a80              LDRB     r0,[r0,#0xa]
000016  f00000f0          AND      r0,r0,#0xf0
00001a  f02401f0          BIC      r1,r4,#0xf0
00001e  4308              ORRS     r0,r0,r1
000020  4904              LDR      r1,|L25.52|
000022  6809              LDR      r1,[r1,#0]  ; SX1276
000024  7288              STRB     r0,[r1,#0xa]
;;;432        SX1276Write( REG_PARAMP, SX1276->RegPaRamp );
000026  4803              LDR      r0,|L25.52|
000028  6800              LDR      r0,[r0,#0]  ; SX1276
00002a  7a81              LDRB     r1,[r0,#0xa]
00002c  200a              MOVS     r0,#0xa
00002e  f7fffffe          BL       SX1276Write
;;;433    }
000032  bd10              POP      {r4,pc}
;;;434    
                          ENDP

                  |L25.52|
                          DCD      SX1276

                          AREA ||i.SX1276FskSetPacketCrcOn||, CODE, READONLY, ALIGN=2

                  SX1276FskSetPacketCrcOn PROC
;;;343    
;;;344    void SX1276FskSetPacketCrcOn( bool enable )
000000  b510              PUSH     {r4,lr}
;;;345    {
000002  4604              MOV      r4,r0
;;;346        SX1276Read( REG_PACKETCONFIG1, &SX1276->RegPacketConfig1 );
000004  480d              LDR      r0,|L26.60|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  3130              ADDS     r1,r1,#0x30
00000a  2030              MOVS     r0,#0x30
00000c  f7fffffe          BL       SX1276Read
;;;347        SX1276->RegPacketConfig1 = ( SX1276->RegPacketConfig1 & RF_PACKETCONFIG1_CRC_MASK ) | ( enable << 4 );
000010  480a              LDR      r0,|L26.60|
000012  6800              LDR      r0,[r0,#0]  ; SX1276
000014  f8900030          LDRB     r0,[r0,#0x30]
000018  f00000ef          AND      r0,r0,#0xef
00001c  ea401004          ORR      r0,r0,r4,LSL #4
000020  4906              LDR      r1,|L26.60|
000022  6809              LDR      r1,[r1,#0]  ; SX1276
000024  f8810030          STRB     r0,[r1,#0x30]
;;;348        SX1276Write( REG_PACKETCONFIG1, SX1276->RegPacketConfig1 );
000028  4804              LDR      r0,|L26.60|
00002a  6800              LDR      r0,[r0,#0]  ; SX1276
00002c  f8901030          LDRB     r1,[r0,#0x30]
000030  2030              MOVS     r0,#0x30
000032  f7fffffe          BL       SX1276Write
;;;349        FskSettings.CrcOn = enable;
000036  4802              LDR      r0,|L26.64|
000038  7604              STRB     r4,[r0,#0x18]
;;;350    }
00003a  bd10              POP      {r4,pc}
;;;351    
                          ENDP

                  |L26.60|
                          DCD      SX1276
                  |L26.64|
                          DCD      FskSettings

                          AREA ||i.SX1276FskSetPayloadLength||, CODE, READONLY, ALIGN=2

                  SX1276FskSetPayloadLength PROC
;;;373    
;;;374    void SX1276FskSetPayloadLength( uint8_t value )
000000  b510              PUSH     {r4,lr}
;;;375    {
000002  4604              MOV      r4,r0
;;;376        SX1276->RegPayloadLength = value;
000004  4806              LDR      r0,|L27.32|
000006  6800              LDR      r0,[r0,#0]  ; SX1276
000008  f8804032          STRB     r4,[r0,#0x32]
;;;377        SX1276Write( REG_PAYLOADLENGTH, SX1276->RegPayloadLength );
00000c  4804              LDR      r0,|L27.32|
00000e  6800              LDR      r0,[r0,#0]  ; SX1276
000010  f8901032          LDRB     r1,[r0,#0x32]
000014  2032              MOVS     r0,#0x32
000016  f7fffffe          BL       SX1276Write
;;;378        FskSettings.PayloadLength = value;
00001a  4802              LDR      r0,|L27.36|
00001c  7684              STRB     r4,[r0,#0x1a]
;;;379    }
00001e  bd10              POP      {r4,pc}
;;;380    
                          ENDP

                  |L27.32|
                          DCD      SX1276
                  |L27.36|
                          DCD      FskSettings

                          AREA ||i.SX1276FskSetRFFrequency||, CODE, READONLY, ALIGN=2

                  SX1276FskSetRFFrequency PROC
;;;42     
;;;43     void SX1276FskSetRFFrequency( uint32_t freq )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;44     {
000004  4604              MOV      r4,r0
;;;45         FskSettings.RFFrequency = freq;
000006  4811              LDR      r0,|L28.76|
000008  6004              STR      r4,[r0,#0]  ; FskSettings
;;;46     
;;;47         freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       __aeabi_ui2d
000010  4605              MOV      r5,r0
000012  2200              MOVS     r2,#0
000014  4b0e              LDR      r3,|L28.80|
000016  f7fffffe          BL       __aeabi_ddiv
00001a  4607              MOV      r7,r0
00001c  f7fffffe          BL       __aeabi_d2uiz
000020  4604              MOV      r4,r0
;;;48         SX1276->RegFrfMsb = ( uint8_t )( ( freq >> 16 ) & 0xFF );
000022  0c20              LSRS     r0,r4,#16
000024  490b              LDR      r1,|L28.84|
000026  6809              LDR      r1,[r1,#0]  ; SX1276
000028  7188              STRB     r0,[r1,#6]
;;;49         SX1276->RegFrfMid = ( uint8_t )( ( freq >> 8 ) & 0xFF );
00002a  0a20              LSRS     r0,r4,#8
00002c  4909              LDR      r1,|L28.84|
00002e  6809              LDR      r1,[r1,#0]  ; SX1276
000030  71c8              STRB     r0,[r1,#7]
;;;50         SX1276->RegFrfLsb = ( uint8_t )( freq & 0xFF );
000032  4908              LDR      r1,|L28.84|
000034  6809              LDR      r1,[r1,#0]  ; SX1276
000036  720c              STRB     r4,[r1,#8]
;;;51         SX1276WriteBuffer( REG_FRFMSB, &SX1276->RegFrfMsb, 3 );
000038  2203              MOVS     r2,#3
00003a  4806              LDR      r0,|L28.84|
00003c  6801              LDR      r1,[r0,#0]  ; SX1276
00003e  1d89              ADDS     r1,r1,#6
000040  2006              MOVS     r0,#6
000042  f7fffffe          BL       SX1276WriteBuffer
;;;52     }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;53     
                          ENDP

00004a  0000              DCW      0x0000
                  |L28.76|
                          DCD      FskSettings
                  |L28.80|
                          DCD      0x404e8480
                  |L28.84|
                          DCD      SX1276

                          AREA ||i.SX1276FskSetRFPower||, CODE, READONLY, ALIGN=2

                  SX1276FskSetRFPower PROC
;;;139    
;;;140    void SX1276FskSetRFPower( int8_t power )
000000  b510              PUSH     {r4,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142        SX1276Read( REG_PACONFIG, &SX1276->RegPaConfig );
000004  483d              LDR      r0,|L29.252|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  3109              ADDS     r1,r1,#9
00000a  2009              MOVS     r0,#9
00000c  f7fffffe          BL       SX1276Read
;;;143        SX1276Read( REG_PADAC, &SX1276->RegPaDac );
000010  483a              LDR      r0,|L29.252|
000012  6801              LDR      r1,[r0,#0]  ; SX1276
000014  314d              ADDS     r1,r1,#0x4d
000016  204d              MOVS     r0,#0x4d
000018  f7fffffe          BL       SX1276Read
;;;144        
;;;145        if( ( SX1276->RegPaConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
00001c  4837              LDR      r0,|L29.252|
00001e  6800              LDR      r0,[r0,#0]  ; SX1276
000020  7a40              LDRB     r0,[r0,#9]
000022  f0000080          AND      r0,r0,#0x80
000026  2880              CMP      r0,#0x80
000028  d141              BNE      |L29.174|
;;;146        {
;;;147            if( ( SX1276->RegPaDac & 0x87 ) == 0x87 )
00002a  4834              LDR      r0,|L29.252|
00002c  6800              LDR      r0,[r0,#0]  ; SX1276
00002e  f890004d          LDRB     r0,[r0,#0x4d]
000032  f0000087          AND      r0,r0,#0x87
000036  2887              CMP      r0,#0x87
000038  d11c              BNE      |L29.116|
;;;148            {
;;;149                if( power < 5 )
00003a  2c05              CMP      r4,#5
00003c  da00              BGE      |L29.64|
;;;150                {
;;;151                    power = 5;
00003e  2405              MOVS     r4,#5
                  |L29.64|
;;;152                }
;;;153                if( power > 20 )
000040  2c14              CMP      r4,#0x14
000042  dd00              BLE      |L29.70|
;;;154                {
;;;155                    power = 20;
000044  2414              MOVS     r4,#0x14
                  |L29.70|
;;;156                }
;;;157                SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
000046  482d              LDR      r0,|L29.252|
000048  6800              LDR      r0,[r0,#0]  ; SX1276
00004a  7a40              LDRB     r0,[r0,#9]
00004c  f000008f          AND      r0,r0,#0x8f
000050  f0400070          ORR      r0,r0,#0x70
000054  4929              LDR      r1,|L29.252|
000056  6809              LDR      r1,[r1,#0]  ; SX1276
000058  7248              STRB     r0,[r1,#9]
;;;158                SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
00005a  4828              LDR      r0,|L29.252|
00005c  6800              LDR      r0,[r0,#0]  ; SX1276
00005e  7a40              LDRB     r0,[r0,#9]
000060  f00000f0          AND      r0,r0,#0xf0
000064  1f61              SUBS     r1,r4,#5
000066  f001010f          AND      r1,r1,#0xf
00006a  4308              ORRS     r0,r0,r1
00006c  4923              LDR      r1,|L29.252|
00006e  6809              LDR      r1,[r1,#0]  ; SX1276
000070  7248              STRB     r0,[r1,#9]
000072  e03a              B        |L29.234|
                  |L29.116|
;;;159            }
;;;160            else
;;;161            {
;;;162                if( power < 2 )
000074  2c02              CMP      r4,#2
000076  da00              BGE      |L29.122|
;;;163                {
;;;164                    power = 2;
000078  2402              MOVS     r4,#2
                  |L29.122|
;;;165                }
;;;166                if( power > 17 )
00007a  2c11              CMP      r4,#0x11
00007c  dd00              BLE      |L29.128|
;;;167                {
;;;168                    power = 17;
00007e  2411              MOVS     r4,#0x11
                  |L29.128|
;;;169                }
;;;170                SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
000080  481e              LDR      r0,|L29.252|
000082  6800              LDR      r0,[r0,#0]  ; SX1276
000084  7a40              LDRB     r0,[r0,#9]
000086  f000008f          AND      r0,r0,#0x8f
00008a  f0400070          ORR      r0,r0,#0x70
00008e  491b              LDR      r1,|L29.252|
000090  6809              LDR      r1,[r1,#0]  ; SX1276
000092  7248              STRB     r0,[r1,#9]
;;;171                SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
000094  4819              LDR      r0,|L29.252|
000096  6800              LDR      r0,[r0,#0]  ; SX1276
000098  7a40              LDRB     r0,[r0,#9]
00009a  f00000f0          AND      r0,r0,#0xf0
00009e  1ea1              SUBS     r1,r4,#2
0000a0  f001010f          AND      r1,r1,#0xf
0000a4  4308              ORRS     r0,r0,r1
0000a6  4915              LDR      r1,|L29.252|
0000a8  6809              LDR      r1,[r1,#0]  ; SX1276
0000aa  7248              STRB     r0,[r1,#9]
0000ac  e01d              B        |L29.234|
                  |L29.174|
;;;172            }
;;;173        }
;;;174        else
;;;175        {
;;;176            if( power < -1 )
0000ae  f1b43fff          CMP      r4,#0xffffffff
0000b2  da01              BGE      |L29.184|
;;;177            {
;;;178                power = -1;
0000b4  f04f34ff          MOV      r4,#0xffffffff
                  |L29.184|
;;;179            }
;;;180            if( power > 14 )
0000b8  2c0e              CMP      r4,#0xe
0000ba  dd00              BLE      |L29.190|
;;;181            {
;;;182                power = 14;
0000bc  240e              MOVS     r4,#0xe
                  |L29.190|
;;;183            }
;;;184            SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_MAX_POWER_MASK ) | 0x70;
0000be  480f              LDR      r0,|L29.252|
0000c0  6800              LDR      r0,[r0,#0]  ; SX1276
0000c2  7a40              LDRB     r0,[r0,#9]
0000c4  f000008f          AND      r0,r0,#0x8f
0000c8  f0400070          ORR      r0,r0,#0x70
0000cc  490b              LDR      r1,|L29.252|
0000ce  6809              LDR      r1,[r1,#0]  ; SX1276
0000d0  7248              STRB     r0,[r1,#9]
;;;185            SX1276->RegPaConfig = ( SX1276->RegPaConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
0000d2  480a              LDR      r0,|L29.252|
0000d4  6800              LDR      r0,[r0,#0]  ; SX1276
0000d6  7a40              LDRB     r0,[r0,#9]
0000d8  f00000f0          AND      r0,r0,#0xf0
0000dc  1c61              ADDS     r1,r4,#1
0000de  f001010f          AND      r1,r1,#0xf
0000e2  4308              ORRS     r0,r0,r1
0000e4  4905              LDR      r1,|L29.252|
0000e6  6809              LDR      r1,[r1,#0]  ; SX1276
0000e8  7248              STRB     r0,[r1,#9]
                  |L29.234|
;;;186        }
;;;187        SX1276Write( REG_PACONFIG, SX1276->RegPaConfig );
0000ea  4804              LDR      r0,|L29.252|
0000ec  6800              LDR      r0,[r0,#0]  ; SX1276
0000ee  7a41              LDRB     r1,[r0,#9]
0000f0  2009              MOVS     r0,#9
0000f2  f7fffffe          BL       SX1276Write
;;;188        FskSettings.Power = power;
0000f6  4802              LDR      r0,|L29.256|
0000f8  7304              STRB     r4,[r0,#0xc]
;;;189    }
0000fa  bd10              POP      {r4,pc}
;;;190    
                          ENDP

                  |L29.252|
                          DCD      SX1276
                  |L29.256|
                          DCD      FskSettings

                          AREA ||i.SX1276FskSetRssiOffset||, CODE, READONLY, ALIGN=2

                  SX1276FskSetRssiOffset PROC
;;;440    
;;;441    void SX1276FskSetRssiOffset( int8_t offset )
000000  b510              PUSH     {r4,lr}
;;;442    {
000002  4604              MOV      r4,r0
;;;443        SX1276Read( REG_RSSICONFIG, &SX1276->RegRssiConfig );
000004  480e              LDR      r0,|L30.64|
000006  6801              LDR      r1,[r0,#0]  ; SX1276
000008  310e              ADDS     r1,r1,#0xe
00000a  200e              MOVS     r0,#0xe
00000c  f7fffffe          BL       SX1276Read
;;;444        if( offset < 0 )
000010  2c00              CMP      r4,#0
000012  da04              BGE      |L30.30|
;;;445        {
;;;446            offset = ( ~offset & 0x1F );
000014  201f              MOVS     r0,#0x1f
000016  ea200404          BIC      r4,r0,r4
;;;447            offset += 1;
00001a  1c64              ADDS     r4,r4,#1
;;;448            offset = -offset;
00001c  4264              RSBS     r4,r4,#0
                  |L30.30|
;;;449        }
;;;450        SX1276->RegRssiConfig |= ( uint8_t )( ( offset & 0x1F ) << 3 );
00001e  4808              LDR      r0,|L30.64|
000020  6800              LDR      r0,[r0,#0]  ; SX1276
000022  7b80              LDRB     r0,[r0,#0xe]
000024  f004011f          AND      r1,r4,#0x1f
000028  ea4000c1          ORR      r0,r0,r1,LSL #3
00002c  4904              LDR      r1,|L30.64|
00002e  6809              LDR      r1,[r1,#0]  ; SX1276
000030  7388              STRB     r0,[r1,#0xe]
;;;451        SX1276Write( REG_RSSICONFIG, SX1276->RegRssiConfig );
000032  4803              LDR      r0,|L30.64|
000034  6800              LDR      r0,[r0,#0]  ; SX1276
000036  7b81              LDRB     r1,[r0,#0xe]
000038  200e              MOVS     r0,#0xe
00003a  f7fffffe          BL       SX1276Write
;;;452    }
00003e  bd10              POP      {r4,pc}
;;;453    
                          ENDP

                  |L30.64|
                          DCD      SX1276
