; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\bsp_usart2.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\bsp_usart2.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\bsp_usart2.crf ..\BSP\BSP_USART2\BSP_USART2.c]
                          THUMB

                          AREA ||i.USART2SendBuffer||, CODE, READONLY, ALIGN=1

                  USART2SendBuffer PROC
;;;134    
;;;135    void USART2SendBuffer(unsigned char *buffer, uint16_t count) 
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;137    	while (count--) {    
000006  e003              B        |L1.16|
                  |L1.8|
;;;138    		USART2SendChar(*buffer);    
000008  7820              LDRB     r0,[r4,#0]
00000a  f7fffffe          BL       USART2SendChar
;;;139    		buffer++;    
00000e  1c64              ADDS     r4,r4,#1
                  |L1.16|
000010  1e28              SUBS     r0,r5,#0              ;137
000012  f1a50101          SUB      r1,r5,#1              ;137
000016  b28d              UXTH     r5,r1                 ;137
000018  d1f6              BNE      |L1.8|
;;;140    	}
;;;141    }
00001a  bd70              POP      {r4-r6,pc}
;;;142    
                          ENDP


                          AREA ||i.USART2SendChar||, CODE, READONLY, ALIGN=2

                  USART2SendChar PROC
;;;128    
;;;129    void USART2SendChar(unsigned char data) 
000000  b510              PUSH     {r4,lr}
;;;130    {  
000002  4604              MOV      r4,r0
;;;131        USART_SendData(USART2_USART, data);  
000004  4621              MOV      r1,r4
000006  4805              LDR      r0,|L2.28|
000008  f7fffffe          BL       USART_SendData
;;;132        while (USART_GetFlagStatus(USART2_USART, USART_FLAG_TC) == RESET){}  
00000c  bf00              NOP      
                  |L2.14|
00000e  2140              MOVS     r1,#0x40
000010  4802              LDR      r0,|L2.28|
000012  f7fffffe          BL       USART_GetFlagStatus
000016  2800              CMP      r0,#0
000018  d0f9              BEQ      |L2.14|
;;;133    } 
00001a  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L2.28|
                          DCD      0x40004400

                          AREA ||i.USART2Stop||, CODE, READONLY, ALIGN=2

                  USART2Stop PROC
;;;123    
;;;124    void USART2Stop(void) 
000000  b510              PUSH     {r4,lr}
;;;125    {
;;;126    	USART_DeInit(USART2_USART);	
000002  4802              LDR      r0,|L3.12|
000004  f7fffffe          BL       USART_DeInit
;;;127    }
000008  bd10              POP      {r4,pc}
;;;128    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40004400

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;142    
;;;143    void USART2_USART_IRQHandler()
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145    	unsigned char data;
;;;146    	if (USART_GetITStatus(USART2_USART, USART_IT_RXNE) != RESET) {
000002  f2405125          MOV      r1,#0x525
000006  4807              LDR      r0,|L4.36|
000008  f7fffffe          BL       USART_GetITStatus
00000c  b118              CBZ      r0,|L4.22|
;;;147     
;;;148    		data = USART_ReceiveData(USART2_USART);
00000e  4805              LDR      r0,|L4.36|
000010  f7fffffe          BL       USART_ReceiveData
000014  b2c4              UXTB     r4,r0
                  |L4.22|
;;;149    
;;;150    	}
;;;151    	USART_ClearITPendingBit(USART1, USART_IT_RXNE );
000016  f2405125          MOV      r1,#0x525
00001a  4803              LDR      r0,|L4.40|
00001c  f7fffffe          BL       USART_ClearITPendingBit
;;;152    }
000020  bd10              POP      {r4,pc}
;;;153    /// 重定向c库函数printf到USARTx
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      0x40004400
                  |L4.40|
                          DCD      0x40013800

                          AREA ||i.USART2_Init||, CODE, READONLY, ALIGN=2

                  USART2_Init PROC
;;;23     */
;;;24     void USART2_Init(uint32_t baud) 
000000  b510              PUSH     {r4,lr}
;;;25     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;26     //	GPIO_InitTypeDef   GPIO_InitStructure;
;;;27     //	USART_InitTypeDef  USART_InitStructure;	
;;;28     //	NVIC_InitTypeDef 	NVIC_InitStructure;
;;;29     //	
;;;30     //	USART_DeInit(USART2_USART);
;;;31     //	RCC_APB2PeriphClockCmd(USART2_RCC_APB2Periph, ENABLE);
;;;32     //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD , ENABLE);
;;;33     //	RCC_APB1PeriphClockCmd(USART2_RCC_APB1Periph_USART2, ENABLE);
;;;34     //	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
;;;35     //	
;;;36     //	
;;;37     //	GPIO_InitStructure.GPIO_Pin = USART2_GPIO_PIN_TX;
;;;38     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;39     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
;;;40     //	GPIO_Init(USART2_GPIO, &GPIO_InitStructure);
;;;41     
;;;42     //	GPIO_InitStructure.GPIO_Pin = USART2_GPIO_PIN_RX;
;;;43     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
;;;44     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;45     //	GPIO_Init(USART2_GPIO, &GPIO_InitStructure);
;;;46     //	
;;;47     //	GPIO_InitStructure.GPIO_Pin = USART2_GPIO_PIN_CTR;
;;;48     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;49     //	GPIO_Init(USART2_GPIO_CTR, &GPIO_InitStructure);  //初始化PB8
;;;50     //	
;;;51     //	GPIO_SetBits(USART2_GPIO_CTR  , USART2_GPIO_PIN_CTR);
;;;52     //	
;;;53     //	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);//开启中断
;;;54     //	USART_ITConfig(USART2, USART_IT_IDLE , ENABLE);//一定要单独设置，;USART_IT_IDLE空闲中断
;;;55     //	USART_InitStructure.USART_BaudRate = baud;
;;;56     //	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;57     //	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;58     //	USART_InitStructure.USART_Parity = USART_Parity_No;
;;;59     //	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;60     //	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;61     //	USART_Init(USART2_USART, &USART_InitStructure);
;;;62     //    USART_GetFlagStatus(USART2_USART, USART_FLAG_TC); 
;;;63     //	USART_ITConfig(USART2_USART, USART_IT_RXNE, ENABLE);
;;;64     //			 
;;;65     //	
;;;66     //	USART_Cmd(USART2_USART, ENABLE);
;;;67     //	USART_ClearFlag(USART2_USART, USART_FLAG_TC);
;;;68     //	
;;;69     //	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
;;;70     //	NVIC_InitStructure.NVIC_IRQChannel = USART2_USART_IRQn;
;;;71     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
;;;72     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;73     //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;74     //	NVIC_Init(&NVIC_InitStructure);
;;;75     //	
;;;76     //	GPIO_InitStructure.GPIO_Pin = USART2_GPIO_PIN_CTR;
;;;77     //	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
;;;78     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;79     //	GPIO_Init(USART2_GPIO_CTR, &GPIO_InitStructure);  
;;;80     	GPIO_InitTypeDef GPIO_InitStructure;
;;;81     	USART_InitTypeDef USART_InitStructure;
;;;82     	NVIC_InitTypeDef NVIC_InitStructure;        
;;;83     
;;;84     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE );
000006  2101              MOVS     r1,#1
000008  2004              MOVS     r0,#4
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;85     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE );
00000e  2101              MOVS     r1,#1
000010  0448              LSLS     r0,r1,#17
000012  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;86     
;;;87     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2; //USART2 TX；
000016  2004              MOVS     r0,#4
000018  f8ad0014          STRH     r0,[sp,#0x14]
;;;88     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; //复用推挽输出；
00001c  2018              MOVS     r0,#0x18
00001e  f88d0017          STRB     r0,[sp,#0x17]
;;;89     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2003              MOVS     r0,#3
000024  f88d0016          STRB     r0,[sp,#0x16]
;;;90     	GPIO_Init(GPIOA, &GPIO_InitStructure); //端口A；
000028  a905              ADD      r1,sp,#0x14
00002a  4825              LDR      r0,|L5.192|
00002c  f7fffffe          BL       GPIO_Init
;;;91     		
;;;92     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3; //USART2 RX；
000030  2008              MOVS     r0,#8
000032  f8ad0014          STRH     r0,[sp,#0x14]
;;;93     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING; //浮空输入；
000036  2004              MOVS     r0,#4
000038  f88d0017          STRB     r0,[sp,#0x17]
;;;94     	GPIO_Init(GPIOA, &GPIO_InitStructure); //端口A；
00003c  a905              ADD      r1,sp,#0x14
00003e  4820              LDR      r0,|L5.192|
000040  f7fffffe          BL       GPIO_Init
;;;95     
;;;96     	USART_InitStructure.USART_BaudRate = baud; //波特率；
000044  9401              STR      r4,[sp,#4]
;;;97     	USART_InitStructure.USART_WordLength = USART_WordLength_8b; //数据位8位；
000046  2000              MOVS     r0,#0
000048  f8ad0008          STRH     r0,[sp,#8]
;;;98     	USART_InitStructure.USART_StopBits = USART_StopBits_1; //停止位1位；
00004c  f8ad000a          STRH     r0,[sp,#0xa]
;;;99     	USART_InitStructure.USART_Parity = USART_Parity_No ; //无校验位；
000050  f8ad000c          STRH     r0,[sp,#0xc]
;;;100    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000054  f8ad0010          STRH     r0,[sp,#0x10]
;;;101    	//无硬件流控；
;;;102    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000058  200c              MOVS     r0,#0xc
00005a  f8ad000e          STRH     r0,[sp,#0xe]
;;;103    	//收发模式；
;;;104    	USART_Init(USART2, &USART_InitStructure);//配置串口参数
00005e  a901              ADD      r1,sp,#4
000060  4818              LDR      r0,|L5.196|
000062  f7fffffe          BL       USART_Init
;;;105    
;;;106    	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2); //设置中断组，4位抢占优先级，4位响应优先级
000066  f44f60a0          MOV      r0,#0x500
00006a  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;107    
;;;108    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn; //中断号
00006e  2026              MOVS     r0,#0x26
000070  f88d0000          STRB     r0,[sp,#0]
;;;109    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0; //抢占优先级
000074  2000              MOVS     r0,#0
000076  f88d0001          STRB     r0,[sp,#1]
;;;110    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0; //响应优先级
00007a  f88d0002          STRB     r0,[sp,#2]
;;;111    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00007e  2001              MOVS     r0,#1
000080  f88d0003          STRB     r0,[sp,#3]
;;;112    	NVIC_Init(&NVIC_InitStructure);
000084  4668              MOV      r0,sp
000086  f7fffffe          BL       NVIC_Init
;;;113    
;;;114    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
00008a  2201              MOVS     r2,#1
00008c  f2405125          MOV      r1,#0x525
000090  480c              LDR      r0,|L5.196|
000092  f7fffffe          BL       USART_ITConfig
;;;115    	USART_Cmd(USART2, ENABLE); //使能串口；
000096  2101              MOVS     r1,#1
000098  480a              LDR      r0,|L5.196|
00009a  f7fffffe          BL       USART_Cmd
;;;116    	
;;;117    	GPIO_InitStructure.GPIO_Pin = USART2_GPIO_PIN_CTR;
00009e  2002              MOVS     r0,#2
0000a0  f8ad0014          STRH     r0,[sp,#0x14]
;;;118    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
0000a4  2010              MOVS     r0,#0x10
0000a6  f88d0017          STRB     r0,[sp,#0x17]
;;;119    	GPIO_Init(USART2_GPIO_CTR, &GPIO_InitStructure);  //初始化PB8
0000aa  a905              ADD      r1,sp,#0x14
0000ac  4804              LDR      r0,|L5.192|
0000ae  f7fffffe          BL       GPIO_Init
;;;120    
;;;121    	GPIO_SetBits(USART2_GPIO_CTR  , USART2_GPIO_PIN_CTR);
0000b2  2102              MOVS     r1,#2
0000b4  4802              LDR      r0,|L5.192|
0000b6  f7fffffe          BL       GPIO_SetBits
;;;122    }
0000ba  b006              ADD      sp,sp,#0x18
0000bc  bd10              POP      {r4,pc}
;;;123    
                          ENDP

0000be  0000              DCW      0x0000
                  |L5.192|
                          DCD      0x40010800
                  |L5.196|
                          DCD      0x40004400

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;167    /// 重定向c库函数scanf到USARTx
;;;168    int fgetc(FILE *f)
000000  b510              PUSH     {r4,lr}
;;;169    {
000002  4604              MOV      r4,r0
;;;170    	RS4851_TX;
000004  2001              MOVS     r0,#1
000006  4906              LDR      r1,|L6.32|
000008  6008              STR      r0,[r1,#0]
;;;171    		/* 等待串口x输入数据 */
;;;172    		while (USART_GetFlagStatus(USED_COM_NUMBER, USART_FLAG_RXNE) == RESET);
00000a  bf00              NOP      
                  |L6.12|
00000c  2120              MOVS     r1,#0x20
00000e  4805              LDR      r0,|L6.36|
000010  f7fffffe          BL       USART_GetFlagStatus
000014  2800              CMP      r0,#0
000016  d0f9              BEQ      |L6.12|
;;;173    //	RS4851_RX;
;;;174    		return (int)USART_ReceiveData(USED_COM_NUMBER);
000018  4802              LDR      r0,|L6.36|
00001a  f7fffffe          BL       USART_ReceiveData
;;;175    }
00001e  bd10              POP      {r4,pc}
;;;176    ///********** (C) COPYRIGHT DIY嵌入式开发工作室 *****END OF FILE****************/
                          ENDP

                  |L6.32|
                          DCD      0x42210184
                  |L6.36|
                          DCD      0x40004400

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;153    /// 重定向c库函数printf到USARTx
;;;154    int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;156    
;;;157    RS4851_TX;
000006  2001              MOVS     r0,#1
000008  4907              LDR      r1,|L7.40|
00000a  6008              STR      r0,[r1,#0]
;;;158    		/* 发送一个字节数据到USARTx */
;;;159    		USART_SendData(USED_COM_NUMBER, (uint8_t) ch);
00000c  b2e1              UXTB     r1,r4
00000e  4807              LDR      r0,|L7.44|
000010  f7fffffe          BL       USART_SendData
;;;160    		
;;;161    		/* 等待发送完毕 */
;;;162    		while (USART_GetFlagStatus(USED_COM_NUMBER, USART_FLAG_TC) == RESET);		
000014  bf00              NOP      
                  |L7.22|
000016  2140              MOVS     r1,#0x40
000018  4804              LDR      r0,|L7.44|
00001a  f7fffffe          BL       USART_GetFlagStatus
00001e  2800              CMP      r0,#0
000020  d0f9              BEQ      |L7.22|
;;;163    //RS4851_RX;
;;;164    		return (ch);
000022  4620              MOV      r0,r4
;;;165    }
000024  bd70              POP      {r4-r6,pc}
;;;166    
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      0x42210184
                  |L7.44|
                          DCD      0x40004400

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Buffer
                          %        30

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  crc16Tab
000000  00001021          DCW      0x0000,0x1021
000004  20423063          DCW      0x2042,0x3063
000008  408450a5          DCW      0x4084,0x50a5
00000c  60c670e7          DCW      0x60c6,0x70e7
000010  81089129          DCW      0x8108,0x9129
000014  a14ab16b          DCW      0xa14a,0xb16b
000018  c18cd1ad          DCW      0xc18c,0xd1ad
00001c  e1cef1ef          DCW      0xe1ce,0xf1ef
000020  12310210          DCW      0x1231,0x0210
000024  32732252          DCW      0x3273,0x2252
000028  52b54294          DCW      0x52b5,0x4294
00002c  72f762d6          DCW      0x72f7,0x62d6
000030  93398318          DCW      0x9339,0x8318
000034  b37ba35a          DCW      0xb37b,0xa35a
000038  d3bdc39c          DCW      0xd3bd,0xc39c
00003c  f3ffe3de          DCW      0xf3ff,0xe3de
000040  24623443          DCW      0x2462,0x3443
000044  04201401          DCW      0x0420,0x1401
000048  64e674c7          DCW      0x64e6,0x74c7
00004c  44a45485          DCW      0x44a4,0x5485
000050  a56ab54b          DCW      0xa56a,0xb54b
000054  85289509          DCW      0x8528,0x9509
000058  e5eef5cf          DCW      0xe5ee,0xf5cf
00005c  c5acd58d          DCW      0xc5ac,0xd58d
000060  36532672          DCW      0x3653,0x2672
000064  16110630          DCW      0x1611,0x0630
000068  76d766f6          DCW      0x76d7,0x66f6
00006c  569546b4          DCW      0x5695,0x46b4
000070  b75ba77a          DCW      0xb75b,0xa77a
000074  97198738          DCW      0x9719,0x8738
000078  f7dfe7fe          DCW      0xf7df,0xe7fe
00007c  d79dc7bc          DCW      0xd79d,0xc7bc
000080  48c458e5          DCW      0x48c4,0x58e5
000084  688678a7          DCW      0x6886,0x78a7
000088  08401861          DCW      0x0840,0x1861
00008c  28023823          DCW      0x2802,0x3823
000090  c9ccd9ed          DCW      0xc9cc,0xd9ed
000094  e98ef9af          DCW      0xe98e,0xf9af
000098  89489969          DCW      0x8948,0x9969
00009c  a90ab92b          DCW      0xa90a,0xb92b
0000a0  5af54ad4          DCW      0x5af5,0x4ad4
0000a4  7ab76a96          DCW      0x7ab7,0x6a96
0000a8  1a710a50          DCW      0x1a71,0x0a50
0000ac  3a332a12          DCW      0x3a33,0x2a12
0000b0  dbfdcbdc          DCW      0xdbfd,0xcbdc
0000b4  fbbfeb9e          DCW      0xfbbf,0xeb9e
0000b8  9b798b58          DCW      0x9b79,0x8b58
0000bc  bb3bab1a          DCW      0xbb3b,0xab1a
0000c0  6ca67c87          DCW      0x6ca6,0x7c87
0000c4  4ce45cc5          DCW      0x4ce4,0x5cc5
0000c8  2c223c03          DCW      0x2c22,0x3c03
0000cc  0c601c41          DCW      0x0c60,0x1c41
0000d0  edaefd8f          DCW      0xedae,0xfd8f
0000d4  cdecddcd          DCW      0xcdec,0xddcd
0000d8  ad2abd0b          DCW      0xad2a,0xbd0b
0000dc  8d689d49          DCW      0x8d68,0x9d49
0000e0  7e976eb6          DCW      0x7e97,0x6eb6
0000e4  5ed54ef4          DCW      0x5ed5,0x4ef4
0000e8  3e132e32          DCW      0x3e13,0x2e32
0000ec  1e510e70          DCW      0x1e51,0x0e70
0000f0  ff9fefbe          DCW      0xff9f,0xefbe
0000f4  dfddcffc          DCW      0xdfdd,0xcffc
0000f8  bf1baf3a          DCW      0xbf1b,0xaf3a
0000fc  9f598f78          DCW      0x9f59,0x8f78
000100  918881a9          DCW      0x9188,0x81a9
000104  b1caa1eb          DCW      0xb1ca,0xa1eb
000108  d10cc12d          DCW      0xd10c,0xc12d
00010c  f14ee16f          DCW      0xf14e,0xe16f
000110  108000a1          DCW      0x1080,0x00a1
000114  30c220e3          DCW      0x30c2,0x20e3
000118  50044025          DCW      0x5004,0x4025
00011c  70466067          DCW      0x7046,0x6067
000120  83b99398          DCW      0x83b9,0x9398
000124  a3fbb3da          DCW      0xa3fb,0xb3da
000128  c33dd31c          DCW      0xc33d,0xd31c
00012c  e37ff35e          DCW      0xe37f,0xf35e
000130  02b11290          DCW      0x02b1,0x1290
000134  22f332d2          DCW      0x22f3,0x32d2
000138  42355214          DCW      0x4235,0x5214
00013c  62777256          DCW      0x6277,0x7256
000140  b5eaa5cb          DCW      0xb5ea,0xa5cb
000144  95a88589          DCW      0x95a8,0x8589
000148  f56ee54f          DCW      0xf56e,0xe54f
00014c  d52cc50d          DCW      0xd52c,0xc50d
000150  34e224c3          DCW      0x34e2,0x24c3
000154  14a00481          DCW      0x14a0,0x0481
000158  74666447          DCW      0x7466,0x6447
00015c  54244405          DCW      0x5424,0x4405
000160  a7dbb7fa          DCW      0xa7db,0xb7fa
000164  879997b8          DCW      0x8799,0x97b8
000168  e75ff77e          DCW      0xe75f,0xf77e
00016c  c71dd73c          DCW      0xc71d,0xd73c
000170  26d336f2          DCW      0x26d3,0x36f2
000174  069116b0          DCW      0x0691,0x16b0
000178  66577676          DCW      0x6657,0x7676
00017c  46155634          DCW      0x4615,0x5634
000180  d94cc96d          DCW      0xd94c,0xc96d
000184  f90ee92f          DCW      0xf90e,0xe92f
000188  99c889e9          DCW      0x99c8,0x89e9
00018c  b98aa9ab          DCW      0xb98a,0xa9ab
000190  58444865          DCW      0x5844,0x4865
000194  78066827          DCW      0x7806,0x6827
000198  18c008e1          DCW      0x18c0,0x08e1
00019c  388228a3          DCW      0x3882,0x28a3
0001a0  cb7ddb5c          DCW      0xcb7d,0xdb5c
0001a4  eb3ffb1e          DCW      0xeb3f,0xfb1e
0001a8  8bf99bd8          DCW      0x8bf9,0x9bd8
0001ac  abbbbb9a          DCW      0xabbb,0xbb9a
0001b0  4a755a54          DCW      0x4a75,0x5a54
0001b4  6a377a16          DCW      0x6a37,0x7a16
0001b8  0af11ad0          DCW      0x0af1,0x1ad0
0001bc  2ab33a92          DCW      0x2ab3,0x3a92
0001c0  fd2eed0f          DCW      0xfd2e,0xed0f
0001c4  dd6ccd4d          DCW      0xdd6c,0xcd4d
0001c8  bdaaad8b          DCW      0xbdaa,0xad8b
0001cc  9de88dc9          DCW      0x9de8,0x8dc9
0001d0  7c266c07          DCW      0x7c26,0x6c07
0001d4  5c644c45          DCW      0x5c64,0x4c45
0001d8  3ca22c83          DCW      0x3ca2,0x2c83
0001dc  1ce00cc1          DCW      0x1ce0,0x0cc1
0001e0  ef1fff3e          DCW      0xef1f,0xff3e
0001e4  cf5ddf7c          DCW      0xcf5d,0xdf7c
0001e8  af9bbfba          DCW      0xaf9b,0xbfba
0001ec  8fd99ff8          DCW      0x8fd9,0x9ff8
0001f0  6e177e36          DCW      0x6e17,0x7e36
0001f4  4e555e74          DCW      0x4e55,0x5e74
0001f8  2e933eb2          DCW      0x2e93,0x3eb2
0001fc  0ed11ef0          DCW      0x0ed1,0x1ef0

                          AREA ||.data||, DATA, ALIGN=1

                  BufferSize
000000  001e              DCW      0x001e
                  EnableMaster
000002  01                DCB      0x01
