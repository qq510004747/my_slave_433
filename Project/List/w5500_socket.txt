; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\w5500_socket.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\w5500_socket.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\w5500_socket.crf ..\BSP\BSP_Internet\W5500\W5500_Socket.c]
                          THUMB

                          AREA ||i.close||, CODE, READONLY, ALIGN=1

                  close PROC
;;;77     */
;;;78     void close(SOCKET s)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80         uint16_t wtime;
;;;81         IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CLOSE);
000004  f44f7184          MOV      r1,#0x108
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  2110              MOVS     r1,#0x10
00000e  f7fffffe          BL       IINCHIP_WRITE
;;;82     
;;;83         while( IINCHIP_READ(Sn_CR(s) ) )						/*Wait to process the command*/
000012  e008              B        |L1.38|
                  |L1.20|
;;;84         {
;;;85             Delay_us(waittime);
000014  2005              MOVS     r0,#5
000016  f7fffffe          BL       Delay_us
;;;86             if(wtime++ > waitnum)
00001a  4628              MOV      r0,r5
00001c  1c69              ADDS     r1,r5,#1
00001e  b28d              UXTH     r5,r1
000020  28c8              CMP      r0,#0xc8
000022  dd00              BLE      |L1.38|
;;;87                 goto  breakwhile;
000024  e008              B        |L1.56|
                  |L1.38|
000026  f44f7184          MOV      r1,#0x108             ;83
00002a  eb011044          ADD      r0,r1,r4,LSL #5       ;83
00002e  f7fffffe          BL       IINCHIP_READ
000032  2800              CMP      r0,#0                 ;83
000034  d1ee              BNE      |L1.20|
;;;88         }
;;;89     breakwhile:
000036  bf00              NOP      
                  |L1.56|
;;;90         IINCHIP_WRITE( Sn_IR(s) , 0xFF);					/*All clear*/
000038  f44f7102          MOV      r1,#0x208
00003c  eb011044          ADD      r0,r1,r4,LSL #5
000040  21ff              MOVS     r1,#0xff
000042  f7fffffe          BL       IINCHIP_WRITE
;;;91     }
000046  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||i.connect||, CODE, READONLY, ALIGN=1

                  connect PROC
;;;131    */
;;;132    uint8_t connect(SOCKET s, uint8_t * addr, uint16_t port)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;133    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;134        uint8_t ret;
;;;135        uint8_t wtime;
;;;136        if(((addr[0] == 0xFF)  && (addr[1] == 0xFF) && (addr[2] == 0xFF) && (addr[3] == 0xFF)) || ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) ||(port == 0x00))
00000a  7820              LDRB     r0,[r4,#0]
00000c  28ff              CMP      r0,#0xff
00000e  d108              BNE      |L2.34|
000010  7860              LDRB     r0,[r4,#1]
000012  28ff              CMP      r0,#0xff
000014  d105              BNE      |L2.34|
000016  78a0              LDRB     r0,[r4,#2]
000018  28ff              CMP      r0,#0xff
00001a  d102              BNE      |L2.34|
00001c  78e0              LDRB     r0,[r4,#3]
00001e  28ff              CMP      r0,#0xff
000020  d008              BEQ      |L2.52|
                  |L2.34|
000022  7820              LDRB     r0,[r4,#0]
000024  b928              CBNZ     r0,|L2.50|
000026  7860              LDRB     r0,[r4,#1]
000028  b918              CBNZ     r0,|L2.50|
00002a  78a0              LDRB     r0,[r4,#2]
00002c  b908              CBNZ     r0,|L2.50|
00002e  78e0              LDRB     r0,[r4,#3]
000030  b100              CBZ      r0,|L2.52|
                  |L2.50|
000032  b90e              CBNZ     r6,|L2.56|
                  |L2.52|
;;;137        {
;;;138            ret = 0;
000034  2700              MOVS     r7,#0
000036  e073              B        |L2.288|
                  |L2.56|
;;;139        } else
;;;140        {
;;;141            ret = 1;
000038  2701              MOVS     r7,#1
;;;142            IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
00003a  7821              LDRB     r1,[r4,#0]
00003c  f6404208          MOV      r2,#0xc08
000040  eb021045          ADD      r0,r2,r5,LSL #5
000044  f7fffffe          BL       IINCHIP_WRITE
;;;143            IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
000048  7861              LDRB     r1,[r4,#1]
00004a  f6405208          MOV      r2,#0xd08
00004e  eb021045          ADD      r0,r2,r5,LSL #5
000052  f7fffffe          BL       IINCHIP_WRITE
;;;144            IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
000056  78a1              LDRB     r1,[r4,#2]
000058  f6406208          MOV      r2,#0xe08
00005c  eb021045          ADD      r0,r2,r5,LSL #5
000060  f7fffffe          BL       IINCHIP_WRITE
;;;145            IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
000064  78e1              LDRB     r1,[r4,#3]
000066  f6407208          MOV      r2,#0xf08
00006a  eb021045          ADD      r0,r2,r5,LSL #5
00006e  f7fffffe          BL       IINCHIP_WRITE
;;;146            IINCHIP_WRITE( Sn_DPORT0(s), (uint8_t)((port & 0xff00) >> 8));
000072  0a31              LSRS     r1,r6,#8
000074  f2410208          MOV      r2,#0x1008
000078  eb021045          ADD      r0,r2,r5,LSL #5
00007c  f7fffffe          BL       IINCHIP_WRITE
;;;147            IINCHIP_WRITE( Sn_DPORT1(s), (uint8_t)(port & 0x00ff));
000080  b2f1              UXTB     r1,r6
000082  f2411208          MOV      r2,#0x1108
000086  eb021045          ADD      r0,r2,r5,LSL #5
00008a  f7fffffe          BL       IINCHIP_WRITE
;;;148            IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_CONNECT);
00008e  f44f7184          MOV      r1,#0x108
000092  eb011045          ADD      r0,r1,r5,LSL #5
000096  2104              MOVS     r1,#4
000098  f7fffffe          BL       IINCHIP_WRITE
;;;149    
;;;150            while ( IINCHIP_READ(Sn_CR(s) ) ) 							/*Wait for completion*/
00009c  e00a              B        |L2.180|
                  |L2.158|
;;;151            {
;;;152                Delay_us(waittime);
00009e  2005              MOVS     r0,#5
0000a0  f7fffffe          BL       Delay_us
;;;153                if(wtime++ > waitnum)
0000a4  4640              MOV      r0,r8
0000a6  1c41              ADDS     r1,r0,#1
0000a8  f00108ff          AND      r8,r1,#0xff
0000ac  28c8              CMP      r0,#0xc8
0000ae  dd01              BLE      |L2.180|
;;;154                {
;;;155                    ret = 0;
0000b0  2700              MOVS     r7,#0
;;;156                    goto  breakwhile;
0000b2  e036              B        |L2.290|
                  |L2.180|
0000b4  f44f7184          MOV      r1,#0x108             ;150
0000b8  eb011045          ADD      r0,r1,r5,LSL #5       ;150
0000bc  f7fffffe          BL       IINCHIP_READ
0000c0  2800              CMP      r0,#0                 ;150
0000c2  d1ec              BNE      |L2.158|
;;;157                }
;;;158            }
;;;159            wtime = 0;
0000c4  4680              MOV      r8,r0
;;;160    
;;;161            while ( IINCHIP_READ(Sn_SR(s)) != SOCK_SYNSENT )
0000c6  e022              B        |L2.270|
                  |L2.200|
;;;162            {
;;;163                if(IINCHIP_READ(Sn_SR(s)) == SOCK_ESTABLISHED)
0000c8  f44f7142          MOV      r1,#0x308
0000cc  eb011045          ADD      r0,r1,r5,LSL #5
0000d0  f7fffffe          BL       IINCHIP_READ
0000d4  2817              CMP      r0,#0x17
0000d6  d100              BNE      |L2.218|
;;;164                {
;;;165                    break;
0000d8  e021              B        |L2.286|
                  |L2.218|
;;;166                }
;;;167                if (getSn_IR(s) & Sn_IR_TIMEOUT)
0000da  4628              MOV      r0,r5
0000dc  f7fffffe          BL       getSn_IR
0000e0  f0000008          AND      r0,r0,#8
0000e4  b140              CBZ      r0,|L2.248|
;;;168                {
;;;169                    IINCHIP_WRITE(Sn_IR(s), (Sn_IR_TIMEOUT));  			/*Clear TIMEOUT Interrupt*/
0000e6  f44f7102          MOV      r1,#0x208
0000ea  eb011045          ADD      r0,r1,r5,LSL #5
0000ee  2108              MOVS     r1,#8
0000f0  f7fffffe          BL       IINCHIP_WRITE
;;;170                    ret = 0;
0000f4  2700              MOVS     r7,#0
;;;171                    break;
0000f6  e012              B        |L2.286|
                  |L2.248|
;;;172                }
;;;173                Delay_us(waittime);
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       Delay_us
;;;174                if(wtime++ > waitnum)
0000fe  4640              MOV      r0,r8
000100  1c41              ADDS     r1,r0,#1
000102  f00108ff          AND      r8,r1,#0xff
000106  28c8              CMP      r0,#0xc8
000108  dd01              BLE      |L2.270|
;;;175                {
;;;176                    ret = 0;
00010a  2700              MOVS     r7,#0
;;;177                    goto  breakwhile;
00010c  e009              B        |L2.290|
                  |L2.270|
00010e  f44f7142          MOV      r1,#0x308             ;161
000112  eb011045          ADD      r0,r1,r5,LSL #5       ;161
000116  f7fffffe          BL       IINCHIP_READ
00011a  2815              CMP      r0,#0x15              ;161
00011c  d1d4              BNE      |L2.200|
                  |L2.286|
00011e  bf00              NOP                            ;165
                  |L2.288|
;;;178                }
;;;179            }
;;;180        }
;;;181    breakwhile:
000120  bf00              NOP      
                  |L2.290|
;;;182        return ret;
000122  4638              MOV      r0,r7
;;;183    }
000124  e8bd81f0          POP      {r4-r8,pc}
;;;184    
                          ENDP


                          AREA ||i.disconnect||, CODE, READONLY, ALIGN=1

                  disconnect PROC
;;;189    */
;;;190    void disconnect(SOCKET s)
000000  b570              PUSH     {r4-r6,lr}
;;;191    {
000002  4604              MOV      r4,r0
;;;192        uint8_t wtime=0;
000004  2500              MOVS     r5,#0
;;;193        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_DISCON);
000006  f44f7184          MOV      r1,#0x108
00000a  eb011044          ADD      r0,r1,r4,LSL #5
00000e  2108              MOVS     r1,#8
000010  f7fffffe          BL       IINCHIP_WRITE
;;;194    
;;;195        while( IINCHIP_READ(Sn_CR(s) ) )									 /*Wait to process the command*/
000014  e008              B        |L3.40|
                  |L3.22|
;;;196        {
;;;197            Delay_us(waittime);
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       Delay_us
;;;198            if(wtime++ > waitnum)
00001c  4628              MOV      r0,r5
00001e  1c69              ADDS     r1,r5,#1
000020  b2cd              UXTB     r5,r1
000022  28c8              CMP      r0,#0xc8
000024  dd00              BLE      |L3.40|
;;;199            {
;;;200                goto  breakwhile;
000026  e008              B        |L3.58|
                  |L3.40|
000028  f44f7184          MOV      r1,#0x108             ;195
00002c  eb011044          ADD      r0,r1,r4,LSL #5       ;195
000030  f7fffffe          BL       IINCHIP_READ
000034  2800              CMP      r0,#0                 ;195
000036  d1ee              BNE      |L3.22|
;;;201            }
;;;202        }
;;;203    breakwhile:;
000038  bf00              NOP      
                  |L3.58|
;;;204    }
00003a  bd70              POP      {r4-r6,pc}
;;;205    
                          ENDP


                          AREA ||i.listen||, CODE, READONLY, ALIGN=1

                  listen PROC
;;;99     */
;;;100    uint8_t listen(SOCKET s)
000000  b570              PUSH     {r4-r6,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102        uint8_t ret;
;;;103        uint16_t wtime;
;;;104        if (IINCHIP_READ( Sn_SR(s) ) == SOCK_INIT)
000004  f44f7142          MOV      r1,#0x308
000008  eb011044          ADD      r0,r1,r4,LSL #5
00000c  f7fffffe          BL       IINCHIP_READ
000010  2813              CMP      r0,#0x13
000012  d11a              BNE      |L4.74|
;;;105        {
;;;106            IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_LISTEN);
000014  f44f7184          MOV      r1,#0x108
000018  eb011044          ADD      r0,r1,r4,LSL #5
00001c  2102              MOVS     r1,#2
00001e  f7fffffe          BL       IINCHIP_WRITE
;;;107    
;;;108            while( IINCHIP_READ(Sn_CR(s) ) )				 	/*Wait to process the command*/
000022  e008              B        |L4.54|
                  |L4.36|
;;;109            {
;;;110                Delay_us(waittime);
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       Delay_us
;;;111                if(wtime++ > waitnum)
00002a  4630              MOV      r0,r6
00002c  1c71              ADDS     r1,r6,#1
00002e  b28e              UXTH     r6,r1
000030  28c8              CMP      r0,#0xc8
000032  dd00              BLE      |L4.54|
;;;112                    goto  breakwhile;
000034  e00a              B        |L4.76|
                  |L4.54|
000036  f44f7184          MOV      r1,#0x108             ;108
00003a  eb011044          ADD      r0,r1,r4,LSL #5       ;108
00003e  f7fffffe          BL       IINCHIP_READ
000042  2800              CMP      r0,#0                 ;108
000044  d1ee              BNE      |L4.36|
;;;113            }
;;;114            ret = 1;
000046  2501              MOVS     r5,#1
000048  e001              B        |L4.78|
                  |L4.74|
;;;115        }
;;;116        else
;;;117        {
;;;118    breakwhile:
00004a  bf00              NOP      
                  |L4.76|
;;;119            ret = 0;
00004c  2500              MOVS     r5,#0
                  |L4.78|
;;;120        }
;;;121        return ret;
00004e  4628              MOV      r0,r5
;;;122    }
000050  bd70              POP      {r4-r6,pc}
;;;123    
                          ENDP


                          AREA ||i.recv||, CODE, READONLY, ALIGN=1

                  recv PROC
;;;282    */
;;;283    uint16_t recv(SOCKET s, uint8_t * buf, uint16_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;284    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;285        uint16_t ret=0;
00000a  2700              MOVS     r7,#0
;;;286        uint8_t wtime;
;;;287        if ( len > 0 )
00000c  2d00              CMP      r5,#0
00000e  dd20              BLE      |L5.82|
;;;288        {
;;;289            recv_data_processing(s, buf, len);
000010  462a              MOV      r2,r5
000012  4631              MOV      r1,r6
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       recv_data_processing
;;;290            IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
00001a  f44f7184          MOV      r1,#0x108
00001e  eb011044          ADD      r0,r1,r4,LSL #5
000022  2140              MOVS     r1,#0x40
000024  f7fffffe          BL       IINCHIP_WRITE
;;;291    
;;;292            while( IINCHIP_READ(Sn_CR(s) ))								 /*Wait to process the command*/
000028  e009              B        |L5.62|
                  |L5.42|
;;;293            {
;;;294                Delay_us(waittime);
00002a  2005              MOVS     r0,#5
00002c  f7fffffe          BL       Delay_us
;;;295                if(wtime++ > waitnum)
000030  4640              MOV      r0,r8
000032  1c41              ADDS     r1,r0,#1
000034  f00108ff          AND      r8,r1,#0xff
000038  28c8              CMP      r0,#0xc8
00003a  dd00              BLE      |L5.62|
;;;296                {
;;;297                    goto  breakwhile;
00003c  e008              B        |L5.80|
                  |L5.62|
00003e  f44f7184          MOV      r1,#0x108             ;292
000042  eb011044          ADD      r0,r1,r4,LSL #5       ;292
000046  f7fffffe          BL       IINCHIP_READ
00004a  2800              CMP      r0,#0                 ;292
00004c  d1ed              BNE      |L5.42|
;;;298                }
;;;299            }
;;;300    breakwhile:
00004e  bf00              NOP      
                  |L5.80|
;;;301            ret = len;
000050  462f              MOV      r7,r5
                  |L5.82|
;;;302        }
;;;303        return ret;
000052  4638              MOV      r0,r7
;;;304    }
000054  e8bd81f0          POP      {r4-r8,pc}
;;;305    
                          ENDP


                          AREA ||i.recvfrom||, CODE, READONLY, ALIGN=1

                  recvfrom PROC
;;;374    */
;;;375    uint16_t recvfrom(SOCKET s, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;376    {
000004  4605              MOV      r5,r0
000006  468a              MOV      r10,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8030          LDR      r8,[sp,#0x30]
;;;377        uint8_t head[8];
;;;378        uint16_t data_len=0;
000010  2700              MOVS     r7,#0
;;;379        uint16_t ptr=0;
000012  2400              MOVS     r4,#0
;;;380        uint32_t addrbsb =0;
000014  2000              MOVS     r0,#0
000016  9000              STR      r0,[sp,#0]
;;;381        uint8_t wtime;
;;;382        if ( len > 0 )
000018  f1b90f00          CMP      r9,#0
00001c  dd7e              BLE      |L6.284|
;;;383        {
;;;384            ptr     = IINCHIP_READ(Sn_RX_RD0(s) );
00001e  f6420108          MOV      r1,#0x2808
000022  eb011045          ADD      r0,r1,r5,LSL #5
000026  f7fffffe          BL       IINCHIP_READ
00002a  4604              MOV      r4,r0
;;;385            ptr     = ((ptr & 0x00ff) << 8) + IINCHIP_READ(Sn_RX_RD1(s));
00002c  f6421108          MOV      r1,#0x2908
000030  eb011045          ADD      r0,r1,r5,LSL #5
000034  f7fffffe          BL       IINCHIP_READ
000038  eb002004          ADD      r0,r0,r4,LSL #8
00003c  b284              UXTH     r4,r0
;;;386            addrbsb = (uint32_t)(ptr<<8) +  (s<<5) + 0x18;
00003e  0220              LSLS     r0,r4,#8
000040  eb001045          ADD      r0,r0,r5,LSL #5
000044  3018              ADDS     r0,r0,#0x18
000046  9000              STR      r0,[sp,#0]
;;;387    
;;;388            switch (IINCHIP_READ(Sn_MR(s) ) & 0x07)
000048  2108              MOVS     r1,#8
00004a  eb011045          ADD      r0,r1,r5,LSL #5
00004e  f7fffffe          BL       IINCHIP_READ
000052  f0000007          AND      r0,r0,#7
000056  2802              CMP      r0,#2
000058  d004              BEQ      |L6.100|
00005a  2803              CMP      r0,#3
00005c  d044              BEQ      |L6.232|
00005e  2804              CMP      r0,#4
000060  d179              BNE      |L6.342|
000062  e079              B        |L6.344|
                  |L6.100|
;;;389            {
;;;390            case Sn_MR_UDP :
;;;391                wiz_read_buf(addrbsb, head, 0x08);
000064  2208              MOVS     r2,#8
000066  a901              ADD      r1,sp,#4
000068  9800              LDR      r0,[sp,#0]
00006a  f7fffffe          BL       wiz_read_buf
;;;392                ptr += 8;
00006e  f1040008          ADD      r0,r4,#8
000072  b284              UXTH     r4,r0
;;;393                /*Read peer's IP address, port number*/
;;;394                addr[0]  = head[0];
000074  f89d0004          LDRB     r0,[sp,#4]
000078  7030              STRB     r0,[r6,#0]
;;;395                addr[1]  = head[1];
00007a  f89d0005          LDRB     r0,[sp,#5]
00007e  7070              STRB     r0,[r6,#1]
;;;396                addr[2]  = head[2];
000080  f89d0006          LDRB     r0,[sp,#6]
000084  70b0              STRB     r0,[r6,#2]
;;;397                addr[3]  = head[3];
000086  f89d0007          LDRB     r0,[sp,#7]
00008a  70f0              STRB     r0,[r6,#3]
;;;398                *port    = head[4];
00008c  f89d0008          LDRB     r0,[sp,#8]
000090  f8a80000          STRH     r0,[r8,#0]
;;;399                *port    = (*port << 8) + head[5];
000094  f89d0009          LDRB     r0,[sp,#9]
000098  f8981000          LDRB     r1,[r8,#0]
00009c  eb002001          ADD      r0,r0,r1,LSL #8
0000a0  f8a80000          STRH     r0,[r8,#0]
;;;400                data_len = head[6];
0000a4  f89d700a          LDRB     r7,[sp,#0xa]
;;;401                data_len = (data_len << 8) + head[7];
0000a8  f89d000b          LDRB     r0,[sp,#0xb]
0000ac  eb002007          ADD      r0,r0,r7,LSL #8
0000b0  b287              UXTH     r7,r0
;;;402    
;;;403                addrbsb = (uint32_t)(ptr<<8) +  (s<<5) + 0x18;
0000b2  0220              LSLS     r0,r4,#8
0000b4  eb001045          ADD      r0,r0,r5,LSL #5
0000b8  3018              ADDS     r0,r0,#0x18
0000ba  9000              STR      r0,[sp,#0]
;;;404                wiz_read_buf(addrbsb, buf, data_len);
0000bc  463a              MOV      r2,r7
0000be  4651              MOV      r1,r10
0000c0  9800              LDR      r0,[sp,#0]
0000c2  f7fffffe          BL       wiz_read_buf
;;;405                ptr += data_len;
0000c6  19e0              ADDS     r0,r4,r7
0000c8  b284              UXTH     r4,r0
;;;406    
;;;407                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8_t)((ptr & 0xff00) >> 8));
0000ca  0a21              LSRS     r1,r4,#8
0000cc  f6420208          MOV      r2,#0x2808
0000d0  eb021045          ADD      r0,r2,r5,LSL #5
0000d4  f7fffffe          BL       IINCHIP_WRITE
;;;408                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8_t)(ptr & 0x00ff));
0000d8  b2e1              UXTB     r1,r4
0000da  f6421208          MOV      r2,#0x2908
0000de  eb021045          ADD      r0,r2,r5,LSL #5
0000e2  f7fffffe          BL       IINCHIP_WRITE
;;;409                break;
0000e6  e067              B        |L6.440|
                  |L6.232|
;;;410    
;;;411            case Sn_MR_IPRAW :
;;;412                wiz_read_buf(addrbsb, head, 0x06);
0000e8  2206              MOVS     r2,#6
0000ea  a901              ADD      r1,sp,#4
0000ec  9800              LDR      r0,[sp,#0]
0000ee  f7fffffe          BL       wiz_read_buf
;;;413                ptr += 6;
0000f2  1da0              ADDS     r0,r4,#6
0000f4  b284              UXTH     r4,r0
;;;414                addr[0]  = head[0];
0000f6  f89d0004          LDRB     r0,[sp,#4]
0000fa  7030              STRB     r0,[r6,#0]
;;;415                addr[1]  = head[1];
0000fc  f89d0005          LDRB     r0,[sp,#5]
000100  7070              STRB     r0,[r6,#1]
;;;416                addr[2]  = head[2];
000102  f89d0006          LDRB     r0,[sp,#6]
000106  70b0              STRB     r0,[r6,#2]
;;;417                addr[3]  = head[3];
000108  f89d0007          LDRB     r0,[sp,#7]
00010c  70f0              STRB     r0,[r6,#3]
;;;418                data_len = head[4];
00010e  f89d7008          LDRB     r7,[sp,#8]
;;;419                data_len = (data_len << 8) + head[5];
000112  f89d0009          LDRB     r0,[sp,#9]
000116  eb002007          ADD      r0,r0,r7,LSL #8
00011a  e000              B        |L6.286|
                  |L6.284|
00011c  e067              B        |L6.494|
                  |L6.286|
00011e  b287              UXTH     r7,r0
;;;420    
;;;421                addrbsb  = (uint32_t)(ptr<<8) +  (s<<5) + 0x18;
000120  0220              LSLS     r0,r4,#8
000122  eb001045          ADD      r0,r0,r5,LSL #5
000126  3018              ADDS     r0,r0,#0x18
000128  9000              STR      r0,[sp,#0]
;;;422                wiz_read_buf(addrbsb, buf, data_len);
00012a  463a              MOV      r2,r7
00012c  4651              MOV      r1,r10
00012e  9800              LDR      r0,[sp,#0]
000130  f7fffffe          BL       wiz_read_buf
;;;423                ptr += data_len;
000134  19e0              ADDS     r0,r4,r7
000136  b284              UXTH     r4,r0
;;;424    
;;;425                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8_t)((ptr & 0xff00) >> 8));
000138  0a21              LSRS     r1,r4,#8
00013a  f6420208          MOV      r2,#0x2808
00013e  eb021045          ADD      r0,r2,r5,LSL #5
000142  f7fffffe          BL       IINCHIP_WRITE
;;;426                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8_t)(ptr & 0x00ff));
000146  b2e1              UXTB     r1,r4
000148  f6421208          MOV      r2,#0x2908
00014c  eb021045          ADD      r0,r2,r5,LSL #5
000150  f7fffffe          BL       IINCHIP_WRITE
;;;427                break;
000154  e030              B        |L6.440|
                  |L6.342|
000156  e02e              B        |L6.438|
                  |L6.344|
;;;428    
;;;429            case Sn_MR_MACRAW :
;;;430                wiz_read_buf(addrbsb, head, 0x02);
000158  2202              MOVS     r2,#2
00015a  a901              ADD      r1,sp,#4
00015c  9800              LDR      r0,[sp,#0]
00015e  f7fffffe          BL       wiz_read_buf
;;;431                ptr+=2;
000162  1ca0              ADDS     r0,r4,#2
000164  b284              UXTH     r4,r0
;;;432                data_len = head[0];
000166  f89d7004          LDRB     r7,[sp,#4]
;;;433                data_len = (data_len<<8) + head[1] - 2;
00016a  f89d0005          LDRB     r0,[sp,#5]
00016e  eb002007          ADD      r0,r0,r7,LSL #8
000172  1e80              SUBS     r0,r0,#2
000174  b287              UXTH     r7,r0
;;;434                if(data_len > 1514)
000176  f24050ea          MOV      r0,#0x5ea
00017a  4287              CMP      r7,r0
00017c  dd00              BLE      |L6.384|
;;;435                {
;;;436                    goto  breakwhile;
00017e  e037              B        |L6.496|
                  |L6.384|
;;;437                }
;;;438                addrbsb  = (uint32_t)(ptr<<8) +  (s<<5) + 0x18;
000180  0220              LSLS     r0,r4,#8
000182  eb001045          ADD      r0,r0,r5,LSL #5
000186  3018              ADDS     r0,r0,#0x18
000188  9000              STR      r0,[sp,#0]
;;;439                wiz_read_buf(addrbsb, buf, data_len);
00018a  463a              MOV      r2,r7
00018c  4651              MOV      r1,r10
00018e  9800              LDR      r0,[sp,#0]
000190  f7fffffe          BL       wiz_read_buf
;;;440                ptr += data_len;
000194  19e0              ADDS     r0,r4,r7
000196  b284              UXTH     r4,r0
;;;441    
;;;442                IINCHIP_WRITE( Sn_RX_RD0(s), (uint8_t)((ptr & 0xff00) >> 8));
000198  0a21              LSRS     r1,r4,#8
00019a  f6420208          MOV      r2,#0x2808
00019e  eb021045          ADD      r0,r2,r5,LSL #5
0001a2  f7fffffe          BL       IINCHIP_WRITE
;;;443                IINCHIP_WRITE( Sn_RX_RD1(s), (uint8_t)(ptr & 0x00ff));
0001a6  b2e1              UXTB     r1,r4
0001a8  f6421208          MOV      r2,#0x2908
0001ac  eb021045          ADD      r0,r2,r5,LSL #5
0001b0  f7fffffe          BL       IINCHIP_WRITE
;;;444                break;
0001b4  e000              B        |L6.440|
                  |L6.438|
;;;445    
;;;446            default :
;;;447                break;
0001b6  bf00              NOP      
                  |L6.440|
0001b8  bf00              NOP                            ;409
;;;448            }
;;;449            IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_RECV);
0001ba  f44f7184          MOV      r1,#0x108
0001be  eb011045          ADD      r0,r1,r5,LSL #5
0001c2  2140              MOVS     r1,#0x40
0001c4  f7fffffe          BL       IINCHIP_WRITE
;;;450    
;;;451            while( IINCHIP_READ( Sn_CR(s)) ) 	/*Wait to process the command*/
0001c8  e009              B        |L6.478|
                  |L6.458|
;;;452            {
;;;453                Delay_us(waittime);
0001ca  2005              MOVS     r0,#5
0001cc  f7fffffe          BL       Delay_us
;;;454                if(wtime++ > waitnum)
0001d0  4658              MOV      r0,r11
0001d2  1c41              ADDS     r1,r0,#1
0001d4  f0010bff          AND      r11,r1,#0xff
0001d8  28c8              CMP      r0,#0xc8
0001da  dd00              BLE      |L6.478|
;;;455                {
;;;456                    goto  breakwhile;
0001dc  e008              B        |L6.496|
                  |L6.478|
0001de  f44f7184          MOV      r1,#0x108             ;451
0001e2  eb011045          ADD      r0,r1,r5,LSL #5       ;451
0001e6  f7fffffe          BL       IINCHIP_READ
0001ea  2800              CMP      r0,#0                 ;451
0001ec  d1ed              BNE      |L6.458|
                  |L6.494|
;;;457                }
;;;458            }
;;;459    
;;;460        }
;;;461    breakwhile:
0001ee  bf00              NOP      
                  |L6.496|
;;;462        return data_len;
0001f0  4638              MOV      r0,r7
;;;463    }
0001f2  e8bd8ffe          POP      {r1-r11,pc}
;;;464    
                          ENDP


                          AREA ||i.send||, CODE, READONLY, ALIGN=1

                  send PROC
;;;212    */
;;;213    uint16_t send(SOCKET s, const uint8_t * buf, uint16_t len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;214    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
;;;215        uint8_t status=0;
00000a  2500              MOVS     r5,#0
;;;216        uint16_t ret=0;
00000c  2700              MOVS     r7,#0
;;;217        uint16_t freesize=0;
00000e  46aa              MOV      r10,r5
;;;218        uint8_t wtime=0;
000010  46a8              MOV      r8,r5
;;;219        if (len > getIINCHIP_TxMAX(s)) ret = getIINCHIP_TxMAX(s);	 		/*Check size not to exceed MAX size*/
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       getIINCHIP_TxMAX
000018  42b0              CMP      r0,r6
00001a  da04              BGE      |L7.38|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       getIINCHIP_TxMAX
000022  4607              MOV      r7,r0
000024  e000              B        |L7.40|
                  |L7.38|
;;;220        else ret = len;
000026  4637              MOV      r7,r6
                  |L7.40|
;;;221    
;;;222        do
000028  bf00              NOP      
                  |L7.42|
;;;223        {
;;;224            freesize = getSn_TX_FSR(s);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       getSn_TX_FSR
000030  4682              MOV      r10,r0
;;;225            status = IINCHIP_READ(Sn_SR(s));
000032  f44f7142          MOV      r1,#0x308
000036  eb011044          ADD      r0,r1,r4,LSL #5
00003a  f7fffffe          BL       IINCHIP_READ
00003e  4605              MOV      r5,r0
;;;226            if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT))
000040  2d17              CMP      r5,#0x17
000042  d003              BEQ      |L7.76|
000044  2d1c              CMP      r5,#0x1c
000046  d001              BEQ      |L7.76|
;;;227            {
;;;228                ret = 0;
000048  2700              MOVS     r7,#0
;;;229                break;
00004a  e008              B        |L7.94|
                  |L7.76|
;;;230            }
;;;231    		if(wtime++ > waitnum)
00004c  4640              MOV      r0,r8
00004e  1c41              ADDS     r1,r0,#1
000050  f00108ff          AND      r8,r1,#0xff
000054  28c8              CMP      r0,#0xc8
000056  dd00              BLE      |L7.90|
;;;232            {
;;;233                goto  breakwhile;
000058  e058              B        |L7.268|
                  |L7.90|
;;;234            }
;;;235        } while (freesize < ret);
00005a  45ba              CMP      r10,r7
00005c  dbe5              BLT      |L7.42|
                  |L7.94|
00005e  bf00              NOP                            ;229
;;;236         wtime=0;
000060  f04f0800          MOV      r8,#0
;;;237        send_data_processing(s, (uint8_t *)buf, ret);						 /*Copy data*/
000064  463a              MOV      r2,r7
000066  4649              MOV      r1,r9
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       send_data_processing
;;;238        IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
00006e  f44f7184          MOV      r1,#0x108
000072  eb011044          ADD      r0,r1,r4,LSL #5
000076  2120              MOVS     r1,#0x20
000078  f7fffffe          BL       IINCHIP_WRITE
;;;239        /*Wait to process the command*/
;;;240        while( IINCHIP_READ(Sn_CR(s) ) )
00007c  e009              B        |L7.146|
                  |L7.126|
;;;241        {
;;;242            Delay_us(waittime);
00007e  2005              MOVS     r0,#5
000080  f7fffffe          BL       Delay_us
;;;243            if(wtime++ > waitnum)
000084  4640              MOV      r0,r8
000086  1c41              ADDS     r1,r0,#1
000088  f00108ff          AND      r8,r1,#0xff
00008c  28c8              CMP      r0,#0xc8
00008e  dd00              BLE      |L7.146|
;;;244            {
;;;245                goto  breakwhile;
000090  e03c              B        |L7.268|
                  |L7.146|
000092  f44f7184          MOV      r1,#0x108             ;240
000096  eb011044          ADD      r0,r1,r4,LSL #5       ;240
00009a  f7fffffe          BL       IINCHIP_READ
00009e  2800              CMP      r0,#0                 ;240
0000a0  d1ed              BNE      |L7.126|
;;;246            }
;;;247        }
;;;248    
;;;249    
;;;250        while ( (IINCHIP_READ(Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
0000a2  e01a              B        |L7.218|
                  |L7.164|
;;;251        {
;;;252            status = IINCHIP_READ(Sn_SR(s));
0000a4  f44f7142          MOV      r1,#0x308
0000a8  eb011044          ADD      r0,r1,r4,LSL #5
0000ac  f7fffffe          BL       IINCHIP_READ
0000b0  4605              MOV      r5,r0
;;;253            if ((status != SOCK_ESTABLISHED) && (status != SOCK_CLOSE_WAIT) )
0000b2  2d17              CMP      r5,#0x17
0000b4  d007              BEQ      |L7.198|
0000b6  2d1c              CMP      r5,#0x1c
0000b8  d005              BEQ      |L7.198|
;;;254            {
;;;255                close(s);
0000ba  4620              MOV      r0,r4
0000bc  f7fffffe          BL       close
;;;256                return 0;
0000c0  2000              MOVS     r0,#0
                  |L7.194|
;;;257            }
;;;258            Delay_us(waittime);
;;;259            if(wtime++ > waitnum)
;;;260            {
;;;261                goto  breakwhile;
;;;262            }
;;;263        }
;;;264        IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;265    
;;;266    #ifdef __DEF_IINCHIP_INT__
;;;267        putISR(s, getISR(s) & (~Sn_IR_SEND_OK));
;;;268    #else
;;;269        IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;270    #endif
;;;271    breakwhile:
;;;272        return ret;
;;;273    }
0000c2  e8bd87f0          POP      {r4-r10,pc}
                  |L7.198|
0000c6  2005              MOVS     r0,#5                 ;258
0000c8  f7fffffe          BL       Delay_us
0000cc  4640              MOV      r0,r8                 ;259
0000ce  1c41              ADDS     r1,r0,#1              ;259
0000d0  f00108ff          AND      r8,r1,#0xff           ;259
0000d4  28c8              CMP      r0,#0xc8              ;259
0000d6  dd00              BLE      |L7.218|
0000d8  e018              B        |L7.268|
                  |L7.218|
0000da  f44f7102          MOV      r1,#0x208             ;250
0000de  eb011044          ADD      r0,r1,r4,LSL #5       ;250
0000e2  f7fffffe          BL       IINCHIP_READ
0000e6  f0000010          AND      r0,r0,#0x10           ;250
0000ea  2810              CMP      r0,#0x10              ;250
0000ec  d1da              BNE      |L7.164|
0000ee  f44f7102          MOV      r1,#0x208             ;264
0000f2  eb011044          ADD      r0,r1,r4,LSL #5       ;264
0000f6  2110              MOVS     r1,#0x10              ;264
0000f8  f7fffffe          BL       IINCHIP_WRITE
0000fc  f44f7102          MOV      r1,#0x208             ;269
000100  eb011044          ADD      r0,r1,r4,LSL #5       ;269
000104  2110              MOVS     r1,#0x10              ;269
000106  f7fffffe          BL       IINCHIP_WRITE
00010a  bf00              NOP                            ;271
                  |L7.268|
00010c  4638              MOV      r0,r7                 ;272
00010e  e7d8              B        |L7.194|
;;;274    
                          ENDP


                          AREA ||i.sendto||, CODE, READONLY, ALIGN=1

                  sendto PROC
;;;315    */
;;;316    uint16_t sendto(SOCKET s, const uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;317    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  9f08              LDR      r7,[sp,#0x20]
;;;318        uint16_t ret=0;
00000e  f04f0800          MOV      r8,#0
;;;319        uint8_t wtime;
;;;320        if (len > getIINCHIP_TxMAX(s)) ret = getIINCHIP_TxMAX(s); 										/*Check size not to exceed MAX size*/
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       getIINCHIP_TxMAX
000018  42b0              CMP      r0,r6
00001a  da04              BGE      |L8.38|
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       getIINCHIP_TxMAX
000022  4680              MOV      r8,r0
000024  e000              B        |L8.40|
                  |L8.38|
;;;321        else ret = len;
000026  46b0              MOV      r8,r6
                  |L8.40|
;;;322    
;;;323        if( ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) && (addr[3] == 0x00)) || ((port == 0x00)) )//||(ret == 0) )
000028  7828              LDRB     r0,[r5,#0]
00002a  b928              CBNZ     r0,|L8.56|
00002c  7868              LDRB     r0,[r5,#1]
00002e  b918              CBNZ     r0,|L8.56|
000030  78a8              LDRB     r0,[r5,#2]
000032  b908              CBNZ     r0,|L8.56|
000034  78e8              LDRB     r0,[r5,#3]
000036  b100              CBZ      r0,|L8.58|
                  |L8.56|
000038  b917              CBNZ     r7,|L8.64|
                  |L8.58|
;;;324        {
;;;325            ret = 0;
00003a  f04f0800          MOV      r8,#0
00003e  e078              B        |L8.306|
                  |L8.64|
;;;326        }else
;;;327        {
;;;328            IINCHIP_WRITE( Sn_DIPR0(s), addr[0]);
000040  7829              LDRB     r1,[r5,#0]
000042  f6404208          MOV      r2,#0xc08
000046  eb021044          ADD      r0,r2,r4,LSL #5
00004a  f7fffffe          BL       IINCHIP_WRITE
;;;329            IINCHIP_WRITE( Sn_DIPR1(s), addr[1]);
00004e  7869              LDRB     r1,[r5,#1]
000050  f6405208          MOV      r2,#0xd08
000054  eb021044          ADD      r0,r2,r4,LSL #5
000058  f7fffffe          BL       IINCHIP_WRITE
;;;330            IINCHIP_WRITE( Sn_DIPR2(s), addr[2]);
00005c  78a9              LDRB     r1,[r5,#2]
00005e  f6406208          MOV      r2,#0xe08
000062  eb021044          ADD      r0,r2,r4,LSL #5
000066  f7fffffe          BL       IINCHIP_WRITE
;;;331            IINCHIP_WRITE( Sn_DIPR3(s), addr[3]);
00006a  78e9              LDRB     r1,[r5,#3]
00006c  f6407208          MOV      r2,#0xf08
000070  eb021044          ADD      r0,r2,r4,LSL #5
000074  f7fffffe          BL       IINCHIP_WRITE
;;;332            IINCHIP_WRITE( Sn_DPORT0(s),(uint8_t)((port & 0xff00) >> 8));
000078  0a39              LSRS     r1,r7,#8
00007a  f2410208          MOV      r2,#0x1008
00007e  eb021044          ADD      r0,r2,r4,LSL #5
000082  f7fffffe          BL       IINCHIP_WRITE
;;;333            IINCHIP_WRITE( Sn_DPORT1(s),(uint8_t)(port & 0x00ff));
000086  b2f9              UXTB     r1,r7
000088  f2411208          MOV      r2,#0x1108
00008c  eb021044          ADD      r0,r2,r4,LSL #5
000090  f7fffffe          BL       IINCHIP_WRITE
;;;334            send_data_processing(s, (uint8_t *)buf, ret);				   	/*Copy data*/
000094  4642              MOV      r2,r8
000096  4651              MOV      r1,r10
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       send_data_processing
;;;335            IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_SEND);
00009e  f44f7184          MOV      r1,#0x108
0000a2  eb011044          ADD      r0,r1,r4,LSL #5
0000a6  2120              MOVS     r1,#0x20
0000a8  f7fffffe          BL       IINCHIP_WRITE
;;;336    
;;;337            while( IINCHIP_READ( Sn_CR(s) ) )							   	/*Wait to process the command*/
0000ac  e009              B        |L8.194|
                  |L8.174|
;;;338            {
;;;339                Delay_us(waittime);
0000ae  2005              MOVS     r0,#5
0000b0  f7fffffe          BL       Delay_us
;;;340                if(wtime++ > waitnum)
0000b4  4648              MOV      r0,r9
0000b6  1c41              ADDS     r1,r0,#1
0000b8  f00109ff          AND      r9,r1,#0xff
0000bc  28c8              CMP      r0,#0xc8
0000be  dd00              BLE      |L8.194|
;;;341                {
;;;342                    goto  breakwhile;
0000c0  e038              B        |L8.308|
                  |L8.194|
0000c2  f44f7184          MOV      r1,#0x108             ;337
0000c6  eb011044          ADD      r0,r1,r4,LSL #5       ;337
0000ca  f7fffffe          BL       IINCHIP_READ
0000ce  2800              CMP      r0,#0                 ;337
0000d0  d1ed              BNE      |L8.174|
;;;343                }
;;;344            }
;;;345            wtime=0;
0000d2  4681              MOV      r9,r0
;;;346            while( (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_SEND_OK) != Sn_IR_SEND_OK )
0000d4  e01c              B        |L8.272|
                  |L8.214|
;;;347            {
;;;348                if (IINCHIP_READ( Sn_IR(s) ) & Sn_IR_TIMEOUT)
0000d6  f44f7102          MOV      r1,#0x208
0000da  eb011044          ADD      r0,r1,r4,LSL #5
0000de  f7fffffe          BL       IINCHIP_READ
0000e2  f0000008          AND      r0,r0,#8
0000e6  b148              CBZ      r0,|L8.252|
;;;349                {
;;;350                    IINCHIP_WRITE( Sn_IR(s) , (Sn_IR_SEND_OK | Sn_IR_TIMEOUT)); 	/*Clear SEND_OK & TIMEOUT*/
0000e8  f44f7102          MOV      r1,#0x208
0000ec  eb011044          ADD      r0,r1,r4,LSL #5
0000f0  2118              MOVS     r1,#0x18
0000f2  f7fffffe          BL       IINCHIP_WRITE
;;;351                    return 0;
0000f6  2000              MOVS     r0,#0
                  |L8.248|
;;;352                }
;;;353                Delay_us(waittime);
;;;354                if(wtime++ > waitnum)
;;;355                {
;;;356                    goto  breakwhile;
;;;357                }
;;;358            }
;;;359            IINCHIP_WRITE( Sn_IR(s) , Sn_IR_SEND_OK);
;;;360        }
;;;361    breakwhile:
;;;362        return ret;
;;;363    }
0000f8  e8bd87f0          POP      {r4-r10,pc}
                  |L8.252|
0000fc  2005              MOVS     r0,#5                 ;353
0000fe  f7fffffe          BL       Delay_us
000102  4648              MOV      r0,r9                 ;354
000104  1c41              ADDS     r1,r0,#1              ;354
000106  f00109ff          AND      r9,r1,#0xff           ;354
00010a  28c8              CMP      r0,#0xc8              ;354
00010c  dd00              BLE      |L8.272|
00010e  e011              B        |L8.308|
                  |L8.272|
000110  f44f7102          MOV      r1,#0x208             ;346
000114  eb011044          ADD      r0,r1,r4,LSL #5       ;346
000118  f7fffffe          BL       IINCHIP_READ
00011c  f0000010          AND      r0,r0,#0x10           ;346
000120  2810              CMP      r0,#0x10              ;346
000122  d1d8              BNE      |L8.214|
000124  f44f7102          MOV      r1,#0x208             ;359
000128  eb011044          ADD      r0,r1,r4,LSL #5       ;359
00012c  2110              MOVS     r1,#0x10              ;359
00012e  f7fffffe          BL       IINCHIP_WRITE
                  |L8.306|
000132  bf00              NOP                            ;361
                  |L8.308|
000134  4640              MOV      r0,r8                 ;362
000136  e7df              B        |L8.248|
;;;364    
                          ENDP


                          AREA ||i.socket||, CODE, READONLY, ALIGN=2

                  socket PROC
;;;38     */
;;;39     uint8_t socket(SOCKET s, uint8_t protocol, uint16_t port, uint8_t flag)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;40     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;41         uint8_t ret;
;;;42         uint16_t wtime;
;;;43         if (((protocol&0x0F) == Sn_MR_TCP)||((protocol&0x0F) == Sn_MR_UDP)||((protocol&0x0F) == Sn_MR_IPRAW)|| ((protocol&0x0F) == Sn_MR_MACRAW)||((protocol&0x0F) == Sn_MR_PPPOE))
00000c  f005000f          AND      r0,r5,#0xf
000010  2801              CMP      r0,#1
000012  d00f              BEQ      |L9.52|
000014  f005000f          AND      r0,r5,#0xf
000018  2802              CMP      r0,#2
00001a  d00b              BEQ      |L9.52|
00001c  f005000f          AND      r0,r5,#0xf
000020  2803              CMP      r0,#3
000022  d007              BEQ      |L9.52|
000024  f005000f          AND      r0,r5,#0xf
000028  2804              CMP      r0,#4
00002a  d003              BEQ      |L9.52|
00002c  f005000f          AND      r0,r5,#0xf
000030  2805              CMP      r0,#5
000032  d14b              BNE      |L9.204|
                  |L9.52|
;;;44         {
;;;45             close(s);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       close
;;;46             IINCHIP_WRITE(Sn_MR(s) ,protocol | flag);
00003a  ea450108          ORR      r1,r5,r8
00003e  2208              MOVS     r2,#8
000040  eb021044          ADD      r0,r2,r4,LSL #5
000044  f7fffffe          BL       IINCHIP_WRITE
;;;47             if (port != 0) {
000048  b176              CBZ      r6,|L9.104|
;;;48                 IINCHIP_WRITE( Sn_PORT0(s) ,(uint8_t)((port & 0xff00) >> 8));
00004a  0a31              LSRS     r1,r6,#8
00004c  f44f6281          MOV      r2,#0x408
000050  eb021044          ADD      r0,r2,r4,LSL #5
000054  f7fffffe          BL       IINCHIP_WRITE
;;;49                 IINCHIP_WRITE( Sn_PORT1(s) ,(uint8_t)(port & 0x00ff));
000058  b2f1              UXTB     r1,r6
00005a  f44f62a1          MOV      r2,#0x508
00005e  eb021044          ADD      r0,r2,r4,LSL #5
000062  f7fffffe          BL       IINCHIP_WRITE
000066  e015              B        |L9.148|
                  |L9.104|
;;;50             } else {
;;;51                 local_port++; 									/*If don't set the source port, set local_port number*/
000068  481b              LDR      r0,|L9.216|
00006a  8800              LDRH     r0,[r0,#0]  ; local_port
00006c  1c40              ADDS     r0,r0,#1
00006e  491a              LDR      r1,|L9.216|
000070  8008              STRH     r0,[r1,#0]
;;;52                 IINCHIP_WRITE(Sn_PORT0(s) ,(uint8_t)((local_port & 0xff00) >> 8));
000072  460a              MOV      r2,r1
000074  8812              LDRH     r2,[r2,#0]  ; local_port
000076  0a11              LSRS     r1,r2,#8
000078  f44f6281          MOV      r2,#0x408
00007c  eb021044          ADD      r0,r2,r4,LSL #5
000080  f7fffffe          BL       IINCHIP_WRITE
;;;53                 IINCHIP_WRITE(Sn_PORT1(s) ,(uint8_t)(local_port & 0x00ff));
000084  4a14              LDR      r2,|L9.216|
000086  7811              LDRB     r1,[r2,#0]  ; local_port
000088  f44f62a1          MOV      r2,#0x508
00008c  eb021044          ADD      r0,r2,r4,LSL #5
000090  f7fffffe          BL       IINCHIP_WRITE
                  |L9.148|
;;;54             }
;;;55             IINCHIP_WRITE( Sn_CR(s) ,Sn_CR_OPEN); 			/*Run sockinit Sn_CR*/
000094  f44f7184          MOV      r1,#0x108
000098  eb011044          ADD      r0,r1,r4,LSL #5
00009c  2101              MOVS     r1,#1
00009e  f7fffffe          BL       IINCHIP_WRITE
;;;56     
;;;57             while( IINCHIP_READ(Sn_CR(s)) )					/*Wait to process the command*/
0000a2  e009              B        |L9.184|
                  |L9.164|
;;;58             {
;;;59                 Delay_us(waittime);
0000a4  2005              MOVS     r0,#5
0000a6  f7fffffe          BL       Delay_us
;;;60                 if(wtime++ > waitnum)
0000aa  4648              MOV      r0,r9
0000ac  1c41              ADDS     r1,r0,#1
0000ae  fa1ff981          UXTH     r9,r1
0000b2  28c8              CMP      r0,#0xc8
0000b4  dd00              BLE      |L9.184|
;;;61                     goto  breakwhile;
0000b6  e00a              B        |L9.206|
                  |L9.184|
0000b8  f44f7184          MOV      r1,#0x108             ;57
0000bc  eb011044          ADD      r0,r1,r4,LSL #5       ;57
0000c0  f7fffffe          BL       IINCHIP_READ
0000c4  2800              CMP      r0,#0                 ;57
0000c6  d1ed              BNE      |L9.164|
;;;62             }
;;;63             ret = 1;
0000c8  2701              MOVS     r7,#1
0000ca  e001              B        |L9.208|
                  |L9.204|
;;;64         }
;;;65         else
;;;66         {
;;;67     breakwhile:
0000cc  bf00              NOP      
                  |L9.206|
;;;68             ret = 0;
0000ce  2700              MOVS     r7,#0
                  |L9.208|
;;;69         }
;;;70         return ret;
0000d0  4638              MOV      r0,r7
;;;71     }
0000d2  e8bd87f0          POP      {r4-r10,pc}
;;;72     
                          ENDP

0000d6  0000              DCW      0x0000
                  |L9.216|
                          DCD      local_port

                          AREA ||.data||, DATA, ALIGN=1

                  local_port
000000  0000              DCB      0x00,0x00
