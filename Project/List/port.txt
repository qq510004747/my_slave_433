; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\port.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\port.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\port.crf ..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3\port.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;422    
;;;423    void xPortSysTickHandler( void )
000000  b510              PUSH     {r4,lr}
;;;424    {
;;;425    	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
;;;426    	executes all interrupts must be unmasked.  There is therefore no need to
;;;427    	save and then restore the interrupt mask value as its value is already
;;;428    	known. */
;;;429    	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;430    	{
;;;431    		/* Increment the RTOS tick. */
;;;432    		if( xTaskIncrementTick() != pdFALSE )
000006  f7fffffe          BL       xTaskIncrementTick
00000a  b118              CBZ      r0,|L1.20|
;;;433    		{
;;;434    			/* A context switch is required.  Context switching is performed in
;;;435    			the PendSV interrupt.  Pend the PendSV interrupt. */
;;;436    			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
00000c  f04f5080          MOV      r0,#0x10000000
000010  4905              LDR      r1,|L1.40|
000012  6008              STR      r0,[r1,#0]
                  |L1.20|
;;;437    		}
;;;438    	}
;;;439    	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       vPortClearInterruptMask
;;;440    	TickCounter++;
00001a  4804              LDR      r0,|L1.44|
00001c  6800              LDR      r0,[r0,#0]  ; TickCounter
00001e  1c40              ADDS     r0,r0,#1
000020  4902              LDR      r1,|L1.44|
000022  6008              STR      r0,[r1,#0]  ; TickCounter
;;;441    }
000024  bd10              POP      {r4,pc}
;;;442    /*-----------------------------------------------------------*/
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      0xe000ed04
                  |L1.44|
                          DCD      TickCounter

                          AREA ||i.prvTaskExitError||, CODE, READONLY, ALIGN=2

                  prvTaskExitError PROC
;;;228    
;;;229    static void prvTaskExitError( void )
000000  4807              LDR      r0,|L2.32|
;;;230    {
;;;231    	/* A function that implements a task must not exit or attempt to return to
;;;232    	its caller as there is nothing to return to.  If a task wants to exit it
;;;233    	should instead call vTaskDelete( NULL ).
;;;234    
;;;235    	Artificially force an assert() to be triggered if configASSERT() is
;;;236    	defined, then stop here so application writers can catch the error. */
;;;237    	configASSERT( uxCriticalNesting == ~0UL );
000002  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000004  1c40              ADDS     r0,r0,#1
000006  b908              CBNZ     r0,|L2.12|
000008  2001              MOVS     r0,#1
00000a  e000              B        |L2.14|
                  |L2.12|
00000c  2000              MOVS     r0,#0
                  |L2.14|
00000e  b918              CBNZ     r0,|L2.24|
000010  f7fffffe          BL       ulPortSetInterruptMask
000014  bf00              NOP      
                  |L2.22|
000016  e7fe              B        |L2.22|
                  |L2.24|
;;;238    	portDISABLE_INTERRUPTS();
000018  f7fffffe          BL       ulPortSetInterruptMask
;;;239    	for( ;; );
00001c  bf00              NOP      
                  |L2.30|
00001e  e7fe              B        |L2.30|
;;;240    }
;;;241    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.32|
                          DCD      uxCriticalNesting

                          AREA ||i.pxPortInitialiseStack||, CODE, READONLY, ALIGN=2

                  pxPortInitialiseStack PROC
;;;209     */
;;;210    StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
000000  1f00              SUBS     r0,r0,#4
;;;211    {
;;;212    	/* Simulate the stack frame as it would be created by a context switch
;;;213    	interrupt. */
;;;214    	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
;;;215    	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
000002  f04f7380          MOV      r3,#0x1000000
000006  6003              STR      r3,[r0,#0]
;;;216    	pxTopOfStack--;
000008  1f00              SUBS     r0,r0,#4
;;;217    	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
00000a  6001              STR      r1,[r0,#0]
;;;218    	pxTopOfStack--;
00000c  1f00              SUBS     r0,r0,#4
;;;219    	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
00000e  4b03              LDR      r3,|L3.28|
000010  6003              STR      r3,[r0,#0]
;;;220    
;;;221    	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
000012  3814              SUBS     r0,r0,#0x14
;;;222    	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
000014  6002              STR      r2,[r0,#0]
;;;223    	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
000016  3820              SUBS     r0,r0,#0x20
;;;224    
;;;225    	return pxTopOfStack;
;;;226    }
000018  4770              BX       lr
;;;227    /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      prvTaskExitError

                          AREA ||i.vPortEndScheduler||, CODE, READONLY, ALIGN=2

                  vPortEndScheduler PROC
;;;347    
;;;348    void vPortEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350    	/* Not implemented in ports where there is nothing to return to.
;;;351    	Artificially force an assert. */
;;;352    	configASSERT( uxCriticalNesting == 1000UL );
000002  4807              LDR      r0,|L4.32|
000004  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000006  f5b07f7a          CMP      r0,#0x3e8
00000a  d101              BNE      |L4.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L4.18|
                  |L4.16|
000010  2000              MOVS     r0,#0
                  |L4.18|
000012  b918              CBNZ     r0,|L4.28|
000014  f7fffffe          BL       ulPortSetInterruptMask
000018  bf00              NOP      
                  |L4.26|
00001a  e7fe              B        |L4.26|
                  |L4.28|
;;;353    }
00001c  bd10              POP      {r4,pc}
;;;354    /*-----------------------------------------------------------*/
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortEnterCritical||, CODE, READONLY, ALIGN=2

                  vPortEnterCritical PROC
;;;367    
;;;368    void vPortEnterCritical( void )
000000  b510              PUSH     {r4,lr}
;;;369    {
;;;370    	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;371    	uxCriticalNesting++;
000006  4805              LDR      r0,|L5.28|
000008  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00000a  1c40              ADDS     r0,r0,#1
00000c  4903              LDR      r1,|L5.28|
00000e  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;372    	__dsb( portSY_FULL_READ_WRITE );
000010  f3bf8f4f          DSB      
;;;373    	__isb( portSY_FULL_READ_WRITE );
000014  f3bf8f6f          ISB      
;;;374    }
000018  bd10              POP      {r4,pc}
;;;375    /*-----------------------------------------------------------*/
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortExitCritical||, CODE, READONLY, ALIGN=2

                  vPortExitCritical PROC
;;;376    
;;;377    void vPortExitCritical( void )
000000  b510              PUSH     {r4,lr}
;;;378    {
;;;379    	configASSERT( uxCriticalNesting );
000002  4809              LDR      r0,|L6.40|
000004  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000006  b918              CBNZ     r0,|L6.16|
000008  f7fffffe          BL       ulPortSetInterruptMask
00000c  bf00              NOP      
                  |L6.14|
00000e  e7fe              B        |L6.14|
                  |L6.16|
;;;380    	uxCriticalNesting--;
000010  4805              LDR      r0,|L6.40|
000012  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
000014  1e40              SUBS     r0,r0,#1
000016  4904              LDR      r1,|L6.40|
000018  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;381    	if( uxCriticalNesting == 0 )
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]  ; uxCriticalNesting
00001e  b910              CBNZ     r0,|L6.38|
;;;382    	{
;;;383    		portENABLE_INTERRUPTS();
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       vPortClearInterruptMask
                  |L6.38|
;;;384    	}
;;;385    }
000026  bd10              POP      {r4,pc}
;;;386    /*-----------------------------------------------------------*/
                          ENDP

                  |L6.40|
                          DCD      uxCriticalNesting

                          AREA ||i.vPortSetupTimerInterrupt||, CODE, READONLY, ALIGN=2

                  vPortSetupTimerInterrupt PROC
;;;602    
;;;603    	void vPortSetupTimerInterrupt( void )
000000  4803              LDR      r0,|L7.16|
;;;604    	{
;;;605    		/* Calculate the constants required to configure the tick interrupt. */
;;;606    		#if configUSE_TICKLESS_IDLE == 1
;;;607    		{
;;;608    			ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
;;;609    			xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
;;;610    			ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
;;;611    		}
;;;612    		#endif /* configUSE_TICKLESS_IDLE */
;;;613    
;;;614    		/* Configure SysTick to interrupt at the requested rate. */
;;;615    		portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
000002  f04f21e0          MOV      r1,#0xe000e000
000006  6148              STR      r0,[r1,#0x14]
;;;616    		portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
000008  2007              MOVS     r0,#7
00000a  6108              STR      r0,[r1,#0x10]
;;;617    	}
00000c  4770              BX       lr
;;;618    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x0001193f

                          AREA ||i.vPortValidateInterruptPriority||, CODE, READONLY, ALIGN=2

                  vPortValidateInterruptPriority PROC
;;;652    
;;;653    	void vPortValidateInterruptPriority( void )
000000  b570              PUSH     {r4-r6,lr}
;;;654    	{
;;;655    	uint32_t ulCurrentInterrupt;
;;;656    	uint8_t ucCurrentPriority;
;;;657    
;;;658    		/* Obtain the number of the currently executing interrupt. */
;;;659    		ulCurrentInterrupt = vPortGetIPSR();
000002  f7fffffe          BL       vPortGetIPSR
000006  4605              MOV      r5,r0
;;;660    
;;;661    		/* Is the interrupt number a user defined interrupt? */
;;;662    		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
000008  2d10              CMP      r5,#0x10
00000a  d30f              BCC      |L8.44|
;;;663    		{
;;;664    			/* Look up the interrupt's priority. */
;;;665    			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
00000c  f10520e0          ADD      r0,r5,#0xe000e000
000010  f89043f0          LDRB     r4,[r0,#0x3f0]
;;;666    
;;;667    			/* The following assertion will fail if a service routine (ISR) for
;;;668    			an interrupt that has been assigned a priority above
;;;669    			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
;;;670    			function.  ISR safe FreeRTOS API functions must *only* be called
;;;671    			from interrupts that have been assigned a priority at or below
;;;672    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;673    
;;;674    			Numerically low interrupt priority numbers represent logically high
;;;675    			interrupt priorities, therefore the priority of the interrupt must
;;;676    			be set to a value equal to or numerically *higher* than
;;;677    			configMAX_SYSCALL_INTERRUPT_PRIORITY.
;;;678    
;;;679    			Interrupts that	use the FreeRTOS API must not be left at their
;;;680    			default priority of	zero as that is the highest possible priority,
;;;681    			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
;;;682    			and	therefore also guaranteed to be invalid.
;;;683    
;;;684    			FreeRTOS maintains separate thread and ISR API functions to ensure
;;;685    			interrupt entry is as fast and simple as possible.
;;;686    
;;;687    			The following links provide detailed information:
;;;688    			http://www.freertos.org/RTOS-Cortex-M3-M4.html
;;;689    			http://www.freertos.org/FAQHelp.html */
;;;690    			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
000014  480e              LDR      r0,|L8.80|
000016  7800              LDRB     r0,[r0,#0]  ; ucMaxSysCallPriority
000018  4284              CMP      r4,r0
00001a  db01              BLT      |L8.32|
00001c  2001              MOVS     r0,#1
00001e  e000              B        |L8.34|
                  |L8.32|
000020  2000              MOVS     r0,#0
                  |L8.34|
000022  b918              CBNZ     r0,|L8.44|
000024  f7fffffe          BL       ulPortSetInterruptMask
000028  bf00              NOP      
                  |L8.42|
00002a  e7fe              B        |L8.42|
                  |L8.44|
;;;691    		}
;;;692    
;;;693    		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
;;;694    		that define each interrupt's priority to be split between bits that
;;;695    		define the interrupt's pre-emption priority bits and bits that define
;;;696    		the interrupt's sub-priority.  For simplicity all bits must be defined
;;;697    		to be pre-emption priority bits.  The following assertion will fail if
;;;698    		this is not the case (if some bits represent a sub-priority).
;;;699    
;;;700    		If the application only uses CMSIS libraries for interrupt
;;;701    		configuration then the correct setting can be achieved on all Cortex-M
;;;702    		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
;;;703    		scheduler.  Note however that some vendor specific peripheral libraries
;;;704    		assume a non-zero priority group setting, in which cases using a value
;;;705    		of zero will result in unpredicable behaviour. */
;;;706    		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
00002c  4809              LDR      r0,|L8.84|
00002e  6800              LDR      r0,[r0,#0]
000030  f40060e0          AND      r0,r0,#0x700
000034  4908              LDR      r1,|L8.88|
000036  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
000038  4288              CMP      r0,r1
00003a  d801              BHI      |L8.64|
00003c  2001              MOVS     r0,#1
00003e  e000              B        |L8.66|
                  |L8.64|
000040  2000              MOVS     r0,#0
                  |L8.66|
000042  b918              CBNZ     r0,|L8.76|
000044  f7fffffe          BL       ulPortSetInterruptMask
000048  bf00              NOP      
                  |L8.74|
00004a  e7fe              B        |L8.74|
                  |L8.76|
;;;707    	}
00004c  bd70              POP      {r4-r6,pc}
;;;708    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      ucMaxSysCallPriority
                  |L8.84|
                          DCD      0xe000ed0c
                  |L8.88|
                          DCD      ulMaxPRIGROUPValue

                          AREA ||i.vPortYield||, CODE, READONLY, ALIGN=2

                  vPortYield PROC
;;;355    
;;;356    void vPortYield( void )
000000  f04f5080          MOV      r0,#0x10000000
;;;357    {
;;;358    	/* Set a PendSV to request a context switch. */
;;;359    	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
000004  4903              LDR      r1,|L9.20|
000006  6008              STR      r0,[r1,#0]
;;;360    
;;;361    	/* Barriers are normally not required but do ensure the code is completely
;;;362    	within the specified behaviour for the architecture. */
;;;363    	__dsb( portSY_FULL_READ_WRITE );
000008  f3bf8f4f          DSB      
;;;364    	__isb( portSY_FULL_READ_WRITE );
00000c  f3bf8f6f          ISB      
;;;365    }
000010  4770              BX       lr
;;;366    /*-----------------------------------------------------------*/
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      0xe000ed04

                          AREA ||i.xPortStartScheduler||, CODE, READONLY, ALIGN=2

                  xPortStartScheduler PROC
;;;282     */
;;;283    BaseType_t xPortStartScheduler( void )
000000  b51c              PUSH     {r2-r4,lr}
;;;284    {
;;;285    	#if( configASSERT_DEFINED == 1 )
;;;286    	{
;;;287    		volatile uint32_t ulOriginalPriority;
;;;288    		volatile uint8_t * const pucFirstUserPriorityRegister = ( uint8_t * ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
000002  4822              LDR      r0,|L10.140|
;;;289    		volatile uint8_t ucMaxPriorityValue;
;;;290    
;;;291    		/* Determine the maximum priority from which ISR safe FreeRTOS API
;;;292    		functions can be called.  ISR safe functions are those that end in
;;;293    		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
;;;294    		ensure interrupt entry is as fast and simple as possible.
;;;295    
;;;296    		Save the interrupt priority value that is about to be clobbered. */
;;;297    		ulOriginalPriority = *pucFirstUserPriorityRegister;
000004  4601              MOV      r1,r0
000006  7809              LDRB     r1,[r1,#0]
000008  9101              STR      r1,[sp,#4]
;;;298    
;;;299    		/* Determine the number of priority bits available.  First write to all
;;;300    		possible bits. */
;;;301    		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
00000a  21ff              MOVS     r1,#0xff
00000c  4602              MOV      r2,r0
00000e  7011              STRB     r1,[r2,#0]
;;;302    
;;;303    		/* Read the value back to see how many bits stuck. */
;;;304    		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
000010  4601              MOV      r1,r0
000012  7809              LDRB     r1,[r1,#0]
000014  9100              STR      r1,[sp,#0]
;;;305    
;;;306    		/* Use the same mask on the maximum system call priority. */
;;;307    		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
000016  f89d1000          LDRB     r1,[sp,#0]
00001a  f0010110          AND      r1,r1,#0x10
00001e  4a1c              LDR      r2,|L10.144|
000020  7011              STRB     r1,[r2,#0]
;;;308    
;;;309    		/* Calculate the maximum acceptable priority group value for the number
;;;310    		of bits read back. */
;;;311    		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
000022  2107              MOVS     r1,#7
000024  4a1b              LDR      r2,|L10.148|
000026  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;312    		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
000028  e009              B        |L10.62|
                  |L10.42|
;;;313    		{
;;;314    			ulMaxPRIGROUPValue--;
00002a  491a              LDR      r1,|L10.148|
00002c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00002e  1e49              SUBS     r1,r1,#1
000030  4a18              LDR      r2,|L10.148|
000032  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;315    			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
000034  f89d1000          LDRB     r1,[sp,#0]
000038  0649              LSLS     r1,r1,#25
00003a  0e09              LSRS     r1,r1,#24
00003c  9100              STR      r1,[sp,#0]
                  |L10.62|
00003e  f89d1000          LDRB     r1,[sp,#0]            ;312
000042  f0010180          AND      r1,r1,#0x80           ;312
000046  2980              CMP      r1,#0x80              ;312
000048  d0ef              BEQ      |L10.42|
;;;316    		}
;;;317    
;;;318    		/* Shift the priority group value back to its position within the AIRCR
;;;319    		register. */
;;;320    		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
00004a  4912              LDR      r1,|L10.148|
00004c  6809              LDR      r1,[r1,#0]  ; ulMaxPRIGROUPValue
00004e  0209              LSLS     r1,r1,#8
000050  4a10              LDR      r2,|L10.148|
000052  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;321    		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
000054  4611              MOV      r1,r2
000056  8809              LDRH     r1,[r1,#0]  ; ulMaxPRIGROUPValue
000058  f40161e0          AND      r1,r1,#0x700
00005c  6011              STR      r1,[r2,#0]  ; ulMaxPRIGROUPValue
;;;322    
;;;323    		/* Restore the clobbered interrupt priority register to its original
;;;324    		value. */
;;;325    		*pucFirstUserPriorityRegister = ulOriginalPriority;
00005e  4a0b              LDR      r2,|L10.140|
000060  9901              LDR      r1,[sp,#4]
000062  7011              STRB     r1,[r2,#0]
;;;326    	}
;;;327    	#endif /* conifgASSERT_DEFINED */
;;;328    
;;;329    	/* Make PendSV and SysTick the lowest priority interrupts. */
;;;330    	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
000064  480c              LDR      r0,|L10.152|
000066  6800              LDR      r0,[r0,#0]
000068  f4400070          ORR      r0,r0,#0xf00000
00006c  490a              LDR      r1,|L10.152|
00006e  6008              STR      r0,[r1,#0]
;;;331    	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0404070          ORR      r0,r0,#0xf0000000
000078  6008              STR      r0,[r1,#0]
;;;332    
;;;333    	/* Start the timer that generates the tick ISR.  Interrupts are disabled
;;;334    	here already. */
;;;335    	vPortSetupTimerInterrupt();
00007a  f7fffffe          BL       vPortSetupTimerInterrupt
;;;336    
;;;337    	/* Initialise the critical nesting count ready for the first task. */
;;;338    	uxCriticalNesting = 0;
00007e  2000              MOVS     r0,#0
000080  4906              LDR      r1,|L10.156|
000082  6008              STR      r0,[r1,#0]  ; uxCriticalNesting
;;;339    
;;;340    	/* Start the first task. */
;;;341    	prvStartFirstTask();
000084  f7fffffe          BL       __asm___6_port_c_39a90d8d__prvStartFirstTask
;;;342    
;;;343    	/* Should not get here! */
;;;344    	return 0;
000088  2000              MOVS     r0,#0
;;;345    }
00008a  bd1c              POP      {r2-r4,pc}
;;;346    /*-----------------------------------------------------------*/
                          ENDP

                  |L10.140|
                          DCD      0xe000e400
                  |L10.144|
                          DCD      ucMaxSysCallPriority
                  |L10.148|
                          DCD      ulMaxPRIGROUPValue
                  |L10.152|
                          DCD      0xe000ed20
                  |L10.156|
                          DCD      uxCriticalNesting

                          AREA ||.data||, DATA, ALIGN=2

                  uxCriticalNesting
                          DCD      0xaaaaaaaa
                  ucMaxSysCallPriority
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  ulMaxPRIGROUPValue
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\FreeRTOS\\portable\\RVDS\\ARM_CM3\\port.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |SVC_Handler|
#line 243
|SVC_Handler| PROC
#line 244

 PRESERVE8

 ldr r3, =pxCurrentTCB  
 ldr r1, [r3]  
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0  
 isb
 mov r0, #0
 msr basepri, r0
 orr r14, #0xd
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_port_c_39a90d8d__prvStartFirstTask|
#line 260
|__asm___6_port_c_39a90d8d__prvStartFirstTask| PROC
#line 261

 PRESERVE8

 
 ldr r0, =0xE000ED08
 ldr r0, [r0]
 ldr r0, [r0]
 
 msr msp, r0
 
 cpsie i
 dsb
 isb
 
 svc 0
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |PendSV_Handler|
#line 388
|PendSV_Handler| PROC
#line 389

 extern uxCriticalNesting
 extern pxCurrentTCB
 extern vTaskSwitchContext

 PRESERVE8

 mrs r0, psp
 isb

 ldr r3, =pxCurrentTCB  
 ldr r2, [r3]

 stmdb r0!, {r4-r11}  
 str r0, [r2]  

 stmdb sp!, {r3, r14}
 mov r0, #( 0x01 << (8 - 4) )
 msr basepri, r0
 bl vTaskSwitchContext
 mov r0, #0
 msr basepri, r0
 ldmia sp!, {r3, r14}

 ldr r1, [r3]
 ldr r0, [r1]  
 ldmia r0!, {r4-r11}  
 msr psp, r0
 isb
 bx r14
 nop
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |ulPortSetInterruptMask|
#line 622
|ulPortSetInterruptMask| PROC
#line 623

 PRESERVE8

 mrs r0, basepri
 mov r1, #( 0x01 << (8 - 4) )
 msr basepri, r1
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortClearInterruptMask|
#line 633
|vPortClearInterruptMask| PROC
#line 634

 PRESERVE8

 msr basepri, r0
 bx r14
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |vPortGetIPSR|
#line 642
|vPortGetIPSR| PROC
#line 643

 PRESERVE8

 mrs r0, ipsr
 bx r14
	ENDP

;*** End   embedded assembler ***
