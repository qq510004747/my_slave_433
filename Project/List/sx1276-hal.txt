; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\sx1276-hal.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\sx1276-hal.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\sx1276-hal.crf ..\BSP\SX1278\platform\sx12xxEiger\sx1276-Hal.c]
                          THUMB

                          AREA ||i.SX1276InitIo||, CODE, READONLY, ALIGN=2

                  SX1276InitIo PROC
;;;100    
;;;101    void SX1276InitIo( void )
000000  b508              PUSH     {r3,lr}
;;;102    {
;;;103        GPIO_InitTypeDef GPIO_InitStructure;
;;;104    
;;;105    
;;;106        RCC_APB2PeriphClockCmd( RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
000002  2101              MOVS     r1,#1
000004  201d              MOVS     r0,#0x1d
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107                                RCC_APB2Periph_GPIOC | RCC_APB2Periph_AFIO, ENABLE );
;;;108    
;;;109        GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;110        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;111         // Configure SPI-->NSS as output
;;;112        GPIO_InitStructure.GPIO_Pin = NSS_PIN;
000016  2010              MOVS     r0,#0x10
000018  f8ad0000          STRH     r0,[sp,#0]
;;;113        GPIO_Init( NSS_IOPORT, &GPIO_InitStructure );
00001c  4669              MOV      r1,sp
00001e  4825              LDR      r0,|L1.180|
000020  f7fffffe          BL       GPIO_Init
;;;114    	GPIO_WriteBit( NSS_IOPORT, NSS_PIN, Bit_SET );
000024  2201              MOVS     r2,#1
000026  2110              MOVS     r1,#0x10
000028  4822              LDR      r0,|L1.180|
00002a  f7fffffe          BL       GPIO_WriteBit
;;;115    
;;;116    	
;;;117    	//配置射频开关芯片控制管脚   RXE-->CTRL   TXE--> /CTRL
;;;118    	GPIO_InitStructure.GPIO_Pin = RXE_PIN;
00002e  f44f7080          MOV      r0,#0x100
000032  f8ad0000          STRH     r0,[sp,#0]
;;;119    	GPIO_Init(RXE_PORT, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  481f              LDR      r0,|L1.184|
00003a  f7fffffe          BL       GPIO_Init
;;;120    
;;;121    	GPIO_InitStructure.GPIO_Pin = TXE_PIN;
00003e  f44f7000          MOV      r0,#0x200
000042  f8ad0000          STRH     r0,[sp,#0]
;;;122    	GPIO_Init(TXE_PORT, &GPIO_InitStructure);	
000046  4669              MOV      r1,sp
000048  481b              LDR      r0,|L1.184|
00004a  f7fffffe          BL       GPIO_Init
;;;123    	//默认设设置为接收状态
;;;124    	Set_RF_Switch_RX();	
00004e  f7fffffe          BL       Set_RF_Switch_RX
;;;125    	
;;;126        // Configure radio DIO as inputs
;;;127        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000052  2004              MOVS     r0,#4
000054  f88d0003          STRB     r0,[sp,#3]
;;;128    
;;;129        // Configure DIO0
;;;130        GPIO_InitStructure.GPIO_Pin =  DIO0_PIN;
000058  2008              MOVS     r0,#8
00005a  f8ad0000          STRH     r0,[sp,#0]
;;;131        GPIO_Init( DIO0_IOPORT, &GPIO_InitStructure );
00005e  4669              MOV      r1,sp
000060  4815              LDR      r0,|L1.184|
000062  f7fffffe          BL       GPIO_Init
;;;132        
;;;133        // Configure DIO1
;;;134        GPIO_InitStructure.GPIO_Pin =  DIO1_PIN;
000066  2004              MOVS     r0,#4
000068  f8ad0000          STRH     r0,[sp,#0]
;;;135        GPIO_Init( DIO1_IOPORT, &GPIO_InitStructure );
00006c  4669              MOV      r1,sp
00006e  4812              LDR      r0,|L1.184|
000070  f7fffffe          BL       GPIO_Init
;;;136        
;;;137        // Configure DIO2
;;;138        GPIO_InitStructure.GPIO_Pin =  DIO2_PIN;
000074  2002              MOVS     r0,#2
000076  f8ad0000          STRH     r0,[sp,#0]
;;;139        GPIO_Init( DIO2_IOPORT, &GPIO_InitStructure );
00007a  4669              MOV      r1,sp
00007c  480e              LDR      r0,|L1.184|
00007e  f7fffffe          BL       GPIO_Init
;;;140        
;;;141        // REAMARK: DIO3/4/5 configured are connected to IO expander
;;;142    
;;;143        // Configure DIO3 as input
;;;144        GPIO_InitStructure.GPIO_Pin =  DIO3_PIN;
000082  2001              MOVS     r0,#1
000084  f8ad0000          STRH     r0,[sp,#0]
;;;145        GPIO_Init( DIO3_IOPORT, &GPIO_InitStructure );
000088  4669              MOV      r1,sp
00008a  480b              LDR      r0,|L1.184|
00008c  f7fffffe          BL       GPIO_Init
;;;146        // Configure DIO4 as input
;;;147        GPIO_InitStructure.GPIO_Pin =  DIO4_PIN;
000090  f44f6000          MOV      r0,#0x800
000094  f8ad0000          STRH     r0,[sp,#0]
;;;148        GPIO_Init( DIO4_IOPORT, &GPIO_InitStructure );
000098  4669              MOV      r1,sp
00009a  4806              LDR      r0,|L1.180|
00009c  f7fffffe          BL       GPIO_Init
;;;149        // Configure DIO5 as input
;;;150    	GPIO_InitStructure.GPIO_Pin =  DIO5_PIN;
0000a0  f44f5080          MOV      r0,#0x1000
0000a4  f8ad0000          STRH     r0,[sp,#0]
;;;151        GPIO_Init( DIO5_IOPORT, &GPIO_InitStructure );
0000a8  4669              MOV      r1,sp
0000aa  4802              LDR      r0,|L1.180|
0000ac  f7fffffe          BL       GPIO_Init
;;;152    }
0000b0  bd08              POP      {r3,pc}
;;;153    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L1.180|
                          DCD      0x40010800
                  |L1.184|
                          DCD      0x40011000

                          AREA ||i.SX1276Read||, CODE, READONLY, ALIGN=1

                  SX1276Read PROC
;;;186    
;;;187    void SX1276Read( uint8_t addr, uint8_t *data )
000000  b570              PUSH     {r4-r6,lr}
;;;188    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;189        SX1276ReadBuffer( addr, data, 1 );
000006  2201              MOVS     r2,#1
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SX1276ReadBuffer
;;;190    }
000010  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP


                          AREA ||i.SX1276ReadBuffer||, CODE, READONLY, ALIGN=2

                  SX1276ReadBuffer PROC
;;;208    
;;;209    void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;210    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;211        uint8_t i;
;;;212    
;;;213        //NSS = 0;
;;;214        GPIO_WriteBit( NSS_IOPORT, NSS_PIN, Bit_RESET );
00000a  2200              MOVS     r2,#0
00000c  2110              MOVS     r1,#0x10
00000e  480c              LDR      r0,|L3.64|
000010  f7fffffe          BL       GPIO_WriteBit
;;;215    
;;;216        SpiInOut( addr & 0x7F );
000014  f005007f          AND      r0,r5,#0x7f
000018  f7fffffe          BL       SpiInOut
;;;217    
;;;218        for( i = 0; i < size; i++ )
00001c  2400              MOVS     r4,#0
00001e  e005              B        |L3.44|
                  |L3.32|
;;;219        {
;;;220            buffer[i] = SpiInOut( 0 );
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       SpiInOut
000026  5530              STRB     r0,[r6,r4]
000028  1c60              ADDS     r0,r4,#1              ;218
00002a  b2c4              UXTB     r4,r0                 ;218
                  |L3.44|
00002c  42bc              CMP      r4,r7                 ;218
00002e  dbf7              BLT      |L3.32|
;;;221        }
;;;222    
;;;223        //NSS = 1;
;;;224        GPIO_WriteBit( NSS_IOPORT, NSS_PIN, Bit_SET );
000030  2201              MOVS     r2,#1
000032  2110              MOVS     r1,#0x10
000034  4802              LDR      r0,|L3.64|
000036  f7fffffe          BL       GPIO_WriteBit
;;;225    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;226    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x40010800

                          AREA ||i.SX1276ReadDio0||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio0 PROC
;;;236    
;;;237    inline uint8_t SX1276ReadDio0( void )
000000  b510              PUSH     {r4,lr}
;;;238    {
;;;239        return GPIO_ReadInputDataBit( DIO0_IOPORT, DIO0_PIN );
000002  2108              MOVS     r1,#8
000004  4801              LDR      r0,|L4.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
;;;240    }
00000a  bd10              POP      {r4,pc}
;;;241    
                          ENDP

                  |L4.12|
                          DCD      0x40011000

                          AREA ||i.SX1276ReadDio1||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio1 PROC
;;;241    
;;;242    inline uint8_t SX1276ReadDio1( void )
000000  b510              PUSH     {r4,lr}
;;;243    {
;;;244        return GPIO_ReadInputDataBit( DIO1_IOPORT, DIO1_PIN );
000002  2104              MOVS     r1,#4
000004  4801              LDR      r0,|L5.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
;;;245    }
00000a  bd10              POP      {r4,pc}
;;;246    
                          ENDP

                  |L5.12|
                          DCD      0x40011000

                          AREA ||i.SX1276ReadDio2||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio2 PROC
;;;246    
;;;247    inline uint8_t SX1276ReadDio2( void )
000000  b510              PUSH     {r4,lr}
;;;248    {
;;;249        return GPIO_ReadInputDataBit( DIO2_IOPORT, DIO2_PIN );
000002  2102              MOVS     r1,#2
000004  4801              LDR      r0,|L6.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
;;;250    }
00000a  bd10              POP      {r4,pc}
;;;251    
                          ENDP

                  |L6.12|
                          DCD      0x40011000

                          AREA ||i.SX1276ReadDio3||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio3 PROC
;;;251    
;;;252    inline uint8_t SX1276ReadDio3( void )
000000  b510              PUSH     {r4,lr}
;;;253    {
;;;254        return GPIO_ReadInputDataBit( DIO3_IOPORT, DIO3_PIN );
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L7.12|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
;;;255    }
00000a  bd10              POP      {r4,pc}
;;;256    
                          ENDP

                  |L7.12|
                          DCD      0x40011000

                          AREA ||i.SX1276ReadDio4||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio4 PROC
;;;256    
;;;257    inline uint8_t SX1276ReadDio4( void )
000000  b510              PUSH     {r4,lr}
;;;258    {
;;;259        return GPIO_ReadInputDataBit( DIO4_IOPORT, DIO4_PIN );
000002  f44f6100          MOV      r1,#0x800
000006  4802              LDR      r0,|L8.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
;;;260    }
00000c  bd10              POP      {r4,pc}
;;;261    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40010800

                          AREA ||i.SX1276ReadDio5||, CODE, READONLY, ALIGN=2

                  SX1276ReadDio5 PROC
;;;261    
;;;262    inline uint8_t SX1276ReadDio5( void )
000000  b510              PUSH     {r4,lr}
;;;263    {
;;;264        return GPIO_ReadInputDataBit( DIO5_IOPORT, DIO5_PIN );
000002  f44f5180          MOV      r1,#0x1000
000006  4802              LDR      r0,|L9.16|
000008  f7fffffe          BL       GPIO_ReadInputDataBit
;;;265    }
00000c  bd10              POP      {r4,pc}
;;;266    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40010800

                          AREA ||i.SX1276ReadFifo||, CODE, READONLY, ALIGN=1

                  SX1276ReadFifo PROC
;;;231    
;;;232    void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
000000  b570              PUSH     {r4-r6,lr}
;;;233    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;234        SX1276ReadBuffer( 0, buffer, size );
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SX1276ReadBuffer
;;;235    }
000010  bd70              POP      {r4-r6,pc}
;;;236    
                          ENDP


                          AREA ||i.SX1276SetReset||, CODE, READONLY, ALIGN=2

                  SX1276SetReset PROC
;;;153    
;;;154    void SX1276SetReset( uint8_t state )
000000  b538              PUSH     {r3-r5,lr}
;;;155    {
000002  4604              MOV      r4,r0
;;;156        GPIO_InitTypeDef GPIO_InitStructure;
;;;157    
;;;158        if( state == RADIO_RESET_ON )
000004  2c01              CMP      r4,#1
000006  d112              BNE      |L11.46|
;;;159        {
;;;160            // Configure RESET as output
;;;161    		GPIO_InitStructure.GPIO_Pin = RESET_PIN;
000008  2010              MOVS     r0,#0x10
00000a  f8ad0000          STRH     r0,[sp,#0]
;;;162    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000e  2003              MOVS     r0,#3
000010  f88d0002          STRB     r0,[sp,#2]
;;;163            GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
000014  2010              MOVS     r0,#0x10
000016  f88d0003          STRB     r0,[sp,#3]
;;;164            GPIO_Init( RESET_IOPORT, &GPIO_InitStructure );
00001a  4669              MOV      r1,sp
00001c  480d              LDR      r0,|L11.84|
00001e  f7fffffe          BL       GPIO_Init
;;;165    		
;;;166    		// Set RESET pin to 0
;;;167            GPIO_WriteBit( RESET_IOPORT, RESET_PIN, Bit_RESET );
000022  2200              MOVS     r2,#0
000024  2110              MOVS     r1,#0x10
000026  480b              LDR      r0,|L11.84|
000028  f7fffffe          BL       GPIO_WriteBit
00002c  e011              B        |L11.82|
                  |L11.46|
;;;168        }
;;;169        else
;;;170        {
;;;171    		GPIO_InitStructure.GPIO_Pin =  RESET_PIN;
00002e  2010              MOVS     r0,#0x10
000030  f8ad0000          STRH     r0,[sp,#0]
;;;172            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000034  2003              MOVS     r0,#3
000036  f88d0002          STRB     r0,[sp,#2]
;;;173    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
00003a  2010              MOVS     r0,#0x10
00003c  f88d0003          STRB     r0,[sp,#3]
;;;174            GPIO_Init( RESET_IOPORT, &GPIO_InitStructure );
000040  4669              MOV      r1,sp
000042  4804              LDR      r0,|L11.84|
000044  f7fffffe          BL       GPIO_Init
;;;175    		
;;;176    		// Set RESET pin to 1
;;;177            GPIO_WriteBit( RESET_IOPORT, RESET_PIN, Bit_SET );
000048  2201              MOVS     r2,#1
00004a  2110              MOVS     r1,#0x10
00004c  4801              LDR      r0,|L11.84|
00004e  f7fffffe          BL       GPIO_WriteBit
                  |L11.82|
;;;178    
;;;179        }
;;;180    }
000052  bd38              POP      {r3-r5,pc}
;;;181    
                          ENDP

                  |L11.84|
                          DCD      0x40011000

                          AREA ||i.SX1276Write||, CODE, READONLY, ALIGN=1

                  SX1276Write PROC
;;;181    
;;;182    void SX1276Write( uint8_t addr, uint8_t data )
000000  b513              PUSH     {r0,r1,r4,lr}
;;;183    {
000002  4604              MOV      r4,r0
;;;184        SX1276WriteBuffer( addr, &data, 1 );
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       SX1276WriteBuffer
;;;185    }
00000e  bd1c              POP      {r2-r4,pc}
;;;186    
                          ENDP


                          AREA ||i.SX1276WriteBuffer||, CODE, READONLY, ALIGN=2

                  SX1276WriteBuffer PROC
;;;191    
;;;192    void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;193    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;194        uint8_t i;
;;;195    
;;;196        //NSS = 0;
;;;197        GPIO_WriteBit( NSS_IOPORT, NSS_PIN, Bit_RESET );
00000a  2200              MOVS     r2,#0
00000c  2110              MOVS     r1,#0x10
00000e  480b              LDR      r0,|L13.60|
000010  f7fffffe          BL       GPIO_WriteBit
;;;198    
;;;199        SpiInOut( addr | 0x80 );
000014  f0450080          ORR      r0,r5,#0x80
000018  f7fffffe          BL       SpiInOut
;;;200        for( i = 0; i < size; i++ )
00001c  2400              MOVS     r4,#0
00001e  e004              B        |L13.42|
                  |L13.32|
;;;201        {
;;;202            SpiInOut( buffer[i] );
000020  5d30              LDRB     r0,[r6,r4]
000022  f7fffffe          BL       SpiInOut
000026  1c60              ADDS     r0,r4,#1              ;200
000028  b2c4              UXTB     r4,r0                 ;200
                  |L13.42|
00002a  42bc              CMP      r4,r7                 ;200
00002c  dbf8              BLT      |L13.32|
;;;203        }
;;;204    
;;;205        //NSS = 1;
;;;206        GPIO_WriteBit( NSS_IOPORT, NSS_PIN, Bit_SET );
00002e  2201              MOVS     r2,#1
000030  2110              MOVS     r1,#0x10
000032  4802              LDR      r0,|L13.60|
000034  f7fffffe          BL       GPIO_WriteBit
;;;207    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;208    
                          ENDP

                  |L13.60|
                          DCD      0x40010800

                          AREA ||i.SX1276WriteFifo||, CODE, READONLY, ALIGN=1

                  SX1276WriteFifo PROC
;;;226    
;;;227    void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
000000  b570              PUSH     {r4-r6,lr}
;;;228    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;229        SX1276WriteBuffer( 0, buffer, size );
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       SX1276WriteBuffer
;;;230    }
000010  bd70              POP      {r4-r6,pc}
;;;231    
                          ENDP


                          AREA ||i.SX1276WriteRxTx||, CODE, READONLY, ALIGN=1

                  SX1276WriteRxTx PROC
;;;268    //射频芯片收发切换
;;;269    inline void SX1276WriteRxTx( uint8_t txEnable )
000000  b510              PUSH     {r4,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271        if( txEnable != 0 )
000004  b114              CBZ      r4,|L15.12|
;;;272        {
;;;273    		Set_RF_Switch_TX(); //单片机将射频开关芯片切换成发射状态
000006  f7fffffe          BL       Set_RF_Switch_TX
00000a  e001              B        |L15.16|
                  |L15.12|
;;;274    //        IoePinOn( FEM_CTX_PIN );
;;;275    //        IoePinOff( FEM_CPS_PIN );
;;;276        }
;;;277        else
;;;278        {
;;;279    		Set_RF_Switch_RX();  //单片机将射频开关芯片切换成接收状态
00000c  f7fffffe          BL       Set_RF_Switch_RX
                  |L15.16|
;;;280    //        IoePinOff( FEM_CTX_PIN );
;;;281    //        IoePinOn( FEM_CPS_PIN );
;;;282        }
;;;283    }
000010  bd10              POP      {r4,pc}
;;;284    
                          ENDP


                          AREA ||i.Set_RF_Switch_RX||, CODE, READONLY, ALIGN=2

                  Set_RF_Switch_RX PROC
;;;87     
;;;88     void Set_RF_Switch_RX(void)
000000  b510              PUSH     {r4,lr}
;;;89     {
;;;90     	RXE_HIGH();
000002  f44f7180          MOV      r1,#0x100
000006  4804              LDR      r0,|L16.24|
000008  f7fffffe          BL       GPIO_SetBits
;;;91     	TXE_LOW();
00000c  f44f7100          MOV      r1,#0x200
000010  4801              LDR      r0,|L16.24|
000012  f7fffffe          BL       GPIO_ResetBits
;;;92     }
000016  bd10              POP      {r4,pc}
;;;93     
                          ENDP

                  |L16.24|
                          DCD      0x40011000

                          AREA ||i.Set_RF_Switch_TX||, CODE, READONLY, ALIGN=2

                  Set_RF_Switch_TX PROC
;;;93     
;;;94     void Set_RF_Switch_TX(void)
000000  b510              PUSH     {r4,lr}
;;;95     {
;;;96     	RXE_LOW();
000002  f44f7180          MOV      r1,#0x100
000006  4804              LDR      r0,|L17.24|
000008  f7fffffe          BL       GPIO_ResetBits
;;;97     	TXE_HIGH();
00000c  f44f7100          MOV      r1,#0x200
000010  4801              LDR      r0,|L17.24|
000012  f7fffffe          BL       GPIO_SetBits
;;;98     }
000016  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L17.24|
                          DCD      0x40011000
