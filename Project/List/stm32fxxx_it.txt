; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32fxxx_it.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32fxxx_it.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\BSP_USART2 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I.\RTE\_STM32F10x________2.0.0 -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\stm32fxxx_it.crf ..\BSP\SX1278\platform\sx12xxEiger\stm32fxxx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
;;;167      */
;;;168    void BusFault_Handler(void)
000000  bf00              NOP      
                  |L1.2|
;;;169    {
;;;170      /* Go to infinite loop when Bus Fault exception occurs */
;;;171      while (1)
000002  e7fe              B        |L1.2|
;;;172      {
;;;173      }
;;;174    }
;;;175    
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;202      */
;;;203    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;204    {
;;;205    }
;;;206    
                          ENDP


                          AREA ||i.HardFault_Handler_C||, CODE, READONLY, ALIGN=1

                  HardFault_Handler_C PROC
;;;104    // called from HardFault_Handler in file xxx.s
;;;105    void HardFault_Handler_C( unsigned int *args )
000000  bf00              NOP      
                  |L3.2|
;;;106    {
;;;107    #if 0
;;;108        int8_t s[100];
;;;109        unsigned int stacked_r0;
;;;110        unsigned int stacked_r1;
;;;111        unsigned int stacked_r2;
;;;112        unsigned int stacked_r3;
;;;113        unsigned int stacked_r12;
;;;114        unsigned int stacked_lr;
;;;115        unsigned int stacked_pc;
;;;116        unsigned int stacked_psr;
;;;117    
;;;118        stacked_r0 = ( ( unsigned long) args[0] );
;;;119        stacked_r1 = ( ( unsigned long) args[1] );
;;;120        stacked_r2 = ( ( unsigned long) args[2] );
;;;121        stacked_r3 = ( ( unsigned long) args[3] );
;;;122    
;;;123        stacked_r12 = ( ( unsigned long) args[4] );
;;;124        stacked_lr = ( ( unsigned long) args[5] );
;;;125        stacked_pc = ( ( unsigned long) args[6] );
;;;126        stacked_psr = ( ( unsigned long) args[7] );
;;;127    
;;;128        sprintf( s, "\n\n[Hard fault handler - all numbers in hex]\n" );
;;;129        sprintf( s, "R0 = %x\n", stacked_r0 );
;;;130        sprintf( s, "R1 = %x\n", stacked_r1 );
;;;131        sprintf( s, "R2 = %x\n", stacked_r2 );
;;;132        sprintf( s, "R3 = %x\n", stacked_r3 );
;;;133        sprintf( s, "R12 = %x\n", stacked_r12 );
;;;134        sprintf( s, "LR [R14] = %x  subroutine call return address\n", stacked_lr );
;;;135        sprintf( s, "PC [R15] = %x  program counter\n", stacked_pc );
;;;136        sprintf( s, "PSR = %x\n", stacked_psr );
;;;137        sprintf( s, "BFAR = %x\n", ( *( ( volatile unsigned long * )( 0xE000ED38 ) ) ) );
;;;138        sprintf( s, "CFSR = %x\n", ( *( ( volatile unsigned long * )( 0xE000ED28 ) ) ) );
;;;139        sprintf( s, "HFSR = %x\n", ( *( ( volatile unsigned long * )( 0xE000ED2C ) ) ) );
;;;140        sprintf( s, "DFSR = %x\n", ( *( ( volatile unsigned long * )( 0xE000ED30 ) ) ) );
;;;141        sprintf( s, "AFSR = %x\n", ( *( ( volatile unsigned long * )( 0xE000ED3C ) ) ) );
;;;142        sprintf( s, "SCB_SHCSR = %x\n", SCB->SHCSR );
;;;143    #endif
;;;144        /* Go to infinite loop when Hard Fault exception occurs */
;;;145        while( 1 )
000002  e7fe              B        |L3.2|
;;;146        {
;;;147        }
;;;148    }
;;;149    
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
;;;154      */
;;;155    void MemManage_Handler(void)
000000  bf00              NOP      
                  |L4.2|
;;;156    {
;;;157      /* Go to infinite loop when Memory Manage exception occurs */
;;;158      while (1)
000002  e7fe              B        |L4.2|
;;;159      {
;;;160      }
;;;161    }
;;;162    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;75       */
;;;76     void NMI_Handler(void)
000000  4770              BX       lr
;;;77     {
;;;78     }
;;;79     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;211      */
;;;212    void PendSV_Handler(void)
000000  4770              BX       lr
;;;213    {
;;;214    }
;;;215    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;193      */
;;;194    void SVC_Handler(void)
000000  4770              BX       lr
;;;195    {
;;;196    }
;;;197    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;220      */
;;;221    void SysTick_Handler(void)
000000  4802              LDR      r0,|L8.12|
;;;222    {
;;;223        TickCounter++;
000002  6800              LDR      r0,[r0,#0]  ; TickCounter
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L8.12|
000008  6008              STR      r0,[r1,#0]  ; TickCounter
;;;224    }
00000a  4770              BX       lr
;;;225    
                          ENDP

                  |L8.12|
                          DCD      TickCounter

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
;;;180      */
;;;181    void UsageFault_Handler(void)
000000  bf00              NOP      
                  |L9.2|
;;;182    {
;;;183      /* Go to infinite loop when Usage Fault exception occurs */
;;;184      while (1)
000002  e7fe              B        |L9.2|
;;;185      {
;;;186      }
;;;187    }
;;;188    
                          ENDP

