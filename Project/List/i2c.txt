; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\i2c.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I.\RTE\_STM32F10x________2.0.0 -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\i2c.crf ..\BSP\SX1278\platform\sx12xxEiger\i2c.c]
                          THUMB

                          AREA ||i.I2cConfig||, CODE, READONLY, ALIGN=2

                  I2cConfig PROC
;;;559      */
;;;560    static void I2cConfig( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;561    {
;;;562        I2C_InitTypeDef I2C_InitStructure;
;;;563    
;;;564        /* I2C_INTERFACE configuration */
;;;565        I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
000002  2000              MOVS     r0,#0
000004  f8ad0004          STRH     r0,[sp,#4]
;;;566        I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
000008  f64b70ff          MOV      r0,#0xbfff
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;567        I2C_InitStructure.I2C_OwnAddress1 = 0x00;
000010  2000              MOVS     r0,#0
000012  f8ad0008          STRH     r0,[sp,#8]
;;;568        I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;569        I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
00001e  0100              LSLS     r0,r0,#4
000020  f8ad000c          STRH     r0,[sp,#0xc]
;;;570        I2C_InitStructure.I2C_ClockSpeed = I2C_SPEED;
000024  4803              LDR      r0,|L1.52|
000026  9000              STR      r0,[sp,#0]
;;;571        I2C_Init( I2C_INTERFACE, &I2C_InitStructure );
000028  4669              MOV      r1,sp
00002a  4803              LDR      r0,|L1.56|
00002c  f7fffffe          BL       I2C_Init
;;;572    
;;;573    #if defined( STM32F4XX ) || defined( STM32F2XX )
;;;574    
;;;575        /* I2C Peripheral Enable */
;;;576        I2C_Cmd( I2C_INTERFACE, ENABLE );
;;;577    
;;;578    #endif
;;;579    
;;;580    }
000030  bd1f              POP      {r0-r4,pc}
;;;581    #if 0
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x00061a80
                  |L1.56|
                          DCD      0x40005400

                          AREA ||i.I2cFsmcClkEnable||, CODE, READONLY, ALIGN=1

                  I2cFsmcClkEnable PROC
;;;22     
;;;23     static void I2cFsmcClkEnable( bool enable )
000000  b538              PUSH     {r3-r5,lr}
;;;24     {
000002  4604              MOV      r4,r0
;;;25         __IO int32_t i;
;;;26         
;;;27         if( enable == true )
000004  2c01              CMP      r4,#1
000006  d10f              BNE      |L2.40|
;;;28         {
;;;29             for( i = 0; i < 10000; i++ );
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  e002              B        |L2.20|
                  |L2.14|
00000e  9800              LDR      r0,[sp,#0]
000010  1c40              ADDS     r0,r0,#1
000012  9000              STR      r0,[sp,#0]
                  |L2.20|
000014  f2427110          MOV      r1,#0x2710
000018  9800              LDR      r0,[sp,#0]
00001a  4288              CMP      r0,r1
00001c  dbf7              BLT      |L2.14|
;;;30             RCC_AHBPeriphClockCmd( RCC_AHBPeriph_FSMC, ENABLE );
00001e  2101              MOVS     r1,#1
000020  0208              LSLS     r0,r1,#8
000022  f7fffffe          BL       RCC_AHBPeriphClockCmd
000026  e00f              B        |L2.72|
                  |L2.40|
;;;31         }
;;;32         else
;;;33         {
;;;34             RCC_AHBPeriphClockCmd( RCC_AHBPeriph_FSMC, DISABLE );
000028  2100              MOVS     r1,#0
00002a  f44f7080          MOV      r0,#0x100
00002e  f7fffffe          BL       RCC_AHBPeriphClockCmd
;;;35             for( i = 0; i < 10000; i++ );
000032  2000              MOVS     r0,#0
000034  9000              STR      r0,[sp,#0]
000036  e002              B        |L2.62|
                  |L2.56|
000038  9800              LDR      r0,[sp,#0]
00003a  1c40              ADDS     r0,r0,#1
00003c  9000              STR      r0,[sp,#0]
                  |L2.62|
00003e  f2427110          MOV      r1,#0x2710
000042  9800              LDR      r0,[sp,#0]
000044  4288              CMP      r0,r1
000046  dbf7              BLT      |L2.56|
                  |L2.72|
;;;36         }
;;;37     }
000048  bd38              POP      {r3-r5,pc}
;;;38     
                          ENDP


                          AREA ||i.I2cGpioConfig||, CODE, READONLY, ALIGN=2

                  I2cGpioConfig PROC
;;;506      */
;;;507    static void I2cGpioConfig( void )
000000  b508              PUSH     {r3,lr}
;;;508    {
;;;509        GPIO_InitTypeDef GPIO_InitStructure;
;;;510    
;;;511        /* Enable I2C_INTERFACE and I2C_GPIO_PORT & Alternate Function clocks */
;;;512        RCC_APB1PeriphClockCmd( I2C_CLK, ENABLE );
000002  2101              MOVS     r1,#1
000004  0548              LSLS     r0,r1,#21
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;513    
;;;514    #if defined( STM32F4XX ) || defined( STM32F2XX )
;;;515    
;;;516        RCC_AHB1PeriphClockCmd( I2C_SCL_GPIO_CLK | I2C_SDA_GPIO_CLK, ENABLE );
;;;517    
;;;518        /* Configure I2C pins: SCL, SDA */
;;;519        GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN | I2C_SDA_PIN;
;;;520        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;521        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;522        GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
;;;523        GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;524        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;525        GPIO_Init( I2C_SCL_GPIO_PORT, &GPIO_InitStructure );
;;;526        GPIO_Init( I2C_SDA_GPIO_PORT, &GPIO_InitStructure );
;;;527    
;;;528        /* Connect Pxx to I2C_SCL, I2C_SDA */
;;;529        GPIO_PinAFConfig( I2C_SCL_GPIO_PORT, I2C_SCL_SOURCE, I2C_SCL_AF );
;;;530        GPIO_PinAFConfig( I2C_SDA_GPIO_PORT, I2C_SDA_SOURCE, I2C_SDA_AF );  
;;;531    
;;;532    #else
;;;533    
;;;534        RCC_APB2PeriphClockCmd( I2C_SCL_GPIO_CLK | I2C_SDA_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE );
00000a  2101              MOVS     r1,#1
00000c  2009              MOVS     r0,#9
00000e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;535    
;;;536        /* Reset I2C_INTERFACE IP */
;;;537        RCC_APB1PeriphResetCmd( I2C_CLK, ENABLE );
000012  2101              MOVS     r1,#1
000014  0548              LSLS     r0,r1,#21
000016  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;538    
;;;539        /* Release reset signal of I2C_INTERFACE IP */
;;;540        RCC_APB1PeriphResetCmd( I2C_CLK, DISABLE );
00001a  2100              MOVS     r1,#0
00001c  f44f1000          MOV      r0,#0x200000
000020  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;541    
;;;542        /* I2C_INTERFACE SCL and SDA pins configuration */
;;;543        GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN;
000024  2040              MOVS     r0,#0x40
000026  f8ad0000          STRH     r0,[sp,#0]
;;;544        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
00002a  2001              MOVS     r0,#1
00002c  f88d0002          STRB     r0,[sp,#2]
;;;545        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_OD;
000030  201c              MOVS     r0,#0x1c
000032  f88d0003          STRB     r0,[sp,#3]
;;;546        GPIO_Init( I2C_SCL_GPIO_PORT, &GPIO_InitStructure );
000036  4669              MOV      r1,sp
000038  4805              LDR      r0,|L3.80|
00003a  f7fffffe          BL       GPIO_Init
;;;547    
;;;548        /* I2C_INTERFACE SCL and SDA pins configuration */
;;;549        GPIO_InitStructure.GPIO_Pin = I2C_SDA_PIN;
00003e  2080              MOVS     r0,#0x80
000040  f8ad0000          STRH     r0,[sp,#0]
;;;550        GPIO_Init( I2C_SDA_GPIO_PORT, &GPIO_InitStructure );
000044  4669              MOV      r1,sp
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       GPIO_Init
;;;551    
;;;552    #endif
;;;553    }
00004c  bd08              POP      {r3,pc}
;;;554    
                          ENDP

00004e  0000              DCW      0x0000
                  |L3.80|
                          DCD      0x40010c00

                          AREA ||i.I2cInit||, CODE, READONLY, ALIGN=2

                  I2cInit PROC
;;;40     
;;;41     void I2cInit( void )
000000  b510              PUSH     {r4,lr}
;;;42     {
;;;43         I2C_DeInit( I2C_INTERFACE );
000002  4804              LDR      r0,|L4.20|
000004  f7fffffe          BL       I2C_DeInit
;;;44     
;;;45         I2cGpioConfig( );
000008  f7fffffe          BL       I2cGpioConfig
;;;46         I2cConfig( );
00000c  f7fffffe          BL       I2cConfig
;;;47     }
000010  bd10              POP      {r4,pc}
;;;48     
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40005400

                          AREA ||i.I2cRead||, CODE, READONLY, ALIGN=2

                  I2cRead PROC
;;;122    
;;;123    uint8_t I2cRead( uint8_t deviceAddr, uint8_t *data )
000000  b5f8              PUSH     {r3-r7,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;125        __IO int32_t i;
;;;126        int32_t size = 1;
000006  2501              MOVS     r5,#1
;;;127        uint32_t timeOut;
;;;128    
;;;129        I2cFsmcClkEnable( false );
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       I2cFsmcClkEnable
;;;130        
;;;131        /* Test on BUSY Flag */
;;;132        timeOut = TIMEOUT_MAX;
00000e  f44f5440          MOV      r4,#0x3000
;;;133        while( I2C_GetFlagStatus( I2C_INTERFACE, I2C_FLAG_BUSY) ) 
000012  e00a              B        |L5.42|
                  |L5.20|
;;;134        {
;;;135            if( ( timeOut-- ) == 0 )
000014  1e20              SUBS     r0,r4,#0
000016  f1a40401          SUB      r4,r4,#1
00001a  d106              BNE      |L5.42|
;;;136            {
;;;137                I2cInit( );
00001c  f7fffffe          BL       I2cInit
;;;138                I2cFsmcClkEnable( true );
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       I2cFsmcClkEnable
;;;139                return( SX_TIMEOUT );
000026  2005              MOVS     r0,#5
                  |L5.40|
;;;140            }
;;;141        }
;;;142    
;;;143        /* Send START condition a second time */
;;;144        I2C_GenerateSTART( I2C_INTERFACE, ENABLE );
;;;145    
;;;146        /* Test on EV5 and clear it */
;;;147        timeOut = TIMEOUT_MAX;
;;;148        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_MODE_SELECT ) )
;;;149        {
;;;150            if( ( timeOut-- ) == 0 )
;;;151            {
;;;152                I2cInit( );
;;;153                I2cFsmcClkEnable( true );
;;;154                return( SX_TIMEOUT );
;;;155            }
;;;156        }
;;;157    
;;;158        /* Send device's address for read */
;;;159        I2C_Send7bitAddress( I2C_INTERFACE, deviceAddr, I2C_Direction_Receiver );
;;;160    
;;;161        /* Test on EV6 and clear it */
;;;162        timeOut = TIMEOUT_MAX;
;;;163        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ) )
;;;164        {
;;;165            if( ( timeOut-- ) == 0 )
;;;166            {
;;;167                I2cInit( );
;;;168                I2cFsmcClkEnable( true );
;;;169                return( SX_TIMEOUT );
;;;170            }
;;;171        }
;;;172    
;;;173        /* While there is data to be read */
;;;174        while( size )
;;;175        {
;;;176            if( size == 1 )
;;;177            {
;;;178                /* Disable Acknowledgement */
;;;179                I2C_AcknowledgeConfig( I2C_INTERFACE, DISABLE );
;;;180    
;;;181                /* Send STOP Condition */
;;;182                I2C_GenerateSTOP( I2C_INTERFACE, ENABLE );
;;;183            }
;;;184    
;;;185            /* Test on EV7 and clear it */
;;;186            timeOut = TIMEOUT_MAX;
;;;187            if( I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_RECEIVED ) )
;;;188            {
;;;189                /* Read a byte from the device */
;;;190                *data = I2C_ReceiveData( I2C_INTERFACE );
;;;191    
;;;192                /* Decrement the read bytes counter */
;;;193                size--;
;;;194            }
;;;195            else
;;;196            {
;;;197                if( ( timeOut-- ) == 0 )
;;;198                {
;;;199                    I2cInit( );
;;;200                    I2cFsmcClkEnable( true );
;;;201                    return( SX_TIMEOUT );
;;;202                }
;;;203            }
;;;204        }
;;;205    
;;;206        /* Enable Acknowledgement to be ready for another reception */
;;;207        I2C_AcknowledgeConfig( I2C_INTERFACE, ENABLE );
;;;208    
;;;209        for( i = 0 ; i < 500 ; i++ ){ ; }
;;;210    
;;;211        I2cFsmcClkEnable( true );
;;;212        return( SX_OK );
;;;213    }
000028  bdf8              POP      {r3-r7,pc}
                  |L5.42|
00002a  f44f3100          MOV      r1,#0x20000           ;133
00002e  4838              LDR      r0,|L5.272|
000030  f7fffffe          BL       I2C_GetFlagStatus
000034  2800              CMP      r0,#0                 ;133
000036  d1ed              BNE      |L5.20|
000038  2101              MOVS     r1,#1                 ;144
00003a  4835              LDR      r0,|L5.272|
00003c  f7fffffe          BL       I2C_GenerateSTART
000040  f44f5440          MOV      r4,#0x3000            ;147
000044  e00a              B        |L5.92|
                  |L5.70|
000046  1e20              SUBS     r0,r4,#0              ;150
000048  f1a40401          SUB      r4,r4,#1              ;150
00004c  d106              BNE      |L5.92|
00004e  f7fffffe          BL       I2cInit
000052  2001              MOVS     r0,#1                 ;153
000054  f7fffffe          BL       I2cFsmcClkEnable
000058  2005              MOVS     r0,#5                 ;154
00005a  e7e5              B        |L5.40|
                  |L5.92|
00005c  492d              LDR      r1,|L5.276|
00005e  482c              LDR      r0,|L5.272|
000060  f7fffffe          BL       I2C_CheckEvent
000064  2800              CMP      r0,#0                 ;148
000066  d0ee              BEQ      |L5.70|
000068  2201              MOVS     r2,#1                 ;159
00006a  4631              MOV      r1,r6                 ;159
00006c  4828              LDR      r0,|L5.272|
00006e  f7fffffe          BL       I2C_Send7bitAddress
000072  f44f5440          MOV      r4,#0x3000            ;162
000076  e00a              B        |L5.142|
                  |L5.120|
000078  1e20              SUBS     r0,r4,#0              ;165
00007a  f1a40401          SUB      r4,r4,#1              ;165
00007e  d106              BNE      |L5.142|
000080  f7fffffe          BL       I2cInit
000084  2001              MOVS     r0,#1                 ;168
000086  f7fffffe          BL       I2cFsmcClkEnable
00008a  2005              MOVS     r0,#5                 ;169
00008c  e7cc              B        |L5.40|
                  |L5.142|
00008e  4921              LDR      r1,|L5.276|
000090  1c49              ADDS     r1,r1,#1              ;163
000092  481f              LDR      r0,|L5.272|
000094  f7fffffe          BL       I2C_CheckEvent
000098  2800              CMP      r0,#0                 ;163
00009a  d0ed              BEQ      |L5.120|
00009c  e022              B        |L5.228|
                  |L5.158|
00009e  2d01              CMP      r5,#1                 ;176
0000a0  d107              BNE      |L5.178|
0000a2  2100              MOVS     r1,#0                 ;179
0000a4  481a              LDR      r0,|L5.272|
0000a6  f7fffffe          BL       I2C_AcknowledgeConfig
0000aa  2101              MOVS     r1,#1                 ;182
0000ac  4818              LDR      r0,|L5.272|
0000ae  f7fffffe          BL       I2C_GenerateSTOP
                  |L5.178|
0000b2  f44f5440          MOV      r4,#0x3000            ;186
0000b6  4917              LDR      r1,|L5.276|
0000b8  313f              ADDS     r1,r1,#0x3f           ;187
0000ba  4815              LDR      r0,|L5.272|
0000bc  f7fffffe          BL       I2C_CheckEvent
0000c0  b128              CBZ      r0,|L5.206|
0000c2  4813              LDR      r0,|L5.272|
0000c4  f7fffffe          BL       I2C_ReceiveData
0000c8  7038              STRB     r0,[r7,#0]            ;190
0000ca  1e6d              SUBS     r5,r5,#1              ;193
0000cc  e00a              B        |L5.228|
                  |L5.206|
0000ce  1e20              SUBS     r0,r4,#0              ;197
0000d0  f1a40401          SUB      r4,r4,#1              ;197
0000d4  d106              BNE      |L5.228|
0000d6  f7fffffe          BL       I2cInit
0000da  2001              MOVS     r0,#1                 ;200
0000dc  f7fffffe          BL       I2cFsmcClkEnable
0000e0  2005              MOVS     r0,#5                 ;201
0000e2  e7a1              B        |L5.40|
                  |L5.228|
0000e4  2d00              CMP      r5,#0                 ;174
0000e6  d1da              BNE      |L5.158|
0000e8  2101              MOVS     r1,#1                 ;207
0000ea  4809              LDR      r0,|L5.272|
0000ec  f7fffffe          BL       I2C_AcknowledgeConfig
0000f0  2000              MOVS     r0,#0                 ;209
0000f2  9000              STR      r0,[sp,#0]            ;209
0000f4  e002              B        |L5.252|
                  |L5.246|
0000f6  9800              LDR      r0,[sp,#0]            ;209
0000f8  1c40              ADDS     r0,r0,#1              ;209
0000fa  9000              STR      r0,[sp,#0]            ;209
                  |L5.252|
0000fc  9800              LDR      r0,[sp,#0]            ;209
0000fe  f5b07ffa          CMP      r0,#0x1f4             ;209
000102  dbf8              BLT      |L5.246|
000104  2001              MOVS     r0,#1                 ;211
000106  f7fffffe          BL       I2cFsmcClkEnable
00010a  2000              MOVS     r0,#0                 ;212
00010c  e78c              B        |L5.40|
;;;214    
                          ENDP

00010e  0000              DCW      0x0000
                  |L5.272|
                          DCD      0x40005400
                  |L5.276|
                          DCD      0x00030001

                          AREA ||i.I2cReadBuffer||, CODE, READONLY, ALIGN=2

                  I2cReadBuffer PROC
;;;334    
;;;335    uint8_t I2cReadBuffer( uint8_t deviceAddr, uint16_t addr, uint8_t *buffer, uint16_t size, tI2cAddrSize addrSize )
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;336    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;337        __IO int32_t i;
;;;338        uint32_t timeOut;
;;;339    
;;;340        I2cFsmcClkEnable( false );
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       I2cFsmcClkEnable
;;;341    
;;;342        /* Test on BUSY Flag */
;;;343        timeOut = TIMEOUT_MAX;
000016  f44f5440          MOV      r4,#0x3000
;;;344        while( I2C_GetFlagStatus( I2C_INTERFACE, I2C_FLAG_BUSY) ) 
00001a  e00b              B        |L6.52|
                  |L6.28|
;;;345        {
;;;346            if( ( timeOut-- ) == 0 )
00001c  1e20              SUBS     r0,r4,#0
00001e  f1a40401          SUB      r4,r4,#1
000022  d107              BNE      |L6.52|
;;;347            {
;;;348                I2cInit( );
000024  f7fffffe          BL       I2cInit
;;;349                I2cFsmcClkEnable( true );
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       I2cFsmcClkEnable
;;;350                return( SX_TIMEOUT );
00002e  2005              MOVS     r0,#5
                  |L6.48|
;;;351            }
;;;352        }
;;;353    
;;;354        /* Send START condition */
;;;355        I2C_GenerateSTART( I2C_INTERFACE, ENABLE );
;;;356    
;;;357        /* Test on EV5 and clear it */
;;;358        timeOut = TIMEOUT_MAX;
;;;359        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_MODE_SELECT ) )
;;;360        {
;;;361            if( I2C_INTERFACE->SR1 & I2C_FLAG_RXNE )
;;;362            {
;;;363                volatile uint32_t drTemp;
;;;364                drTemp = I2C_INTERFACE->DR;
;;;365            }
;;;366            if( ( timeOut-- ) == 0 )
;;;367            {
;;;368                I2cInit( );
;;;369                I2cFsmcClkEnable( true );
;;;370                return( SX_TIMEOUT );
;;;371            }
;;;372        }
;;;373    
;;;374        /* Send device's address for write */
;;;375        I2C_Send7bitAddress( I2C_INTERFACE, deviceAddr, I2C_Direction_Transmitter );
;;;376    
;;;377    
;;;378        /* Test on EV6 and clear it */
;;;379        timeOut = TIMEOUT_MAX;
;;;380        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ) )
;;;381        {
;;;382            if( ( timeOut-- ) == 0 )
;;;383            {
;;;384                I2cInit( );
;;;385                I2cFsmcClkEnable( true );
;;;386                return( SX_TIMEOUT );
;;;387            }
;;;388        }
;;;389    
;;;390        /* Clear EV6 by setting again the PE bit */
;;;391        I2C_Cmd( I2C_INTERFACE, ENABLE );
;;;392    
;;;393        if( addrSize == I2C_ADDR_SIZE_16 )
;;;394        {
;;;395            /* Send the device's internal address MSB to write to */
;;;396            I2C_SendData( I2C_INTERFACE, ( uint8_t )( ( addr & 0xFF00 ) >> 8 )  );
;;;397    
;;;398            /* Test on EV8 and clear it */
;;;399            timeOut = TIMEOUT_MAX;
;;;400            while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;401            {
;;;402                if( ( timeOut-- ) == 0 )
;;;403                {
;;;404                    I2cInit( );
;;;405                    I2cFsmcClkEnable( true );
;;;406                    return( SX_TIMEOUT );
;;;407                }
;;;408            }
;;;409        }
;;;410    
;;;411        /* Send the device's internal address LSB to write to */
;;;412        I2C_SendData( I2C_INTERFACE, ( uint8_t )( addr & 0x00FF ) );
;;;413    
;;;414        /* Test on EV8 and clear it */
;;;415        timeOut = TIMEOUT_MAX;
;;;416        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;417        {
;;;418            if( ( timeOut-- ) == 0 )
;;;419            {
;;;420                I2cInit( );
;;;421                I2cFsmcClkEnable( true );
;;;422                return( SX_TIMEOUT );
;;;423            }
;;;424        }
;;;425    
;;;426        /* Send START condition a second time */
;;;427        I2C_GenerateSTART( I2C_INTERFACE, ENABLE );
;;;428    
;;;429        /* Test on EV5 and clear it */
;;;430        timeOut = TIMEOUT_MAX;
;;;431        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_MODE_SELECT ) )
;;;432        {
;;;433            if( ( timeOut-- ) == 0 )
;;;434            {
;;;435                I2cInit( );
;;;436                I2cFsmcClkEnable( true );
;;;437                return( SX_TIMEOUT );
;;;438            }
;;;439        }
;;;440    
;;;441        /* Send device's address for read */
;;;442        I2C_Send7bitAddress( I2C_INTERFACE, deviceAddr, I2C_Direction_Receiver );
;;;443    
;;;444        /* Test on EV6 and clear it */
;;;445        timeOut = TIMEOUT_MAX;
;;;446        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED ) )
;;;447        {
;;;448            if( ( timeOut-- ) == 0 )
;;;449            {
;;;450                I2cInit( );
;;;451                I2cFsmcClkEnable( true );
;;;452                return( SX_TIMEOUT );
;;;453            }
;;;454        }
;;;455    
;;;456        /* While there is data to be read */
;;;457        timeOut = TIMEOUT_MAX;
;;;458        while( size )
;;;459        {
;;;460            if( size == 1 )
;;;461            {
;;;462                /* Disable Acknowledgement */
;;;463                I2C_AcknowledgeConfig( I2C_INTERFACE, DISABLE );
;;;464    
;;;465                /* Send STOP Condition */
;;;466                I2C_GenerateSTOP( I2C_INTERFACE, ENABLE );
;;;467            }
;;;468    
;;;469            /* Test on EV7 and clear it */
;;;470            if( I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_RECEIVED ) )
;;;471            {
;;;472                /* Read a byte from the device */
;;;473                *buffer = I2C_ReceiveData( I2C_INTERFACE );
;;;474    
;;;475                /* Point to the next location where the byte read will be saved */
;;;476                buffer++;
;;;477    
;;;478                /* Decrement the read bytes counter */
;;;479                size--;
;;;480            }
;;;481            else
;;;482            {
;;;483                if( ( timeOut-- ) == 0 )
;;;484                {
;;;485                    I2cInit( );
;;;486                    I2cFsmcClkEnable( true );
;;;487                    return( SX_TIMEOUT );
;;;488                }
;;;489            }
;;;490        }
;;;491    
;;;492        /* Enable Acknowledgement to be ready for another reception */
;;;493        I2C_AcknowledgeConfig( I2C_INTERFACE, ENABLE );
;;;494    
;;;495        for( i = 0 ; i < 500 ; i++ ){ ; }
;;;496    
;;;497        I2cFsmcClkEnable( true );
;;;498        return( SX_OK );
;;;499    
;;;500    }
000030  e8bd87fc          POP      {r2-r10,pc}
                  |L6.52|
000034  f44f3100          MOV      r1,#0x20000           ;344
000038  4873              LDR      r0,|L6.520|
00003a  f7fffffe          BL       I2C_GetFlagStatus
00003e  2800              CMP      r0,#0                 ;344
000040  d1ec              BNE      |L6.28|
000042  2101              MOVS     r1,#1                 ;355
000044  4870              LDR      r0,|L6.520|
000046  f7fffffe          BL       I2C_GenerateSTART
00004a  f44f5440          MOV      r4,#0x3000            ;358
00004e  e015              B        |L6.124|
                  |L6.80|
000050  486d              LDR      r0,|L6.520|
000052  3014              ADDS     r0,r0,#0x14           ;361
000054  8800              LDRH     r0,[r0,#0]            ;361
000056  496d              LDR      r1,|L6.524|
000058  4008              ANDS     r0,r0,r1              ;361
00005a  b120              CBZ      r0,|L6.102|
00005c  486a              LDR      r0,|L6.520|
00005e  3010              ADDS     r0,r0,#0x10           ;364
000060  8800              LDRH     r0,[r0,#0]            ;364
000062  9000              STR      r0,[sp,#0]            ;364
000064  bf00              NOP                            ;365
                  |L6.102|
000066  1e20              SUBS     r0,r4,#0              ;366
000068  f1a40401          SUB      r4,r4,#1              ;366
00006c  d106              BNE      |L6.124|
00006e  f7fffffe          BL       I2cInit
000072  2001              MOVS     r0,#1                 ;369
000074  f7fffffe          BL       I2cFsmcClkEnable
000078  2005              MOVS     r0,#5                 ;370
00007a  e7d9              B        |L6.48|
                  |L6.124|
00007c  4964              LDR      r1,|L6.528|
00007e  4862              LDR      r0,|L6.520|
000080  f7fffffe          BL       I2C_CheckEvent
000084  2800              CMP      r0,#0                 ;359
000086  d0e3              BEQ      |L6.80|
000088  2200              MOVS     r2,#0                 ;375
00008a  4641              MOV      r1,r8                 ;375
00008c  485e              LDR      r0,|L6.520|
00008e  f7fffffe          BL       I2C_Send7bitAddress
000092  f44f5440          MOV      r4,#0x3000            ;379
000096  e00a              B        |L6.174|
                  |L6.152|
000098  1e20              SUBS     r0,r4,#0              ;382
00009a  f1a40401          SUB      r4,r4,#1              ;382
00009e  d106              BNE      |L6.174|
0000a0  f7fffffe          BL       I2cInit
0000a4  2001              MOVS     r0,#1                 ;385
0000a6  f7fffffe          BL       I2cFsmcClkEnable
0000aa  2005              MOVS     r0,#5                 ;386
0000ac  e7c0              B        |L6.48|
                  |L6.174|
0000ae  4959              LDR      r1,|L6.532|
0000b0  4855              LDR      r0,|L6.520|
0000b2  f7fffffe          BL       I2C_CheckEvent
0000b6  2800              CMP      r0,#0                 ;380
0000b8  d0ee              BEQ      |L6.152|
0000ba  2101              MOVS     r1,#1                 ;391
0000bc  4852              LDR      r0,|L6.520|
0000be  f7fffffe          BL       I2C_Cmd
0000c2  f1b90f01          CMP      r9,#1                 ;393
0000c6  d118              BNE      |L6.250|
0000c8  0a31              LSRS     r1,r6,#8              ;396
0000ca  484f              LDR      r0,|L6.520|
0000cc  f7fffffe          BL       I2C_SendData
0000d0  f44f5440          MOV      r4,#0x3000            ;399
0000d4  e00a              B        |L6.236|
                  |L6.214|
0000d6  1e20              SUBS     r0,r4,#0              ;402
0000d8  f1a40401          SUB      r4,r4,#1              ;402
0000dc  d106              BNE      |L6.236|
0000de  f7fffffe          BL       I2cInit
0000e2  2001              MOVS     r0,#1                 ;405
0000e4  f7fffffe          BL       I2cFsmcClkEnable
0000e8  2005              MOVS     r0,#5                 ;406
0000ea  e7a1              B        |L6.48|
                  |L6.236|
0000ec  4949              LDR      r1,|L6.532|
0000ee  1c89              ADDS     r1,r1,#2              ;400
0000f0  4845              LDR      r0,|L6.520|
0000f2  f7fffffe          BL       I2C_CheckEvent
0000f6  2800              CMP      r0,#0                 ;400
0000f8  d0ed              BEQ      |L6.214|
                  |L6.250|
0000fa  b2f1              UXTB     r1,r6                 ;412
0000fc  4842              LDR      r0,|L6.520|
0000fe  f7fffffe          BL       I2C_SendData
000102  f44f5440          MOV      r4,#0x3000            ;415
000106  e00a              B        |L6.286|
                  |L6.264|
000108  1e20              SUBS     r0,r4,#0              ;418
00010a  f1a40401          SUB      r4,r4,#1              ;418
00010e  d106              BNE      |L6.286|
000110  f7fffffe          BL       I2cInit
000114  2001              MOVS     r0,#1                 ;421
000116  f7fffffe          BL       I2cFsmcClkEnable
00011a  2005              MOVS     r0,#5                 ;422
00011c  e788              B        |L6.48|
                  |L6.286|
00011e  493d              LDR      r1,|L6.532|
000120  1c89              ADDS     r1,r1,#2              ;416
000122  4839              LDR      r0,|L6.520|
000124  f7fffffe          BL       I2C_CheckEvent
000128  2800              CMP      r0,#0                 ;416
00012a  d0ed              BEQ      |L6.264|
00012c  2101              MOVS     r1,#1                 ;427
00012e  4836              LDR      r0,|L6.520|
000130  f7fffffe          BL       I2C_GenerateSTART
000134  f44f5440          MOV      r4,#0x3000            ;430
000138  e00a              B        |L6.336|
                  |L6.314|
00013a  1e20              SUBS     r0,r4,#0              ;433
00013c  f1a40401          SUB      r4,r4,#1              ;433
000140  d106              BNE      |L6.336|
000142  f7fffffe          BL       I2cInit
000146  2001              MOVS     r0,#1                 ;436
000148  f7fffffe          BL       I2cFsmcClkEnable
00014c  2005              MOVS     r0,#5                 ;437
00014e  e76f              B        |L6.48|
                  |L6.336|
000150  492f              LDR      r1,|L6.528|
000152  482d              LDR      r0,|L6.520|
000154  f7fffffe          BL       I2C_CheckEvent
000158  2800              CMP      r0,#0                 ;431
00015a  d0ee              BEQ      |L6.314|
00015c  2201              MOVS     r2,#1                 ;442
00015e  4641              MOV      r1,r8                 ;442
000160  4829              LDR      r0,|L6.520|
000162  f7fffffe          BL       I2C_Send7bitAddress
000166  f44f5440          MOV      r4,#0x3000            ;445
00016a  e00a              B        |L6.386|
                  |L6.364|
00016c  1e20              SUBS     r0,r4,#0              ;448
00016e  f1a40401          SUB      r4,r4,#1              ;448
000172  d106              BNE      |L6.386|
000174  f7fffffe          BL       I2cInit
000178  2001              MOVS     r0,#1                 ;451
00017a  f7fffffe          BL       I2cFsmcClkEnable
00017e  2005              MOVS     r0,#5                 ;452
000180  e756              B        |L6.48|
                  |L6.386|
000182  4923              LDR      r1,|L6.528|
000184  1c49              ADDS     r1,r1,#1              ;446
000186  4820              LDR      r0,|L6.520|
000188  f7fffffe          BL       I2C_CheckEvent
00018c  2800              CMP      r0,#0                 ;446
00018e  d0ed              BEQ      |L6.364|
000190  f44f5440          MOV      r4,#0x3000            ;457
000194  e022              B        |L6.476|
                  |L6.406|
000196  2d01              CMP      r5,#1                 ;460
000198  d107              BNE      |L6.426|
00019a  2100              MOVS     r1,#0                 ;463
00019c  481a              LDR      r0,|L6.520|
00019e  f7fffffe          BL       I2C_AcknowledgeConfig
0001a2  2101              MOVS     r1,#1                 ;466
0001a4  4818              LDR      r0,|L6.520|
0001a6  f7fffffe          BL       I2C_GenerateSTOP
                  |L6.426|
0001aa  4919              LDR      r1,|L6.528|
0001ac  313f              ADDS     r1,r1,#0x3f           ;470
0001ae  4816              LDR      r0,|L6.520|
0001b0  f7fffffe          BL       I2C_CheckEvent
0001b4  b138              CBZ      r0,|L6.454|
0001b6  4814              LDR      r0,|L6.520|
0001b8  f7fffffe          BL       I2C_ReceiveData
0001bc  7038              STRB     r0,[r7,#0]            ;473
0001be  1c7f              ADDS     r7,r7,#1              ;476
0001c0  1e68              SUBS     r0,r5,#1              ;479
0001c2  b285              UXTH     r5,r0                 ;479
0001c4  e00a              B        |L6.476|
                  |L6.454|
0001c6  1e20              SUBS     r0,r4,#0              ;483
0001c8  f1a40401          SUB      r4,r4,#1              ;483
0001cc  d106              BNE      |L6.476|
0001ce  f7fffffe          BL       I2cInit
0001d2  2001              MOVS     r0,#1                 ;486
0001d4  f7fffffe          BL       I2cFsmcClkEnable
0001d8  2005              MOVS     r0,#5                 ;487
0001da  e729              B        |L6.48|
                  |L6.476|
0001dc  2d00              CMP      r5,#0                 ;458
0001de  d1da              BNE      |L6.406|
0001e0  2101              MOVS     r1,#1                 ;493
0001e2  4809              LDR      r0,|L6.520|
0001e4  f7fffffe          BL       I2C_AcknowledgeConfig
0001e8  2000              MOVS     r0,#0                 ;495
0001ea  9001              STR      r0,[sp,#4]            ;495
0001ec  e002              B        |L6.500|
                  |L6.494|
0001ee  9801              LDR      r0,[sp,#4]            ;495
0001f0  1c40              ADDS     r0,r0,#1              ;495
0001f2  9001              STR      r0,[sp,#4]            ;495
                  |L6.500|
0001f4  9801              LDR      r0,[sp,#4]            ;495
0001f6  f5b07ffa          CMP      r0,#0x1f4             ;495
0001fa  dbf8              BLT      |L6.494|
0001fc  2001              MOVS     r0,#1                 ;497
0001fe  f7fffffe          BL       I2cFsmcClkEnable
000202  2000              MOVS     r0,#0                 ;498
000204  e714              B        |L6.48|
;;;501    
                          ENDP

000206  0000              DCW      0x0000
                  |L6.520|
                          DCD      0x40005400
                  |L6.524|
                          DCD      0x10000040
                  |L6.528|
                          DCD      0x00030001
                  |L6.532|
                          DCD      0x00070082

                          AREA ||i.I2cWrite||, CODE, READONLY, ALIGN=2

                  I2cWrite PROC
;;;48     
;;;49     uint8_t I2cWrite( uint8_t deviceAddr, uint8_t data )
000000  b57c              PUSH     {r2-r6,lr}
;;;50     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;51         __IO int32_t i;
;;;52         uint32_t timeOut;
;;;53     
;;;54         I2cFsmcClkEnable( false );
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       I2cFsmcClkEnable
;;;55        
;;;56         /* Test on BUSY Flag */
;;;57         timeOut = TIMEOUT_MAX;
00000c  f44f5440          MOV      r4,#0x3000
;;;58         while( I2C_GetFlagStatus( I2C_INTERFACE, I2C_FLAG_BUSY) ) 
000010  e00a              B        |L7.40|
                  |L7.18|
;;;59         {
;;;60             if( ( timeOut-- ) == 0 )
000012  1e20              SUBS     r0,r4,#0
000014  f1a40401          SUB      r4,r4,#1
000018  d106              BNE      |L7.40|
;;;61             {
;;;62                 I2cInit( );
00001a  f7fffffe          BL       I2cInit
;;;63                 I2cFsmcClkEnable( true );
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       I2cFsmcClkEnable
;;;64                 return( SX_TIMEOUT );
000024  2005              MOVS     r0,#5
                  |L7.38|
;;;65             }
;;;66         }
;;;67     
;;;68         /* Send START condition */
;;;69         I2C_GenerateSTART( I2C_INTERFACE, ENABLE );
;;;70     
;;;71         /* Test on EV5 and clear it */
;;;72         timeOut = TIMEOUT_MAX;
;;;73         while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_MODE_SELECT ) )
;;;74         {
;;;75             if( I2C_INTERFACE->SR1 & I2C_FLAG_RXNE )
;;;76             {
;;;77                 volatile uint32_t drTemp;
;;;78                 drTemp = I2C_INTERFACE->DR;
;;;79             }
;;;80             if( ( timeOut-- ) == 0 )
;;;81             {
;;;82                 I2cInit( );
;;;83                 I2cFsmcClkEnable( true );
;;;84                 return( SX_TIMEOUT );
;;;85             }
;;;86         }
;;;87         /* Send device's address for write */
;;;88         I2C_Send7bitAddress( I2C_INTERFACE, deviceAddr, I2C_Direction_Transmitter );
;;;89     
;;;90         /* Test on EV6 and clear it */
;;;91         timeOut = TIMEOUT_MAX;
;;;92         while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ) )
;;;93         {
;;;94             if( ( timeOut-- ) == 0 )
;;;95             {
;;;96                 I2cInit( );
;;;97                 I2cFsmcClkEnable( true );
;;;98                 return( SX_TIMEOUT );
;;;99             }
;;;100        }
;;;101    
;;;102        I2C_SendData( I2C_INTERFACE, data );
;;;103    
;;;104        /* Test on EV8 and clear it */
;;;105        timeOut = TIMEOUT_MAX;
;;;106        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;107        {
;;;108            if( ( timeOut-- ) == 0 )
;;;109            {
;;;110                I2cInit( );
;;;111                I2cFsmcClkEnable( true );
;;;112                return( SX_TIMEOUT );
;;;113            }
;;;114        }
;;;115    
;;;116        I2C_GenerateSTOP( I2C_INTERFACE, ENABLE ); 
;;;117        for( i = 0 ; i < 500 ; i++ ){ ; }
;;;118    
;;;119        I2cFsmcClkEnable( true );
;;;120        return( SX_OK );
;;;121    }
000026  bd7c              POP      {r2-r6,pc}
                  |L7.40|
000028  f44f3100          MOV      r1,#0x20000           ;58
00002c  4836              LDR      r0,|L7.264|
00002e  f7fffffe          BL       I2C_GetFlagStatus
000032  2800              CMP      r0,#0                 ;58
000034  d1ed              BNE      |L7.18|
000036  2101              MOVS     r1,#1                 ;69
000038  4833              LDR      r0,|L7.264|
00003a  f7fffffe          BL       I2C_GenerateSTART
00003e  f44f5440          MOV      r4,#0x3000            ;72
000042  e015              B        |L7.112|
                  |L7.68|
000044  4830              LDR      r0,|L7.264|
000046  3014              ADDS     r0,r0,#0x14           ;75
000048  8800              LDRH     r0,[r0,#0]            ;75
00004a  4930              LDR      r1,|L7.268|
00004c  4008              ANDS     r0,r0,r1              ;75
00004e  b120              CBZ      r0,|L7.90|
000050  482d              LDR      r0,|L7.264|
000052  3010              ADDS     r0,r0,#0x10           ;78
000054  8800              LDRH     r0,[r0,#0]            ;78
000056  9000              STR      r0,[sp,#0]            ;78
000058  bf00              NOP                            ;79
                  |L7.90|
00005a  1e20              SUBS     r0,r4,#0              ;80
00005c  f1a40401          SUB      r4,r4,#1              ;80
000060  d106              BNE      |L7.112|
000062  f7fffffe          BL       I2cInit
000066  2001              MOVS     r0,#1                 ;83
000068  f7fffffe          BL       I2cFsmcClkEnable
00006c  2005              MOVS     r0,#5                 ;84
00006e  e7da              B        |L7.38|
                  |L7.112|
000070  4927              LDR      r1,|L7.272|
000072  4825              LDR      r0,|L7.264|
000074  f7fffffe          BL       I2C_CheckEvent
000078  2800              CMP      r0,#0                 ;73
00007a  d0e3              BEQ      |L7.68|
00007c  2200              MOVS     r2,#0                 ;88
00007e  4629              MOV      r1,r5                 ;88
000080  4821              LDR      r0,|L7.264|
000082  f7fffffe          BL       I2C_Send7bitAddress
000086  f44f5440          MOV      r4,#0x3000            ;91
00008a  e00a              B        |L7.162|
                  |L7.140|
00008c  1e20              SUBS     r0,r4,#0              ;94
00008e  f1a40401          SUB      r4,r4,#1              ;94
000092  d106              BNE      |L7.162|
000094  f7fffffe          BL       I2cInit
000098  2001              MOVS     r0,#1                 ;97
00009a  f7fffffe          BL       I2cFsmcClkEnable
00009e  2005              MOVS     r0,#5                 ;98
0000a0  e7c1              B        |L7.38|
                  |L7.162|
0000a2  491c              LDR      r1,|L7.276|
0000a4  4818              LDR      r0,|L7.264|
0000a6  f7fffffe          BL       I2C_CheckEvent
0000aa  2800              CMP      r0,#0                 ;92
0000ac  d0ee              BEQ      |L7.140|
0000ae  4631              MOV      r1,r6                 ;102
0000b0  4815              LDR      r0,|L7.264|
0000b2  f7fffffe          BL       I2C_SendData
0000b6  f44f5440          MOV      r4,#0x3000            ;105
0000ba  e00a              B        |L7.210|
                  |L7.188|
0000bc  1e20              SUBS     r0,r4,#0              ;108
0000be  f1a40401          SUB      r4,r4,#1              ;108
0000c2  d106              BNE      |L7.210|
0000c4  f7fffffe          BL       I2cInit
0000c8  2001              MOVS     r0,#1                 ;111
0000ca  f7fffffe          BL       I2cFsmcClkEnable
0000ce  2005              MOVS     r0,#5                 ;112
0000d0  e7a9              B        |L7.38|
                  |L7.210|
0000d2  4910              LDR      r1,|L7.276|
0000d4  1c89              ADDS     r1,r1,#2              ;106
0000d6  480c              LDR      r0,|L7.264|
0000d8  f7fffffe          BL       I2C_CheckEvent
0000dc  2800              CMP      r0,#0                 ;106
0000de  d0ed              BEQ      |L7.188|
0000e0  2101              MOVS     r1,#1                 ;116
0000e2  4809              LDR      r0,|L7.264|
0000e4  f7fffffe          BL       I2C_GenerateSTOP
0000e8  2000              MOVS     r0,#0                 ;117
0000ea  9001              STR      r0,[sp,#4]            ;117
0000ec  e002              B        |L7.244|
                  |L7.238|
0000ee  9801              LDR      r0,[sp,#4]            ;117
0000f0  1c40              ADDS     r0,r0,#1              ;117
0000f2  9001              STR      r0,[sp,#4]            ;117
                  |L7.244|
0000f4  9801              LDR      r0,[sp,#4]            ;117
0000f6  f5b07ffa          CMP      r0,#0x1f4             ;117
0000fa  dbf8              BLT      |L7.238|
0000fc  2001              MOVS     r0,#1                 ;119
0000fe  f7fffffe          BL       I2cFsmcClkEnable
000102  2000              MOVS     r0,#0                 ;120
000104  e78f              B        |L7.38|
;;;122    
                          ENDP

000106  0000              DCW      0x0000
                  |L7.264|
                          DCD      0x40005400
                  |L7.268|
                          DCD      0x10000040
                  |L7.272|
                          DCD      0x00030001
                  |L7.276|
                          DCD      0x00070082

                          AREA ||i.I2cWriteBuffer||, CODE, READONLY, ALIGN=2

                  I2cWriteBuffer PROC
;;;214    
;;;215    uint8_t I2cWriteBuffer( uint8_t deviceAddr, uint16_t addr, uint8_t *buffer, uint16_t size, tI2cAddrSize addrSize )
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;216    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
00000c  f8dd9028          LDR      r9,[sp,#0x28]
;;;217        __IO int32_t i;
;;;218        uint32_t timeOut;
;;;219    
;;;220        I2cFsmcClkEnable( false );
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       I2cFsmcClkEnable
;;;221    
;;;222        /* Test on BUSY Flag */
;;;223        timeOut = TIMEOUT_MAX;
000016  f44f5440          MOV      r4,#0x3000
;;;224        while( I2C_GetFlagStatus( I2C_INTERFACE, I2C_FLAG_BUSY) ) 
00001a  e00b              B        |L8.52|
                  |L8.28|
;;;225        {
;;;226            if( ( timeOut-- ) == 0 )
00001c  1e20              SUBS     r0,r4,#0
00001e  f1a40401          SUB      r4,r4,#1
000022  d107              BNE      |L8.52|
;;;227            {
;;;228                I2cInit( );
000024  f7fffffe          BL       I2cInit
;;;229                I2cFsmcClkEnable( true );
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       I2cFsmcClkEnable
;;;230                return( SX_TIMEOUT );
00002e  2005              MOVS     r0,#5
                  |L8.48|
;;;231            }
;;;232        }
;;;233    
;;;234        /* Send START condition */
;;;235        I2C_GenerateSTART( I2C_INTERFACE, ENABLE );
;;;236    
;;;237        /* Test on EV5 and clear it */
;;;238        timeOut = TIMEOUT_MAX;
;;;239        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_MODE_SELECT ) )
;;;240        {
;;;241            if( I2C_INTERFACE->SR1 & I2C_FLAG_RXNE )
;;;242            {
;;;243                volatile uint32_t drTemp;
;;;244                drTemp = I2C_INTERFACE->DR;
;;;245            }
;;;246            if( ( timeOut-- ) == 0 )
;;;247            {
;;;248                I2cInit( );
;;;249                I2cFsmcClkEnable( true );
;;;250                return( SX_TIMEOUT );
;;;251            }
;;;252        }
;;;253    
;;;254        /* Send device's address for write */
;;;255        I2C_Send7bitAddress( I2C_INTERFACE, deviceAddr, I2C_Direction_Transmitter );
;;;256    
;;;257        /* Test on EV6 and clear it */
;;;258        timeOut = TIMEOUT_MAX;
;;;259        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED ) )
;;;260        {
;;;261            if( ( timeOut-- ) == 0 )
;;;262            {
;;;263                I2cInit( );
;;;264                I2cFsmcClkEnable( true );
;;;265                return( SX_TIMEOUT );
;;;266            }
;;;267        }
;;;268    
;;;269        if( addrSize == I2C_ADDR_SIZE_16 )
;;;270        {
;;;271            /* Send the device's internal address MSB to write to */
;;;272            I2C_SendData( I2C_INTERFACE, ( uint8_t )( ( addr & 0xFF00 ) >> 8 )  );
;;;273    
;;;274            /* Test on EV8 and clear it */
;;;275            timeOut = TIMEOUT_MAX;
;;;276            while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;277            {
;;;278                if( ( timeOut-- ) == 0 )
;;;279                {
;;;280                    I2cInit( );
;;;281                    I2cFsmcClkEnable( true );
;;;282                    return( SX_TIMEOUT );
;;;283                }
;;;284            }
;;;285        }
;;;286    
;;;287        /* Send the device's internal address LSB to write to */
;;;288        I2C_SendData( I2C_INTERFACE, ( uint8_t )( addr & 0x00FF ) );
;;;289    
;;;290        /* Test on EV8 and clear it */
;;;291        timeOut = TIMEOUT_MAX;
;;;292        while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;293        {
;;;294            if( ( timeOut-- ) == 0 )
;;;295            {
;;;296                I2cInit( );
;;;297                I2cFsmcClkEnable( true );
;;;298                return( SX_TIMEOUT );
;;;299            }
;;;300        }
;;;301    
;;;302        while( size )
;;;303        {
;;;304            /* Send the byte to be written */
;;;305            I2C_SendData( I2C_INTERFACE, * buffer );
;;;306    
;;;307            /* Test on EV8 and clear it */
;;;308            timeOut = TIMEOUT_MAX;
;;;309            while( !I2C_CheckEvent( I2C_INTERFACE, I2C_EVENT_MASTER_BYTE_TRANSMITTED ) )
;;;310            {
;;;311                if( ( timeOut-- ) == 0 )
;;;312                {
;;;313                    I2cInit( );
;;;314                    I2cFsmcClkEnable( true );
;;;315                    return( SX_TIMEOUT );
;;;316                }
;;;317            }
;;;318    
;;;319            if( size == 1 )
;;;320            { 
;;;321                I2C_GenerateSTOP( I2C_INTERFACE, ENABLE ); 
;;;322            } /* STOP */
;;;323    
;;;324            buffer++;
;;;325            size--;
;;;326        }
;;;327    
;;;328        //I2C_GenerateSTOP( I2C_INTERFACE, ENABLE ); 
;;;329        for( i = 0 ; i < 500 ; i++ ){ ; }
;;;330    
;;;331        I2cFsmcClkEnable( true );
;;;332        return( SX_OK );
;;;333    }
000030  e8bd87fc          POP      {r2-r10,pc}
                  |L8.52|
000034  f44f3100          MOV      r1,#0x20000           ;224
000038  4854              LDR      r0,|L8.396|
00003a  f7fffffe          BL       I2C_GetFlagStatus
00003e  2800              CMP      r0,#0                 ;224
000040  d1ec              BNE      |L8.28|
000042  2101              MOVS     r1,#1                 ;235
000044  4851              LDR      r0,|L8.396|
000046  f7fffffe          BL       I2C_GenerateSTART
00004a  f44f5440          MOV      r4,#0x3000            ;238
00004e  e015              B        |L8.124|
                  |L8.80|
000050  484e              LDR      r0,|L8.396|
000052  3014              ADDS     r0,r0,#0x14           ;241
000054  8800              LDRH     r0,[r0,#0]            ;241
000056  494e              LDR      r1,|L8.400|
000058  4008              ANDS     r0,r0,r1              ;241
00005a  b120              CBZ      r0,|L8.102|
00005c  484b              LDR      r0,|L8.396|
00005e  3010              ADDS     r0,r0,#0x10           ;244
000060  8800              LDRH     r0,[r0,#0]            ;244
000062  9000              STR      r0,[sp,#0]            ;244
000064  bf00              NOP                            ;245
                  |L8.102|
000066  1e20              SUBS     r0,r4,#0              ;246
000068  f1a40401          SUB      r4,r4,#1              ;246
00006c  d106              BNE      |L8.124|
00006e  f7fffffe          BL       I2cInit
000072  2001              MOVS     r0,#1                 ;249
000074  f7fffffe          BL       I2cFsmcClkEnable
000078  2005              MOVS     r0,#5                 ;250
00007a  e7d9              B        |L8.48|
                  |L8.124|
00007c  4945              LDR      r1,|L8.404|
00007e  4843              LDR      r0,|L8.396|
000080  f7fffffe          BL       I2C_CheckEvent
000084  2800              CMP      r0,#0                 ;239
000086  d0e3              BEQ      |L8.80|
000088  2200              MOVS     r2,#0                 ;255
00008a  4641              MOV      r1,r8                 ;255
00008c  483f              LDR      r0,|L8.396|
00008e  f7fffffe          BL       I2C_Send7bitAddress
000092  f44f5440          MOV      r4,#0x3000            ;258
000096  e00a              B        |L8.174|
                  |L8.152|
000098  1e20              SUBS     r0,r4,#0              ;261
00009a  f1a40401          SUB      r4,r4,#1              ;261
00009e  d106              BNE      |L8.174|
0000a0  f7fffffe          BL       I2cInit
0000a4  2001              MOVS     r0,#1                 ;264
0000a6  f7fffffe          BL       I2cFsmcClkEnable
0000aa  2005              MOVS     r0,#5                 ;265
0000ac  e7c0              B        |L8.48|
                  |L8.174|
0000ae  493a              LDR      r1,|L8.408|
0000b0  4836              LDR      r0,|L8.396|
0000b2  f7fffffe          BL       I2C_CheckEvent
0000b6  2800              CMP      r0,#0                 ;259
0000b8  d0ee              BEQ      |L8.152|
0000ba  f1b90f01          CMP      r9,#1                 ;269
0000be  d118              BNE      |L8.242|
0000c0  0a31              LSRS     r1,r6,#8              ;272
0000c2  4832              LDR      r0,|L8.396|
0000c4  f7fffffe          BL       I2C_SendData
0000c8  f44f5440          MOV      r4,#0x3000            ;275
0000cc  e00a              B        |L8.228|
                  |L8.206|
0000ce  1e20              SUBS     r0,r4,#0              ;278
0000d0  f1a40401          SUB      r4,r4,#1              ;278
0000d4  d106              BNE      |L8.228|
0000d6  f7fffffe          BL       I2cInit
0000da  2001              MOVS     r0,#1                 ;281
0000dc  f7fffffe          BL       I2cFsmcClkEnable
0000e0  2005              MOVS     r0,#5                 ;282
0000e2  e7a5              B        |L8.48|
                  |L8.228|
0000e4  492c              LDR      r1,|L8.408|
0000e6  1c89              ADDS     r1,r1,#2              ;276
0000e8  4828              LDR      r0,|L8.396|
0000ea  f7fffffe          BL       I2C_CheckEvent
0000ee  2800              CMP      r0,#0                 ;276
0000f0  d0ed              BEQ      |L8.206|
                  |L8.242|
0000f2  b2f1              UXTB     r1,r6                 ;288
0000f4  4825              LDR      r0,|L8.396|
0000f6  f7fffffe          BL       I2C_SendData
0000fa  f44f5440          MOV      r4,#0x3000            ;291
0000fe  e00a              B        |L8.278|
                  |L8.256|
000100  1e20              SUBS     r0,r4,#0              ;294
000102  f1a40401          SUB      r4,r4,#1              ;294
000106  d106              BNE      |L8.278|
000108  f7fffffe          BL       I2cInit
00010c  2001              MOVS     r0,#1                 ;297
00010e  f7fffffe          BL       I2cFsmcClkEnable
000112  2005              MOVS     r0,#5                 ;298
000114  e78c              B        |L8.48|
                  |L8.278|
000116  4920              LDR      r1,|L8.408|
000118  1c89              ADDS     r1,r1,#2              ;292
00011a  481c              LDR      r0,|L8.396|
00011c  f7fffffe          BL       I2C_CheckEvent
000120  2800              CMP      r0,#0                 ;292
000122  d0ed              BEQ      |L8.256|
000124  e021              B        |L8.362|
                  |L8.294|
000126  7839              LDRB     r1,[r7,#0]            ;305
000128  4818              LDR      r0,|L8.396|
00012a  f7fffffe          BL       I2C_SendData
00012e  f44f5440          MOV      r4,#0x3000            ;308
000132  e00a              B        |L8.330|
                  |L8.308|
000134  1e20              SUBS     r0,r4,#0              ;311
000136  f1a40401          SUB      r4,r4,#1              ;311
00013a  d106              BNE      |L8.330|
00013c  f7fffffe          BL       I2cInit
000140  2001              MOVS     r0,#1                 ;314
000142  f7fffffe          BL       I2cFsmcClkEnable
000146  2005              MOVS     r0,#5                 ;315
000148  e772              B        |L8.48|
                  |L8.330|
00014a  4913              LDR      r1,|L8.408|
00014c  1c89              ADDS     r1,r1,#2              ;309
00014e  480f              LDR      r0,|L8.396|
000150  f7fffffe          BL       I2C_CheckEvent
000154  2800              CMP      r0,#0                 ;309
000156  d0ed              BEQ      |L8.308|
000158  2d01              CMP      r5,#1                 ;319
00015a  d103              BNE      |L8.356|
00015c  2101              MOVS     r1,#1                 ;321
00015e  480b              LDR      r0,|L8.396|
000160  f7fffffe          BL       I2C_GenerateSTOP
                  |L8.356|
000164  1c7f              ADDS     r7,r7,#1              ;324
000166  1e68              SUBS     r0,r5,#1              ;325
000168  b285              UXTH     r5,r0                 ;325
                  |L8.362|
00016a  2d00              CMP      r5,#0                 ;302
00016c  d1db              BNE      |L8.294|
00016e  2000              MOVS     r0,#0                 ;329
000170  9001              STR      r0,[sp,#4]            ;329
000172  e002              B        |L8.378|
                  |L8.372|
000174  9801              LDR      r0,[sp,#4]            ;329
000176  1c40              ADDS     r0,r0,#1              ;329
000178  9001              STR      r0,[sp,#4]            ;329
                  |L8.378|
00017a  9801              LDR      r0,[sp,#4]            ;329
00017c  f5b07ffa          CMP      r0,#0x1f4             ;329
000180  dbf8              BLT      |L8.372|
000182  2001              MOVS     r0,#1                 ;331
000184  f7fffffe          BL       I2cFsmcClkEnable
000188  2000              MOVS     r0,#0                 ;332
00018a  e751              B        |L8.48|
;;;334    
                          ENDP

                  |L8.396|
                          DCD      0x40005400
                  |L8.400|
                          DCD      0x10000040
                  |L8.404|
                          DCD      0x00030001
                  |L8.408|
                          DCD      0x00070082
