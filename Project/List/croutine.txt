; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\croutine.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\croutine.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\croutine.crf ..\Libraries\FreeRTOS\croutine.c]
                          THUMB

                          AREA ||i.prvCheckDelayedList||, CODE, READONLY, ALIGN=2

                  prvCheckDelayedList PROC
;;;254    
;;;255    static void prvCheckDelayedList( void )
000000  b510              PUSH     {r4,lr}
;;;256    {
;;;257    CRCB_t *pxCRCB;
;;;258    
;;;259    	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
000002  f7fffffe          BL       xTaskGetTickCount
000006  492c              LDR      r1,|L1.184|
000008  6809              LDR      r1,[r1,#0]  ; xLastTickCount
00000a  1a40              SUBS     r0,r0,r1
00000c  492b              LDR      r1,|L1.188|
00000e  6008              STR      r0,[r1,#0]  ; xPassedTicks
;;;260    	while( xPassedTicks )
000010  e049              B        |L1.166|
                  |L1.18|
;;;261    	{
;;;262    		xCoRoutineTickCount++;
000012  482b              LDR      r0,|L1.192|
000014  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
000016  1c40              ADDS     r0,r0,#1
000018  4929              LDR      r1,|L1.192|
00001a  6008              STR      r0,[r1,#0]  ; xCoRoutineTickCount
;;;263    		xPassedTicks--;
00001c  4827              LDR      r0,|L1.188|
00001e  6800              LDR      r0,[r0,#0]  ; xPassedTicks
000020  1e40              SUBS     r0,r0,#1
000022  4926              LDR      r1,|L1.188|
000024  6008              STR      r0,[r1,#0]  ; xPassedTicks
;;;264    
;;;265    		/* If the tick count has overflowed we need to swap the ready lists. */
;;;266    		if( xCoRoutineTickCount == 0 )
000026  4826              LDR      r0,|L1.192|
000028  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
00002a  b940              CBNZ     r0,|L1.62|
;;;267    		{
;;;268    			List_t * pxTemp;
;;;269    
;;;270    			/* Tick count has overflowed so we need to swap the delay lists.  If there are
;;;271    			any items in pxDelayedCoRoutineList here then there is an error! */
;;;272    			pxTemp = pxDelayedCoRoutineList;
00002c  4925              LDR      r1,|L1.196|
00002e  6808              LDR      r0,[r1,#0]  ; pxDelayedCoRoutineList
;;;273    			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
000030  4925              LDR      r1,|L1.200|
000032  6809              LDR      r1,[r1,#0]  ; pxOverflowDelayedCoRoutineList
000034  4a23              LDR      r2,|L1.196|
000036  6011              STR      r1,[r2,#0]  ; pxDelayedCoRoutineList
;;;274    			pxOverflowDelayedCoRoutineList = pxTemp;
000038  4923              LDR      r1,|L1.200|
00003a  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedCoRoutineList
;;;275    		}
00003c  bf00              NOP      
                  |L1.62|
;;;276    
;;;277    		/* See if this tick has made a timeout expire. */
;;;278    		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
00003e  e028              B        |L1.146|
                  |L1.64|
;;;279    		{
;;;280    			pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
000040  4820              LDR      r0,|L1.196|
000042  6800              LDR      r0,[r0,#0]  ; pxDelayedCoRoutineList
000044  68c0              LDR      r0,[r0,#0xc]
000046  68c4              LDR      r4,[r0,#0xc]
;;;281    
;;;282    			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
000048  491d              LDR      r1,|L1.192|
00004a  6860              LDR      r0,[r4,#4]
00004c  6809              LDR      r1,[r1,#0]  ; xCoRoutineTickCount
00004e  4288              CMP      r0,r1
000050  d900              BLS      |L1.84|
;;;283    			{
;;;284    				/* Timeout not yet expired. */
;;;285    				break;
000052  e027              B        |L1.164|
                  |L1.84|
;;;286    			}
;;;287    
;;;288    			portDISABLE_INTERRUPTS();
000054  f7fffffe          BL       ulPortSetInterruptMask
;;;289    			{
;;;290    				/* The event could have occurred just before this critical
;;;291    				section.  If this is the case then the generic list item will
;;;292    				have been moved to the pending ready list and the following
;;;293    				line is still valid.  Also the pvContainer parameter will have
;;;294    				been set to NULL so the following lines are also valid. */
;;;295    				uxListRemove( &( pxCRCB->xGenericListItem ) );
000058  1d20              ADDS     r0,r4,#4
00005a  f7fffffe          BL       uxListRemove
;;;296    
;;;297    				/* Is the co-routine waiting on an event also? */
;;;298    				if( pxCRCB->xEventListItem.pvContainer )
00005e  6aa0              LDR      r0,[r4,#0x28]
000060  b118              CBZ      r0,|L1.106|
;;;299    				{
;;;300    					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
000062  f1040018          ADD      r0,r4,#0x18
000066  f7fffffe          BL       uxListRemove
                  |L1.106|
;;;301    				}
;;;302    			}
;;;303    			portENABLE_INTERRUPTS();
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       vPortClearInterruptMask
;;;304    
;;;305    			prvAddCoRoutineToReadyQueue( pxCRCB );
000070  4916              LDR      r1,|L1.204|
000072  6ae0              LDR      r0,[r4,#0x2c]
000074  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
000076  4288              CMP      r0,r1
000078  d902              BLS      |L1.128|
00007a  4914              LDR      r1,|L1.204|
00007c  6ae0              LDR      r0,[r4,#0x2c]
00007e  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L1.128|
000080  6ae1              LDR      r1,[r4,#0x2c]
000082  eb010181          ADD      r1,r1,r1,LSL #2
000086  4a12              LDR      r2,|L1.208|
000088  eb020081          ADD      r0,r2,r1,LSL #2
00008c  1d21              ADDS     r1,r4,#4
00008e  f7fffffe          BL       vListInsertEnd
                  |L1.146|
000092  480c              LDR      r0,|L1.196|
000094  6800              LDR      r0,[r0,#0]            ;278  ; pxDelayedCoRoutineList
000096  6800              LDR      r0,[r0,#0]            ;278
000098  b908              CBNZ     r0,|L1.158|
00009a  2001              MOVS     r0,#1                 ;278
00009c  e000              B        |L1.160|
                  |L1.158|
00009e  2000              MOVS     r0,#0                 ;278
                  |L1.160|
0000a0  2800              CMP      r0,#0                 ;278
0000a2  d0cd              BEQ      |L1.64|
                  |L1.164|
0000a4  bf00              NOP                            ;285
                  |L1.166|
0000a6  4805              LDR      r0,|L1.188|
0000a8  6800              LDR      r0,[r0,#0]            ;260  ; xPassedTicks
0000aa  2800              CMP      r0,#0                 ;260
0000ac  d1b1              BNE      |L1.18|
;;;306    		}
;;;307    	}
;;;308    
;;;309    	xLastTickCount = xCoRoutineTickCount;
0000ae  4804              LDR      r0,|L1.192|
0000b0  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
0000b2  4901              LDR      r1,|L1.184|
0000b4  6008              STR      r0,[r1,#0]  ; xLastTickCount
;;;310    }
0000b6  bd10              POP      {r4,pc}
;;;311    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.184|
                          DCD      xLastTickCount
                  |L1.188|
                          DCD      xPassedTicks
                  |L1.192|
                          DCD      xCoRoutineTickCount
                  |L1.196|
                          DCD      pxDelayedCoRoutineList
                  |L1.200|
                          DCD      pxOverflowDelayedCoRoutineList
                  |L1.204|
                          DCD      uxTopCoRoutineReadyPriority
                  |L1.208|
                          DCD      pxReadyCoRoutineLists

                          AREA ||i.prvCheckPendingReadyList||, CODE, READONLY, ALIGN=2

                  prvCheckPendingReadyList PROC
;;;231    
;;;232    static void prvCheckPendingReadyList( void )
000000  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	/* Are there any co-routines waiting to get moved to the ready list?  These
;;;235    	are co-routines that have been readied by an ISR.  The ISR cannot access
;;;236    	the	ready lists itself. */
;;;237    	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
000002  e020              B        |L2.70|
                  |L2.4|
;;;238    	{
;;;239    		CRCB_t *pxUnblockedCRCB;
;;;240    
;;;241    		/* The pending ready list can be accessed by an ISR. */
;;;242    		portDISABLE_INTERRUPTS();
000004  f7fffffe          BL       ulPortSetInterruptMask
;;;243    		{
;;;244    			pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
000008  4813              LDR      r0,|L2.88|
00000a  68c0              LDR      r0,[r0,#0xc]
00000c  68c4              LDR      r4,[r0,#0xc]
;;;245    			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
00000e  f1040018          ADD      r0,r4,#0x18
000012  f7fffffe          BL       uxListRemove
;;;246    		}
;;;247    		portENABLE_INTERRUPTS();
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       vPortClearInterruptMask
;;;248    
;;;249    		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
00001c  1d20              ADDS     r0,r4,#4
00001e  f7fffffe          BL       uxListRemove
;;;250    		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
000022  490e              LDR      r1,|L2.92|
000024  6ae0              LDR      r0,[r4,#0x2c]
000026  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
000028  4288              CMP      r0,r1
00002a  d902              BLS      |L2.50|
00002c  490b              LDR      r1,|L2.92|
00002e  6ae0              LDR      r0,[r4,#0x2c]
000030  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L2.50|
000032  6ae1              LDR      r1,[r4,#0x2c]
000034  eb010181          ADD      r1,r1,r1,LSL #2
000038  4a09              LDR      r2,|L2.96|
00003a  eb020081          ADD      r0,r2,r1,LSL #2
00003e  1d21              ADDS     r1,r4,#4
000040  f7fffffe          BL       vListInsertEnd
;;;251    	}
000044  bf00              NOP      
                  |L2.70|
000046  4804              LDR      r0,|L2.88|
000048  6800              LDR      r0,[r0,#0]            ;237  ; xPendingReadyCoRoutineList
00004a  b908              CBNZ     r0,|L2.80|
00004c  2001              MOVS     r0,#1                 ;237
00004e  e000              B        |L2.82|
                  |L2.80|
000050  2000              MOVS     r0,#0                 ;237
                  |L2.82|
000052  2800              CMP      r0,#0                 ;237
000054  d0d6              BEQ      |L2.4|
;;;252    }
000056  bd10              POP      {r4,pc}
;;;253    /*-----------------------------------------------------------*/
                          ENDP

                  |L2.88|
                          DCD      xPendingReadyCoRoutineList
                  |L2.92|
                          DCD      uxTopCoRoutineReadyPriority
                  |L2.96|
                          DCD      pxReadyCoRoutineLists

                          AREA ||i.prvInitialiseCoRoutineLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseCoRoutineLists PROC
;;;342    
;;;343    static void prvInitialiseCoRoutineLists( void )
000000  b510              PUSH     {r4,lr}
;;;344    {
;;;345    UBaseType_t uxPriority;
;;;346    
;;;347    	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L3.22|
                  |L3.6|
;;;348    	{
;;;349    		vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0c              LDR      r2,|L3.60|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;347
                  |L3.22|
000016  2c02              CMP      r4,#2                 ;347
000018  d3f5              BCC      |L3.6|
;;;350    	}
;;;351    
;;;352    	vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
00001a  4809              LDR      r0,|L3.64|
00001c  f7fffffe          BL       vListInitialise
;;;353    	vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
000020  4808              LDR      r0,|L3.68|
000022  f7fffffe          BL       vListInitialise
;;;354    	vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
000026  4808              LDR      r0,|L3.72|
000028  f7fffffe          BL       vListInitialise
;;;355    
;;;356    	/* Start with pxDelayedCoRoutineList using list1 and the
;;;357    	pxOverflowDelayedCoRoutineList using list2. */
;;;358    	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
00002c  4804              LDR      r0,|L3.64|
00002e  4907              LDR      r1,|L3.76|
000030  6008              STR      r0,[r1,#0]  ; pxDelayedCoRoutineList
;;;359    	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
000032  4804              LDR      r0,|L3.68|
000034  4906              LDR      r1,|L3.80|
000036  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedCoRoutineList
;;;360    }
000038  bd10              POP      {r4,pc}
;;;361    /*-----------------------------------------------------------*/
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      pxReadyCoRoutineLists
                  |L3.64|
                          DCD      xDelayedCoRoutineList1
                  |L3.68|
                          DCD      xDelayedCoRoutineList2
                  |L3.72|
                          DCD      xPendingReadyCoRoutineList
                  |L3.76|
                          DCD      pxDelayedCoRoutineList
                  |L3.80|
                          DCD      pxOverflowDelayedCoRoutineList

                          AREA ||i.vCoRoutineAddToDelayedList||, CODE, READONLY, ALIGN=2

                  vCoRoutineAddToDelayedList PROC
;;;193    
;;;194    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay, List_t *pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;196    TickType_t xTimeToWake;
;;;197    
;;;198    	/* Calculate the time to wake - this may overflow but this is
;;;199    	not a problem. */
;;;200    	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
000006  4813              LDR      r0,|L4.84|
000008  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
00000a  1946              ADDS     r6,r0,r5
;;;201    
;;;202    	/* We must remove ourselves from the ready list before adding
;;;203    	ourselves to the blocked list as the same list item is used for
;;;204    	both lists. */
;;;205    	( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
00000c  4812              LDR      r0,|L4.88|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
000010  1d00              ADDS     r0,r0,#4
000012  f7fffffe          BL       uxListRemove
;;;206    
;;;207    	/* The list item will be inserted in wake time order. */
;;;208    	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
000016  4810              LDR      r0,|L4.88|
000018  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
00001a  6046              STR      r6,[r0,#4]
;;;209    
;;;210    	if( xTimeToWake < xCoRoutineTickCount )
00001c  480d              LDR      r0,|L4.84|
00001e  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
000020  4286              CMP      r6,r0
000022  d207              BCS      |L4.52|
;;;211    	{
;;;212    		/* Wake time has overflowed.  Place this item in the
;;;213    		overflow list. */
;;;214    		vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
000024  480c              LDR      r0,|L4.88|
000026  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
000028  1d09              ADDS     r1,r1,#4
00002a  480c              LDR      r0,|L4.92|
00002c  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedCoRoutineList
00002e  f7fffffe          BL       vListInsert
000032  e006              B        |L4.66|
                  |L4.52|
;;;215    	}
;;;216    	else
;;;217    	{
;;;218    		/* The wake time has not overflowed, so we can use the
;;;219    		current block list. */
;;;220    		vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
000034  4808              LDR      r0,|L4.88|
000036  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
000038  1d09              ADDS     r1,r1,#4
00003a  4809              LDR      r0,|L4.96|
00003c  6800              LDR      r0,[r0,#0]  ; pxDelayedCoRoutineList
00003e  f7fffffe          BL       vListInsert
                  |L4.66|
;;;221    	}
;;;222    
;;;223    	if( pxEventList )
000042  b12c              CBZ      r4,|L4.80|
;;;224    	{
;;;225    		/* Also add the co-routine to an event list.  If this is done then the
;;;226    		function must be called with interrupts disabled. */
;;;227    		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
000044  4804              LDR      r0,|L4.88|
000046  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
000048  3118              ADDS     r1,r1,#0x18
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       vListInsert
                  |L4.80|
;;;228    	}
;;;229    }
000050  bd70              POP      {r4-r6,pc}
;;;230    /*-----------------------------------------------------------*/
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      xCoRoutineTickCount
                  |L4.88|
                          DCD      pxCurrentCoRoutine
                  |L4.92|
                          DCD      pxOverflowDelayedCoRoutineList
                  |L4.96|
                          DCD      pxDelayedCoRoutineList

                          AREA ||i.vCoRoutineSchedule||, CODE, READONLY, ALIGN=2

                  vCoRoutineSchedule PROC
;;;312    
;;;313    void vCoRoutineSchedule( void )
000000  b510              PUSH     {r4,lr}
;;;314    {
;;;315    	/* See if any co-routines readied by events need moving to the ready lists. */
;;;316    	prvCheckPendingReadyList();
000002  f7fffffe          BL       prvCheckPendingReadyList
;;;317    
;;;318    	/* See if any delayed co-routines have timed out. */
;;;319    	prvCheckDelayedList();
000006  f7fffffe          BL       prvCheckDelayedList
;;;320    
;;;321    	/* Find the highest priority queue that contains ready co-routines. */
;;;322    	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
00000a  e008              B        |L5.30|
                  |L5.12|
;;;323    	{
;;;324    		if( uxTopCoRoutineReadyPriority == 0 )
00000c  481b              LDR      r0,|L5.124|
00000e  6800              LDR      r0,[r0,#0]  ; uxTopCoRoutineReadyPriority
000010  b900              CBNZ     r0,|L5.20|
                  |L5.18|
;;;325    		{
;;;326    			/* No more co-routines to check. */
;;;327    			return;
;;;328    		}
;;;329    		--uxTopCoRoutineReadyPriority;
;;;330    	}
;;;331    
;;;332    	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
;;;333    	 of the	same priority get an equal share of the processor time. */
;;;334    	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
;;;335    
;;;336    	/* Call the co-routine. */
;;;337    	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
;;;338    
;;;339    	return;
;;;340    }
000012  bd10              POP      {r4,pc}
                  |L5.20|
000014  4819              LDR      r0,|L5.124|
000016  6800              LDR      r0,[r0,#0]            ;329  ; uxTopCoRoutineReadyPriority
000018  1e40              SUBS     r0,r0,#1              ;329
00001a  4918              LDR      r1,|L5.124|
00001c  6008              STR      r0,[r1,#0]            ;329  ; uxTopCoRoutineReadyPriority
                  |L5.30|
00001e  4817              LDR      r0,|L5.124|
000020  6800              LDR      r0,[r0,#0]            ;322  ; uxTopCoRoutineReadyPriority
000022  eb000080          ADD      r0,r0,r0,LSL #2       ;322
000026  4916              LDR      r1,|L5.128|
000028  f8510020          LDR      r0,[r1,r0,LSL #2]     ;322
00002c  b908              CBNZ     r0,|L5.50|
00002e  2001              MOVS     r0,#1                 ;322
000030  e000              B        |L5.52|
                  |L5.50|
000032  2000              MOVS     r0,#0                 ;322
                  |L5.52|
000034  2800              CMP      r0,#0                 ;322
000036  d1e9              BNE      |L5.12|
000038  4910              LDR      r1,|L5.124|
00003a  6809              LDR      r1,[r1,#0]            ;334  ; uxTopCoRoutineReadyPriority
00003c  eb010181          ADD      r1,r1,r1,LSL #2       ;334
000040  4a0f              LDR      r2,|L5.128|
000042  eb020081          ADD      r0,r2,r1,LSL #2       ;334
000046  6841              LDR      r1,[r0,#4]            ;334
000048  6849              LDR      r1,[r1,#4]            ;334
00004a  6041              STR      r1,[r0,#4]            ;334
00004c  f1000108          ADD      r1,r0,#8              ;334
000050  6842              LDR      r2,[r0,#4]            ;334
000052  428a              CMP      r2,r1                 ;334
000054  d102              BNE      |L5.92|
000056  6841              LDR      r1,[r0,#4]            ;334
000058  6849              LDR      r1,[r1,#4]            ;334
00005a  6041              STR      r1,[r0,#4]            ;334
                  |L5.92|
00005c  6841              LDR      r1,[r0,#4]            ;334
00005e  68c9              LDR      r1,[r1,#0xc]          ;334
000060  4a08              LDR      r2,|L5.132|
000062  6011              STR      r1,[r2,#0]            ;334  ; pxCurrentCoRoutine
000064  4610              MOV      r0,r2                 ;337
000066  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
000068  6b01              LDR      r1,[r0,#0x30]         ;337
00006a  4610              MOV      r0,r2                 ;337
00006c  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
00006e  6802              LDR      r2,[r0,#0]            ;337
000070  4804              LDR      r0,|L5.132|
000072  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
000074  4790              BLX      r2                    ;337
000076  bf00              NOP                            ;339
000078  e7cb              B        |L5.18|
;;;341    /*-----------------------------------------------------------*/
                          ENDP

00007a  0000              DCW      0x0000
                  |L5.124|
                          DCD      uxTopCoRoutineReadyPriority
                  |L5.128|
                          DCD      pxReadyCoRoutineLists
                  |L5.132|
                          DCD      pxCurrentCoRoutine

                          AREA ||i.xCoRoutineCreate||, CODE, READONLY, ALIGN=2

                  xCoRoutineCreate PROC
;;;136    
;;;137    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, UBaseType_t uxPriority, UBaseType_t uxIndex )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;138    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;139    BaseType_t xReturn;
;;;140    CRCB_t *pxCoRoutine;
;;;141    
;;;142    	/* Allocate the memory that will store the co-routine control block. */
;;;143    	pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
00000a  2038              MOVS     r0,#0x38
00000c  f7fffffe          BL       pvPortMalloc
000010  4604              MOV      r4,r0
;;;144    	if( pxCoRoutine )
000012  2c00              CMP      r4,#0
000014  d02e              BEQ      |L6.116|
;;;145    	{
;;;146    		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
;;;147    		be created and the co-routine data structures need initialising. */
;;;148    		if( pxCurrentCoRoutine == NULL )
000016  481a              LDR      r0,|L6.128|
000018  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
00001a  b918              CBNZ     r0,|L6.36|
;;;149    		{
;;;150    			pxCurrentCoRoutine = pxCoRoutine;
00001c  4818              LDR      r0,|L6.128|
00001e  6004              STR      r4,[r0,#0]  ; pxCurrentCoRoutine
;;;151    			prvInitialiseCoRoutineLists();
000020  f7fffffe          BL       prvInitialiseCoRoutineLists
                  |L6.36|
;;;152    		}
;;;153    
;;;154    		/* Check the priority is within limits. */
;;;155    		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
000024  2d02              CMP      r5,#2
000026  d300              BCC      |L6.42|
;;;156    		{
;;;157    			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
000028  2501              MOVS     r5,#1
                  |L6.42|
;;;158    		}
;;;159    
;;;160    		/* Fill out the co-routine control block from the function parameters. */
;;;161    		pxCoRoutine->uxState = corINITIAL_STATE;
00002a  2000              MOVS     r0,#0
00002c  86a0              STRH     r0,[r4,#0x34]
;;;162    		pxCoRoutine->uxPriority = uxPriority;
00002e  62e5              STR      r5,[r4,#0x2c]
;;;163    		pxCoRoutine->uxIndex = uxIndex;
000030  f8c48030          STR      r8,[r4,#0x30]
;;;164    		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
000034  6027              STR      r7,[r4,#0]
;;;165    
;;;166    		/* Initialise all the other co-routine control block parameters. */
;;;167    		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
000036  1d20              ADDS     r0,r4,#4
000038  f7fffffe          BL       vListInitialiseItem
;;;168    		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
00003c  f1040018          ADD      r0,r4,#0x18
000040  f7fffffe          BL       vListInitialiseItem
;;;169    
;;;170    		/* Set the co-routine control block as a link back from the ListItem_t.
;;;171    		This is so we can get back to the containing CRCB from a generic item
;;;172    		in a list. */
;;;173    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
000044  6124              STR      r4,[r4,#0x10]
;;;174    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
000046  6264              STR      r4,[r4,#0x24]
;;;175    
;;;176    		/* Event lists are always in priority order. */
;;;177    		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
000048  f1c50002          RSB      r0,r5,#2
00004c  61a0              STR      r0,[r4,#0x18]
;;;178    
;;;179    		/* Now the co-routine has been initialised it can be added to the ready
;;;180    		list at the correct priority. */
;;;181    		prvAddCoRoutineToReadyQueue( pxCoRoutine );
00004e  490d              LDR      r1,|L6.132|
000050  6ae0              LDR      r0,[r4,#0x2c]
000052  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
000054  4288              CMP      r0,r1
000056  d902              BLS      |L6.94|
000058  490a              LDR      r1,|L6.132|
00005a  6ae0              LDR      r0,[r4,#0x2c]
00005c  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L6.94|
00005e  6ae1              LDR      r1,[r4,#0x2c]
000060  eb010181          ADD      r1,r1,r1,LSL #2
000064  4a08              LDR      r2,|L6.136|
000066  eb020081          ADD      r0,r2,r1,LSL #2
00006a  1d21              ADDS     r1,r4,#4
00006c  f7fffffe          BL       vListInsertEnd
;;;182    
;;;183    		xReturn = pdPASS;
000070  2601              MOVS     r6,#1
000072  e001              B        |L6.120|
                  |L6.116|
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
000074  f04f36ff          MOV      r6,#0xffffffff
                  |L6.120|
;;;188    	}
;;;189    
;;;190    	return xReturn;
000078  4630              MOV      r0,r6
;;;191    }
00007a  e8bd81f0          POP      {r4-r8,pc}
;;;192    /*-----------------------------------------------------------*/
                          ENDP

00007e  0000              DCW      0x0000
                  |L6.128|
                          DCD      pxCurrentCoRoutine
                  |L6.132|
                          DCD      uxTopCoRoutineReadyPriority
                  |L6.136|
                          DCD      pxReadyCoRoutineLists

                          AREA ||i.xCoRoutineRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xCoRoutineRemoveFromEventList PROC
;;;362    
;;;363    BaseType_t xCoRoutineRemoveFromEventList( const List_t *pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;364    {
000002  4606              MOV      r6,r0
;;;365    CRCB_t *pxUnblockedCRCB;
;;;366    BaseType_t xReturn;
;;;367    
;;;368    	/* This function is called from within an interrupt.  It can only access
;;;369    	event lists and the pending ready list.  This function assumes that a
;;;370    	check has already been made to ensure pxEventList is not empty. */
;;;371    	pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;372    	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
000008  f1040018          ADD      r0,r4,#0x18
00000c  f7fffffe          BL       uxListRemove
;;;373    	vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
000010  f1040118          ADD      r1,r4,#0x18
000014  4806              LDR      r0,|L7.48|
000016  f7fffffe          BL       vListInsertEnd
;;;374    
;;;375    	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
00001a  4906              LDR      r1,|L7.52|
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentCoRoutine
000020  6ac9              LDR      r1,[r1,#0x2c]
000022  4288              CMP      r0,r1
000024  d301              BCC      |L7.42|
;;;376    	{
;;;377    		xReturn = pdTRUE;
000026  2501              MOVS     r5,#1
000028  e000              B        |L7.44|
                  |L7.42|
;;;378    	}
;;;379    	else
;;;380    	{
;;;381    		xReturn = pdFALSE;
00002a  2500              MOVS     r5,#0
                  |L7.44|
;;;382    	}
;;;383    
;;;384    	return xReturn;
00002c  4628              MOV      r0,r5
;;;385    }
00002e  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

                  |L7.48|
                          DCD      xPendingReadyCoRoutineList
                  |L7.52|
                          DCD      pxCurrentCoRoutine

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyCoRoutineLists
                          %        40
                  xDelayedCoRoutineList1
                          %        20
                  xDelayedCoRoutineList2
                          %        20
                  xPendingReadyCoRoutineList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxDelayedCoRoutineList
                          DCD      0x00000000
                  pxOverflowDelayedCoRoutineList
                          DCD      0x00000000
                  pxCurrentCoRoutine
                          DCD      0x00000000
                  uxTopCoRoutineReadyPriority
                          DCD      0x00000000
                  xCoRoutineTickCount
                          DCD      0x00000000
                  xLastTickCount
                          DCD      0x00000000
                  xPassedTicks
                          DCD      0x00000000
