; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\list.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\list.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I..\BSP\crc -I..\BSP\ADC -I..\BSP\BSP_USART3 -I..\BSP\E31radio_driver -I..\BSP\TIMER2 -I..\BSP\BSP_USART2 -I.\RTE\_STM32F10x________2.0.0 -IE:\keil\Keil\STM32F1xx_DFP\2.2.0\Device\Include -IE:\keil\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\list.crf ..\Libraries\FreeRTOS\list.c]
                          THUMB

                          AREA ||i.uxListRemove||, CODE, READONLY, ALIGN=1

                  uxListRemove PROC
;;;178    
;;;179    UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
000000  4601              MOV      r1,r0
;;;180    {
;;;181    /* The list item knows which list it is in.  Obtain the list from the list
;;;182    item. */
;;;183    List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
000002  690a              LDR      r2,[r1,#0x10]
;;;184    
;;;185    	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
000004  e9d13001          LDRD     r3,r0,[r1,#4]
000008  6098              STR      r0,[r3,#8]
;;;186    	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
00000a  e9d10301          LDRD     r0,r3,[r1,#4]
00000e  6058              STR      r0,[r3,#4]
;;;187    
;;;188    	/* Make sure the index is left pointing to a valid item. */
;;;189    	if( pxList->pxIndex == pxItemToRemove )
000010  6850              LDR      r0,[r2,#4]
000012  4288              CMP      r0,r1
000014  d101              BNE      |L1.26|
;;;190    	{
;;;191    		pxList->pxIndex = pxItemToRemove->pxPrevious;
000016  6888              LDR      r0,[r1,#8]
000018  6050              STR      r0,[r2,#4]
                  |L1.26|
;;;192    	}
;;;193    	else
;;;194    	{
;;;195    		mtCOVERAGE_TEST_MARKER();
;;;196    	}
;;;197    
;;;198    	pxItemToRemove->pvContainer = NULL;
00001a  2000              MOVS     r0,#0
00001c  6108              STR      r0,[r1,#0x10]
;;;199    	( pxList->uxNumberOfItems )--;
00001e  6810              LDR      r0,[r2,#0]
000020  1e40              SUBS     r0,r0,#1
000022  6010              STR      r0,[r2,#0]
;;;200    
;;;201    	return pxList->uxNumberOfItems;
000024  6810              LDR      r0,[r2,#0]
;;;202    }
000026  4770              BX       lr
;;;203    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialise||, CODE, READONLY, ALIGN=1

                  vListInitialise PROC
;;;74     
;;;75     void vListInitialise( List_t * const pxList )
000000  f1000108          ADD      r1,r0,#8
;;;76     {
;;;77     	/* The list structure contains a list item which is used to mark the
;;;78     	end of the list.  To initialise the list the list end is inserted
;;;79     	as the only list entry. */
;;;80     	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000004  6041              STR      r1,[r0,#4]
;;;81     
;;;82     	/* The list end value is the highest possible value in the list to
;;;83     	ensure it remains at the end of the list. */
;;;84     	pxList->xListEnd.xItemValue = portMAX_DELAY;
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  6081              STR      r1,[r0,#8]
;;;85     
;;;86     	/* The list end next and previous pointers point to itself so we know
;;;87     	when the list is empty. */
;;;88     	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000c  f1000108          ADD      r1,r0,#8
000010  60c1              STR      r1,[r0,#0xc]
;;;89     	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000012  6101              STR      r1,[r0,#0x10]
;;;90     
;;;91     	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
000014  2100              MOVS     r1,#0
000016  6001              STR      r1,[r0,#0]
;;;92     }
000018  4770              BX       lr
;;;93     /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialiseItem||, CODE, READONLY, ALIGN=1

                  vListInitialiseItem PROC
;;;94     
;;;95     void vListInitialiseItem( ListItem_t * const pxItem )
000000  2100              MOVS     r1,#0
;;;96     {
;;;97     	/* Make sure the list item is not recorded as being on a list. */
;;;98     	pxItem->pvContainer = NULL;
000002  6101              STR      r1,[r0,#0x10]
;;;99     }
000004  4770              BX       lr
;;;100    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsert||, CODE, READONLY, ALIGN=1

                  vListInsert PROC
;;;120    
;;;121    void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  b510              PUSH     {r4,lr}
;;;122    {
000002  4602              MOV      r2,r0
;;;123    ListItem_t *pxIterator;
;;;124    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
000004  680b              LDR      r3,[r1,#0]
;;;125    
;;;126    	/* Insert the new list item into the list, sorted in xItemValue order.
;;;127    
;;;128    	If the list already contains a list item with the same item value then
;;;129    	the new list item should be placed after it.  This ensures that TCB's which
;;;130    	are stored in ready lists (all of which have the same xItemValue value)
;;;131    	get an equal share of the CPU.  However, if the xItemValue is the same as
;;;132    	the back marker the iteration loop below will not end.  This means we need
;;;133    	to guard against this by checking the value first and modifying the
;;;134    	algorithm slightly if necessary. */
;;;135    	if( xValueOfInsertion == portMAX_DELAY )
000006  1c5c              ADDS     r4,r3,#1
000008  b90c              CBNZ     r4,|L4.14|
;;;136    	{
;;;137    		pxIterator = pxList->xListEnd.pxPrevious;
00000a  6910              LDR      r0,[r2,#0x10]
00000c  e007              B        |L4.30|
                  |L4.14|
;;;138    	}
;;;139    	else
;;;140    	{
;;;141    		/* *** NOTE ***********************************************************
;;;142    		If you find your application is crashing here then likely causes are:
;;;143    			1) Stack overflow -
;;;144    			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
;;;145    			2) Incorrect interrupt priority assignment, especially on Cortex-M3
;;;146    			   parts where numerically high priority values denote low actual
;;;147    			   interrupt priories, which can seem counter intuitive.  See
;;;148    			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
;;;149    			3) Calling an API function from within a critical section or when
;;;150    			   the scheduler is suspended, or calling an API function that does
;;;151    			   not end in "FromISR" from an interrupt.
;;;152    			4) Using a queue or semaphore before it has been initialised or
;;;153    			   before the scheduler has been started (are interrupts firing
;;;154    			   before vTaskStartScheduler() has been called?).
;;;155    		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
;;;156    		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
;;;157    		**********************************************************************/
;;;158    
;;;159    		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000e  f1020008          ADD      r0,r2,#8
000012  e000              B        |L4.22|
                  |L4.20|
000014  6840              LDR      r0,[r0,#4]
                  |L4.22|
000016  6844              LDR      r4,[r0,#4]
000018  6824              LDR      r4,[r4,#0]
00001a  429c              CMP      r4,r3
00001c  d9fa              BLS      |L4.20|
                  |L4.30|
;;;160    		{
;;;161    			/* There is nothing to do here, we are just iterating to the
;;;162    			wanted insertion position. */
;;;163    		}
;;;164    	}
;;;165    
;;;166    	pxNewListItem->pxNext = pxIterator->pxNext;
00001e  6844              LDR      r4,[r0,#4]
000020  604c              STR      r4,[r1,#4]
;;;167    	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
000022  684c              LDR      r4,[r1,#4]
000024  60a1              STR      r1,[r4,#8]
;;;168    	pxNewListItem->pxPrevious = pxIterator;
000026  6088              STR      r0,[r1,#8]
;;;169    	pxIterator->pxNext = pxNewListItem;
000028  6041              STR      r1,[r0,#4]
;;;170    
;;;171    	/* Remember which list the item is in.  This allows fast removal of the
;;;172    	item later. */
;;;173    	pxNewListItem->pvContainer = ( void * ) pxList;
00002a  610a              STR      r2,[r1,#0x10]
;;;174    
;;;175    	( pxList->uxNumberOfItems )++;
00002c  6814              LDR      r4,[r2,#0]
00002e  1c64              ADDS     r4,r4,#1
000030  6014              STR      r4,[r2,#0]
;;;176    }
000032  bd10              POP      {r4,pc}
;;;177    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsertEnd||, CODE, READONLY, ALIGN=1

                  vListInsertEnd PROC
;;;101    
;;;102    void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  6842              LDR      r2,[r0,#4]
;;;103    {
;;;104    ListItem_t * const pxIndex = pxList->pxIndex;
;;;105    
;;;106    	/* Insert a new list item into pxList, but rather than sort the list,
;;;107    	makes the new list item the last item to be removed by a call to
;;;108    	listGET_OWNER_OF_NEXT_ENTRY(). */
;;;109    	pxNewListItem->pxNext = pxIndex;
000002  604a              STR      r2,[r1,#4]
;;;110    	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
000004  6893              LDR      r3,[r2,#8]
000006  608b              STR      r3,[r1,#8]
;;;111    	pxIndex->pxPrevious->pxNext = pxNewListItem;
000008  6893              LDR      r3,[r2,#8]
00000a  6059              STR      r1,[r3,#4]
;;;112    	pxIndex->pxPrevious = pxNewListItem;
00000c  6091              STR      r1,[r2,#8]
;;;113    
;;;114    	/* Remember which list the item is in. */
;;;115    	pxNewListItem->pvContainer = ( void * ) pxList;
00000e  6108              STR      r0,[r1,#0x10]
;;;116    
;;;117    	( pxList->uxNumberOfItems )++;
000010  6803              LDR      r3,[r0,#0]
000012  1c5b              ADDS     r3,r3,#1
000014  6003              STR      r3,[r0,#0]
;;;118    }
000016  4770              BX       lr
;;;119    /*-----------------------------------------------------------*/
                          ENDP

