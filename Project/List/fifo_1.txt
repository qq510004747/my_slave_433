; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\fifo_1.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\fifo_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\J_LINK_RTT\RTT -I..\User -I..\BSP\BSP -I..\BSP\BSP_InPut -I..\BSP\BSP_OutPut -I..\BSP\BSP_FLASH -I..\BSP\BSP_USART -I..\Libraries\FreeRTOS -I..\Libraries\FreeRTOS\include -I..\Libraries\FreeRTOS\FreeRTOSConfig -I..\Libraries\FreeRTOS\portable\RVDS\ARM_CM3 -I..\BSP\OLED -I..\BSP -I..\BSP\OLED -I..\BSP\TIMER3 -I..\BSP\BSP_Switch -I..\BSP\BSP_USART1 -I..\BSP\BSP_Internet\W5500 -I..\BSP\SX1278\radio -I..\BSP\SX1278\platform\sx12xxEiger -I..\BSP\SX1278\platform -I..\BSP\apps -I..\BSP\BSP_FIFO -I.\RTE\_STM32F10x________2.0.0 -IF:\keil5-22\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -IF:\keil5-22\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\obj\fifo_1.crf ..\BSP\SX1278\platform\sx12xxEiger\fifo.c]
                          THUMB

                          AREA ||i.FifoFlush||, CODE, READONLY, ALIGN=1

                  FifoFlush PROC
;;;30     
;;;31     void FifoFlush( tFifo *fifo )
000000  2100              MOVS     r1,#0
;;;32     {
;;;33     	fifo->Begin = 0;
000002  8001              STRH     r1,[r0,#0]
;;;34     	fifo->End = 0;
000004  8041              STRH     r1,[r0,#2]
;;;35     }
000006  4770              BX       lr
;;;36     
                          ENDP


                          AREA ||i.FifoInit||, CODE, READONLY, ALIGN=1

                  FifoInit PROC
;;;8      
;;;9      void FifoInit( tFifo *fifo, uint16_t *buffer, uint16_t size )
000000  2300              MOVS     r3,#0
;;;10     {
;;;11     	fifo->Begin = 0;
000002  8003              STRH     r3,[r0,#0]
;;;12     	fifo->End = 0;
000004  8043              STRH     r3,[r0,#2]
;;;13     	fifo->Data = buffer;
000006  6041              STR      r1,[r0,#4]
;;;14     	fifo->Size = size;
000008  8102              STRH     r2,[r0,#8]
;;;15     }
00000a  4770              BX       lr
;;;16     
                          ENDP


                          AREA ||i.FifoNext||, CODE, READONLY, ALIGN=1

                  FifoNext PROC
;;;3      
;;;4      static uint16_t FifoNext( tFifo *fifo, uint16_t index )
000000  b510              PUSH     {r4,lr}
;;;5      {
000002  4602              MOV      r2,r0
;;;6      	return ( index + 1 ) % fifo->Size;
000004  8913              LDRH     r3,[r2,#8]
000006  1c48              ADDS     r0,r1,#1
000008  fb90f4f3          SDIV     r4,r0,r3
00000c  fb030014          MLS      r0,r3,r4,r0
000010  b280              UXTH     r0,r0
;;;7      }
000012  bd10              POP      {r4,pc}
;;;8      
                          ENDP


                          AREA ||i.FifoPop||, CODE, READONLY, ALIGN=1

                  FifoPop PROC
;;;22     
;;;23     uint16_t FifoPop( tFifo *fifo )
000000  b570              PUSH     {r4-r6,lr}
;;;24     {
000002  4604              MOV      r4,r0
;;;25     	uint16_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
000004  8821              LDRH     r1,[r4,#0]
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       FifoNext
00000c  6861              LDR      r1,[r4,#4]
00000e  f8315010          LDRH     r5,[r1,r0,LSL #1]
;;;26     
;;;27     	fifo->Begin = FifoNext( fifo, fifo->Begin );
000012  8821              LDRH     r1,[r4,#0]
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       FifoNext
00001a  8020              STRH     r0,[r4,#0]
;;;28     	return data;
00001c  4628              MOV      r0,r5
;;;29     }
00001e  bd70              POP      {r4-r6,pc}
;;;30     
                          ENDP


                          AREA ||i.FifoPush||, CODE, READONLY, ALIGN=1

                  FifoPush PROC
;;;16     
;;;17     void FifoPush( tFifo *fifo, uint16_t data )
000000  b570              PUSH     {r4-r6,lr}
;;;18     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;19     	fifo->End = FifoNext( fifo, fifo->End );
000006  8861              LDRH     r1,[r4,#2]
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       FifoNext
00000e  8060              STRH     r0,[r4,#2]
;;;20     	fifo->Data[fifo->End] = data;
000010  8861              LDRH     r1,[r4,#2]
000012  6860              LDR      r0,[r4,#4]
000014  f8205011          STRH     r5,[r0,r1,LSL #1]
;;;21     }
000018  bd70              POP      {r4-r6,pc}
;;;22     
                          ENDP


                          AREA ||i.IsFifoEmpty||, CODE, READONLY, ALIGN=1

                  IsFifoEmpty PROC
;;;36     
;;;37     bool IsFifoEmpty( tFifo *fifo )
000000  4601              MOV      r1,r0
;;;38     {
;;;39     	return ( fifo->Begin == fifo->End );
000002  8808              LDRH     r0,[r1,#0]
000004  884a              LDRH     r2,[r1,#2]
000006  4290              CMP      r0,r2
000008  d101              BNE      |L6.14|
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;40     }
00000c  4770              BX       lr
                  |L6.14|
00000e  2000              MOVS     r0,#0                 ;39
000010  e7fc              B        |L6.12|
;;;41     
                          ENDP


                          AREA ||i.IsFifoFull||, CODE, READONLY, ALIGN=1

                  IsFifoFull PROC
;;;41     
;;;42     bool IsFifoFull( tFifo *fifo )
000000  b510              PUSH     {r4,lr}
;;;43     {
000002  4604              MOV      r4,r0
;;;44     	return ( FifoNext( fifo, fifo->End ) == fifo->Begin );
000004  8861              LDRH     r1,[r4,#2]
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       FifoNext
00000c  8821              LDRH     r1,[r4,#0]
00000e  4288              CMP      r0,r1
000010  d101              BNE      |L7.22|
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;45     }
000014  bd10              POP      {r4,pc}
                  |L7.22|
000016  2000              MOVS     r0,#0                 ;44
000018  e7fc              B        |L7.20|
                          ENDP

